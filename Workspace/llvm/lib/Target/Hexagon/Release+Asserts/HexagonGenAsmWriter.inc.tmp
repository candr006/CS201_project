/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void HexagonInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    517U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    510U,	// BUNDLE
    527U,	// LIFETIME_START
    497U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// FRAME_ALLOC
    1030U,	// A2_abs
    1030U,	// A2_absp
    4195334U,	// A2_abssat
    8397830U,	// A2_add
    545268742U,	// A2_addh_h16_hh
    545268742U,	// A2_addh_h16_hl
    1082139654U,	// A2_addh_h16_lh
    1082139654U,	// A2_addh_h16_ll
    545268742U,	// A2_addh_h16_sat_hh
    545268742U,	// A2_addh_h16_sat_hl
    1082139654U,	// A2_addh_h16_sat_lh
    1082139654U,	// A2_addh_h16_sat_ll
    1082139654U,	// A2_addh_l16_hl
    1082139654U,	// A2_addh_l16_ll
    1082139654U,	// A2_addh_l16_sat_hl
    1082139654U,	// A2_addh_l16_sat_ll
    8397830U,	// A2_addp
    8397830U,	// A2_addpsat
    8397830U,	// A2_addsat
    8397830U,	// A2_addsp
    8397830U,	// A2_addsph
    8397830U,	// A2_addspl
    1623213062U,	// A2_and
    1623213062U,	// A2_andp
    25606U,	// A2_aslh
    33798U,	// A2_asrh
    1627431942U,	// A2_combine_hh
    1627431942U,	// A2_combine_hl
    1631626246U,	// A2_combine_lh
    1631626246U,	// A2_combine_ll
    2172699654U,	// A2_combineii
    1623237638U,	// A2_combinew
    58374U,	// A2_max
    58374U,	// A2_maxp
    66566U,	// A2_maxu
    66566U,	// A2_maxup
    74758U,	// A2_min
    74758U,	// A2_minp
    82950U,	// A2_minu
    82950U,	// A2_minup
    91142U,	// A2_negp
    4285446U,	// A2_negsat
    594U,	// A2_nop
    99334U,	// A2_notp
    1623303174U,	// A2_or
    1623303174U,	// A2_orp
    29476891U,	// A2_paddf
    29485083U,	// A2_paddfnew
    29477024U,	// A2_paddt
    29485216U,	// A2_paddtnew
    33671195U,	// A2_pandf
    33679387U,	// A2_pandfnew
    33671328U,	// A2_pandt
    33679520U,	// A2_pandtnew
    37865499U,	// A2_porf
    37873691U,	// A2_porfnew
    37865632U,	// A2_port
    37873824U,	// A2_portnew
    42059803U,	// A2_psubf
    42067995U,	// A2_psubfnew
    42059936U,	// A2_psubt
    42068128U,	// A2_psubtnew
    46254107U,	// A2_pxorf
    46262299U,	// A2_pxorfnew
    46254240U,	// A2_pxort
    46262432U,	// A2_pxortnew
    132102U,	// A2_sat
    140294U,	// A2_satb
    148486U,	// A2_sath
    156678U,	// A2_satub
    164870U,	// A2_satuh
    8561670U,	// A2_sub
    545432582U,	// A2_subh_h16_hh
    545432582U,	// A2_subh_h16_hl
    1082303494U,	// A2_subh_h16_lh
    1082303494U,	// A2_subh_h16_ll
    545432582U,	// A2_subh_h16_sat_hh
    545432582U,	// A2_subh_h16_sat_hl
    1082303494U,	// A2_subh_h16_sat_lh
    1082303494U,	// A2_subh_h16_sat_ll
    1082303494U,	// A2_subh_l16_hl
    1082303494U,	// A2_subh_l16_ll
    1082303494U,	// A2_subh_l16_sat_hl
    1082303494U,	// A2_subh_l16_sat_ll
    8561670U,	// A2_subp
    8561670U,	// A2_subsat
    181254U,	// A2_swiz
    189446U,	// A2_sxtb
    197638U,	// A2_sxth
    205830U,	// A2_sxtw
    50545670U,	// A2_tfr
    50545670U,	// A2_tfrcrr
    54642715U,	// A2_tfrf
    54650907U,	// A2_tfrfnew
    222214U,	// A2_tfrih
    230406U,	// A2_tfril
    50545670U,	// A2_tfrp
    54642715U,	// A2_tfrpf
    54650907U,	// A2_tfrpfnew
    2743313414U,	// A2_tfrpi
    54642848U,	// A2_tfrpt
    54651040U,	// A2_tfrptnew
    50545670U,	// A2_tfrrcr
    2709758982U,	// A2_tfrsi
    54642848U,	// A2_tfrt
    54651040U,	// A2_tfrtnew
    8635398U,	// A2_xor
    8635398U,	// A2_xorp
    254982U,	// A2_zxtb
    263174U,	// A2_zxth
    62923782U,	// A4_addp_c
    1677739014U,	// A4_andn
    1677739014U,	// A4_andnp
    1623467014U,	// A4_bitsplit
    3292800006U,	// A4_bitspliti
    279558U,	// A4_boundscheck
    75785222U,	// A4_boundscheck_hi
    79979526U,	// A4_boundscheck_lo
    1623491590U,	// A4_cmpbeq
    3292824582U,	// A4_cmpbeqi
    1623499782U,	// A4_cmpbgt
    3292832774U,	// A4_cmpbgti
    1623507974U,	// A4_cmpbgtu
    3829711878U,	// A4_cmpbgtui
    1623516166U,	// A4_cmpheq
    3829720070U,	// A4_cmpheqi
    1623524358U,	// A4_cmphgt
    3829728262U,	// A4_cmphgti
    1623532550U,	// A4_cmphgtu
    3829736454U,	// A4_cmphgtui
    2206254086U,	// A4_combineii
    25216006U,	// A4_combineir
    3829441542U,	// A4_combineri
    3292873734U,	// A4_cround_ri
    1623540742U,	// A4_cround_rr
    355472U,	// A4_ext
    353424U,	// A4_ext_b
    353424U,	// A4_ext_c
    356496U,	// A4_ext_g
    361478U,	// A4_modwrapu
    1677829126U,	// A4_orn
    1677829126U,	// A4_ornp
    84002843U,	// A4_paslhf
    84011035U,	// A4_paslhfnew
    84002976U,	// A4_paslht
    84011168U,	// A4_paslhtnew
    88197147U,	// A4_pasrhf
    88205339U,	// A4_pasrhfnew
    88197280U,	// A4_pasrht
    88205472U,	// A4_pasrhtnew
    92391451U,	// A4_psxtbf
    92399643U,	// A4_psxtbfnew
    92391584U,	// A4_psxtbt
    92399776U,	// A4_psxtbtnew
    96585755U,	// A4_psxthf
    96593947U,	// A4_psxthfnew
    96585888U,	// A4_psxtht
    96594080U,	// A4_psxthtnew
    100780059U,	// A4_pzxtbf
    100788251U,	// A4_pzxtbfnew
    100780192U,	// A4_pzxtbt
    100788384U,	// A4_pzxtbtnew
    104974363U,	// A4_pzxthf
    104982555U,	// A4_pzxthfnew
    104974496U,	// A4_pzxtht
    104982688U,	// A4_pzxthtnew
    1623565318U,	// A4_rcmpeq
    3829769222U,	// A4_rcmpeqi
    1623573510U,	// A4_rcmpneq
    3829777414U,	// A4_rcmpneqi
    3292914694U,	// A4_round_ri
    3292914694U,	// A4_round_ri_sat
    1623581702U,	// A4_round_rr
    1623581702U,	// A4_round_rr_sat
    63087622U,	// A4_subp_c
    394246U,	// A4_tlbmatch
    2155881478U,	// ADD_ri
    2176960539U,	// ADD_ri_cNotPt
    2176960672U,	// ADD_ri_cPt
    2176968731U,	// ADD_ri_cdnNotPt
    2176968864U,	// ADD_ri_cdnPt
    542U,	// ADJCALLSTACKDOWN
    542U,	// ADJCALLSTACKUP
    2155881478U,	// ADJDYNALLOC
    3829416966U,	// AND_ri
    50545670U,	// ARGEXTEND
    598U,	// BARRIER
    402438U,	// C2_all8
    1623213062U,	// C2_and
    109069318U,	// C2_andn
    410630U,	// C2_any8
    1623614470U,	// C2_bitsclr
    3292947462U,	// C2_bitsclri
    427014U,	// C2_bitsset
    113362971U,	// C2_ccombinewf
    113371163U,	// C2_ccombinewnewf
    113371296U,	// C2_ccombinewnewt
    113363104U,	// C2_ccombinewt
    3875653659U,	// C2_cmoveif
    3875653792U,	// C2_cmoveit
    3875661851U,	// C2_cmovenewif
    3875661984U,	// C2_cmovenewit
    1623565318U,	// C2_cmpeq
    3829769222U,	// C2_cmpeqi
    1623565318U,	// C2_cmpeqp
    1623630854U,	// C2_cmpgt
    3829834758U,	// C2_cmpgti
    1623630854U,	// C2_cmpgtp
    1623639046U,	// C2_cmpgtu
    3829842950U,	// C2_cmpgtui
    1623639046U,	// C2_cmpgtup
    451590U,	// C2_mask
    1623655430U,	// C2_mux
    3829859334U,	// C2_muxii
    1623655430U,	// C2_muxir
    3829859334U,	// C2_muxri
    99334U,	// C2_not
    1623303174U,	// C2_or
    109159430U,	// C2_orn
    50545670U,	// C2_tfrpr
    50545670U,	// C2_tfrrp
    467974U,	// C2_vitpack
    8635398U,	// C2_xor
    476166U,	// C4_addipc
    121652230U,	// C4_and_and
    121652230U,	// C4_and_andn
    125846534U,	// C4_and_or
    125846534U,	// C4_and_orn
    1623680006U,	// C4_cmplte
    3829883910U,	// C4_cmpltei
    1623688198U,	// C4_cmplteu
    3829892102U,	// C4_cmplteui
    1623573510U,	// C4_cmpneq
    3829777414U,	// C4_cmpneqi
    500742U,	// C4_fastcorner9
    508934U,	// C4_fastcorner9_not
    1623712774U,	// C4_nbitsclr
    3293045766U,	// C4_nbitsclri
    525318U,	// C4_nbitsset
    121742342U,	// C4_or_and
    121742342U,	// C4_or_andn
    125936646U,	// C4_or_or
    125936646U,	// C4_or_orn
    533505U,	// CALL
    533517U,	// CALLRv3
    541977U,	// CMPEQn1_f_Jumpnv_nt_V4
    550169U,	// CMPEQn1_f_Jumpnv_t_V4
    541990U,	// CMPEQn1_t_Jumpnv_nt_V4
    550182U,	// CMPEQn1_t_Jumpnv_t_V4
    130581785U,	// CMPEQri_f_Jumpnv_nt_V4
    134776089U,	// CMPEQri_f_Jumpnv_t_V4
    130581798U,	// CMPEQri_t_Jumpnv_nt_V4
    134776102U,	// CMPEQri_t_Jumpnv_t_V4
    130589977U,	// CMPEQrr_f_Jumpnv_nt_V4
    134784281U,	// CMPEQrr_f_Jumpnv_t_V4
    130589990U,	// CMPEQrr_t_Jumpnv_nt_V4
    134784294U,	// CMPEQrr_t_Jumpnv_t_V4
    130581948U,	// CMPGTUri_f_Jumpnv_nt_V4
    134776252U,	// CMPGTUri_f_Jumpnv_t_V4
    130581962U,	// CMPGTUri_t_Jumpnv_nt_V4
    134776266U,	// CMPGTUri_t_Jumpnv_t_V4
    130590140U,	// CMPGTUrr_f_Jumpnv_nt_V4
    134784444U,	// CMPGTUrr_f_Jumpnv_t_V4
    130590154U,	// CMPGTUrr_t_Jumpnv_nt_V4
    134784458U,	// CMPGTUrr_t_Jumpnv_t_V4
    542036U,	// CMPGTn1_f_Jumpnv_nt_V4
    550228U,	// CMPGTn1_f_Jumpnv_t_V4
    542049U,	// CMPGTn1_t_Jumpnv_nt_V4
    550241U,	// CMPGTn1_t_Jumpnv_t_V4
    130581844U,	// CMPGTri_f_Jumpnv_nt_V4
    134776148U,	// CMPGTri_f_Jumpnv_t_V4
    130581857U,	// CMPGTri_t_Jumpnv_nt_V4
    134776161U,	// CMPGTri_t_Jumpnv_t_V4
    130590036U,	// CMPGTrr_f_Jumpnv_nt_V4
    134784340U,	// CMPGTrr_f_Jumpnv_t_V4
    130590049U,	// CMPGTrr_t_Jumpnv_nt_V4
    134784353U,	// CMPGTrr_t_Jumpnv_t_V4
    138986940U,	// CMPLTUrr_f_Jumpnv_nt_V4
    143181244U,	// CMPLTUrr_f_Jumpnv_t_V4
    138986954U,	// CMPLTUrr_t_Jumpnv_nt_V4
    143181258U,	// CMPLTUrr_t_Jumpnv_t_V4
    138986836U,	// CMPLTrr_f_Jumpnv_nt_V4
    143181140U,	// CMPLTrr_f_Jumpnv_t_V4
    138986849U,	// CMPLTrr_t_Jumpnv_nt_V4
    143181153U,	// CMPLTrr_t_Jumpnv_t_V4
    3292824582U,	// CMPbEQri_V4
    1623491590U,	// CMPbEQrr_sbsb_V4
    1623491590U,	// CMPbEQrr_ubub_V4
    3829711878U,	// CMPbGTUri_V4
    1623507974U,	// CMPbGTUrr_V4
    1623499782U,	// CMPbGTrr_V4
    3292849158U,	// CMPhEQri_V4
    1623516166U,	// CMPhEQrr_shl_V4
    1623516166U,	// CMPhEQrr_xor_V4
    3829736454U,	// CMPhGTUri_V4
    1623532550U,	// CMPhGTUrr_V4
    1623524358U,	// CMPhGTrr_shl_V4
    1623573510U,	// CMPnotEQ_rr
    1623688198U,	// CMPnotGTU_rr
    1623680006U,	// CMPnotGT_rr
    147383302U,	// CONST32
    147383302U,	// CONST32GP_set
    545842182U,	// CONST32_Float_Real
    545842182U,	// CONST32_Int_Real
    590854U,	// CONST32_Label
    147383302U,	// CONST32_set
    151577606U,	// CONST32_set_jt
    599046U,	// CONST64_Float_Real
    599046U,	// CONST64_Int_Real
    607238U,	// CONVERT_d2df
    615430U,	// CONVERT_d2sf
    155812870U,	// CONVERT_df2d
    623622U,	// CONVERT_df2d_nchop
    631814U,	// CONVERT_df2sf
    155829254U,	// CONVERT_df2ud
    640006U,	// CONVERT_df2ud_nchop
    155837446U,	// CONVERT_df2uw
    648198U,	// CONVERT_df2uw_nchop
    155845638U,	// CONVERT_df2w
    656390U,	// CONVERT_df2w_nchop
    155853830U,	// CONVERT_sf2d
    664582U,	// CONVERT_sf2d_nchop
    672774U,	// CONVERT_sf2df
    155870214U,	// CONVERT_sf2ud
    680966U,	// CONVERT_sf2ud_nchop
    155878406U,	// CONVERT_sf2uw
    689158U,	// CONVERT_sf2uw_nchop
    155886598U,	// CONVERT_sf2w
    697350U,	// CONVERT_sf2w_nchop
    705542U,	// CONVERT_ud2df
    713734U,	// CONVERT_ud2sf
    721926U,	// CONVERT_uw2df
    730118U,	// CONVERT_uw2sf
    738310U,	// CONVERT_w2df
    746502U,	// CONVERT_w2sf
    754694U,	// CTLZ64_rr
    762886U,	// CTTZ64_rr
    533524U,	// EH_RETURN_JMPR
    477U,	// ENDLOOP0
    487U,	// ENDLOOP1
    607238U,	// F2_conv_d2df
    615430U,	// F2_conv_d2sf
    623622U,	// F2_conv_df2d
    155812870U,	// F2_conv_df2d_chop
    631814U,	// F2_conv_df2sf
    640006U,	// F2_conv_df2ud
    155829254U,	// F2_conv_df2ud_chop
    648198U,	// F2_conv_df2uw
    155837446U,	// F2_conv_df2uw_chop
    656390U,	// F2_conv_df2w
    155845638U,	// F2_conv_df2w_chop
    664582U,	// F2_conv_sf2d
    155853830U,	// F2_conv_sf2d_chop
    672774U,	// F2_conv_sf2df
    680966U,	// F2_conv_sf2ud
    155870214U,	// F2_conv_sf2ud_chop
    689158U,	// F2_conv_sf2uw
    155878406U,	// F2_conv_sf2uw_chop
    697350U,	// F2_conv_sf2w
    155886598U,	// F2_conv_sf2w_chop
    705542U,	// F2_conv_ud2df
    713734U,	// F2_conv_ud2sf
    721926U,	// F2_conv_uw2df
    730118U,	// F2_conv_uw2sf
    738310U,	// F2_conv_w2df
    746502U,	// F2_conv_w2sf
    771078U,	// F2_dfclass
    779270U,	// F2_dfcmpeq
    787462U,	// F2_dfcmpge
    795654U,	// F2_dfcmpgt
    803846U,	// F2_dfcmpuo
    160195590U,	// F2_dfimm_n
    164389894U,	// F2_dfimm_p
    820230U,	// F2_sfadd
    828422U,	// F2_sfclass
    836614U,	// F2_sfcmpeq
    844806U,	// F2_sfcmpge
    852998U,	// F2_sfcmpgt
    861190U,	// F2_sfcmpuo
    869382U,	// F2_sffixupd
    877574U,	// F2_sffixupn
    885766U,	// F2_sffixupr
    63808518U,	// F2_sffma
    63808518U,	// F2_sffma_lib
    63808518U,	// F2_sffma_sc
    63816710U,	// F2_sffms
    63816710U,	// F2_sffms_lib
    160293894U,	// F2_sfimm_n
    164488198U,	// F2_sfimm_p
    918534U,	// F2_sfmax
    926726U,	// F2_sfmin
    934918U,	// F2_sfmpy
    168346630U,	// F2_sfrecipa
    943110U,	// F2_sfsub
    836614U,	// FCMPOEQ32_rr
    779270U,	// FCMPOEQ64_rr
    844806U,	// FCMPOGE32_rr
    787462U,	// FCMPOGE64_rr
    852998U,	// FCMPOGT32_rr
    795654U,	// FCMPOGT64_rr
    836614U,	// FCMPUEQ32_rr
    779270U,	// FCMPUEQ64_rr
    844806U,	// FCMPUGE32_rr
    787462U,	// FCMPUGE64_rr
    852998U,	// FCMPUGT32_rr
    795654U,	// FCMPUGT64_rr
    147383302U,	// FCONST32_nsdata
    63808518U,	// FMADD_sp
    918534U,	// FMAX_sp
    926726U,	// FMIN_sp
    1030U,	// HEXAGON_A2_abs
    1030U,	// HEXAGON_A2_absp
    4195334U,	// HEXAGON_A2_abssat
    8397830U,	// HEXAGON_A2_add
    1082139654U,	// HEXAGON_A2_addh_h16_hh
    1082139654U,	// HEXAGON_A2_addh_h16_hl
    1619010566U,	// HEXAGON_A2_addh_h16_lh
    1619010566U,	// HEXAGON_A2_addh_h16_ll
    1082139654U,	// HEXAGON_A2_addh_h16_sat_hh
    1082139654U,	// HEXAGON_A2_addh_h16_sat_hl
    1619010566U,	// HEXAGON_A2_addh_h16_sat_lh
    1619010566U,	// HEXAGON_A2_addh_h16_sat_ll
    1619010566U,	// HEXAGON_A2_addh_l16_hl
    1619010566U,	// HEXAGON_A2_addh_l16_ll
    1619010566U,	// HEXAGON_A2_addh_l16_sat_hl
    1619010566U,	// HEXAGON_A2_addh_l16_sat_ll
    2155881478U,	// HEXAGON_A2_addi
    8397830U,	// HEXAGON_A2_addp
    8397830U,	// HEXAGON_A2_addsat
    1623213062U,	// HEXAGON_A2_and
    3292546054U,	// HEXAGON_A2_andir
    1623213062U,	// HEXAGON_A2_andp
    25606U,	// HEXAGON_A2_aslh
    33798U,	// HEXAGON_A2_asrh
    1782621190U,	// HEXAGON_A2_combine_hh
    1782621190U,	// HEXAGON_A2_combine_hl
    1786815494U,	// HEXAGON_A2_combine_lh
    1786815494U,	// HEXAGON_A2_combine_ll
    2206254086U,	// HEXAGON_A2_combineii
    1623237638U,	// HEXAGON_A2_combinew
    58374U,	// HEXAGON_A2_max
    66566U,	// HEXAGON_A2_maxu
    74758U,	// HEXAGON_A2_min
    82950U,	// HEXAGON_A2_minu
    91142U,	// HEXAGON_A2_neg
    91142U,	// HEXAGON_A2_negp
    4285446U,	// HEXAGON_A2_negsat
    99334U,	// HEXAGON_A2_not
    99334U,	// HEXAGON_A2_notp
    1623303174U,	// HEXAGON_A2_or
    3292636166U,	// HEXAGON_A2_orir
    1623303174U,	// HEXAGON_A2_orp
    132102U,	// HEXAGON_A2_sat
    140294U,	// HEXAGON_A2_satb
    148486U,	// HEXAGON_A2_sath
    156678U,	// HEXAGON_A2_satub
    164870U,	// HEXAGON_A2_satuh
    8561670U,	// HEXAGON_A2_sub
    1082303494U,	// HEXAGON_A2_subh_h16_hh
    1082303494U,	// HEXAGON_A2_subh_h16_hl
    1619174406U,	// HEXAGON_A2_subh_h16_lh
    1619174406U,	// HEXAGON_A2_subh_h16_ll
    1082303494U,	// HEXAGON_A2_subh_h16_sat_hh
    1082303494U,	// HEXAGON_A2_subh_h16_sat_hl
    1619174406U,	// HEXAGON_A2_subh_h16_sat_lh
    1619174406U,	// HEXAGON_A2_subh_h16_sat_ll
    1619174406U,	// HEXAGON_A2_subh_l16_hl
    1619174406U,	// HEXAGON_A2_subh_l16_ll
    1619174406U,	// HEXAGON_A2_subh_l16_sat_hl
    1619174406U,	// HEXAGON_A2_subh_l16_sat_ll
    8561670U,	// HEXAGON_A2_subp
    59671558U,	// HEXAGON_A2_subri
    8561670U,	// HEXAGON_A2_subsat
    959494U,	// HEXAGON_A2_svaddh
    5153798U,	// HEXAGON_A2_svaddhs
    967686U,	// HEXAGON_A2_svadduhs
    975878U,	// HEXAGON_A2_svavgh
    181330950U,	// HEXAGON_A2_svavghs
    984070U,	// HEXAGON_A2_svnavgh
    992262U,	// HEXAGON_A2_svsubh
    5186566U,	// HEXAGON_A2_svsubhs
    1000454U,	// HEXAGON_A2_svsubuhs
    181254U,	// HEXAGON_A2_swiz
    189446U,	// HEXAGON_A2_sxtb
    197638U,	// HEXAGON_A2_sxth
    205830U,	// HEXAGON_A2_sxtw
    50545670U,	// HEXAGON_A2_tfr
    222214U,	// HEXAGON_A2_tfrih
    230406U,	// HEXAGON_A2_tfril
    50545670U,	// HEXAGON_A2_tfrp
    2743313414U,	// HEXAGON_A2_tfrpi
    2743313414U,	// HEXAGON_A2_tfrsi
    1008646U,	// HEXAGON_A2_vabsh
    5202950U,	// HEXAGON_A2_vabshsat
    1016838U,	// HEXAGON_A2_vabsw
    5211142U,	// HEXAGON_A2_vabswsat
    959494U,	// HEXAGON_A2_vaddh
    5153798U,	// HEXAGON_A2_vaddhs
    1025030U,	// HEXAGON_A2_vaddub
    5219334U,	// HEXAGON_A2_vaddubs
    967686U,	// HEXAGON_A2_vadduhs
    1033222U,	// HEXAGON_A2_vaddw
    5227526U,	// HEXAGON_A2_vaddws
    975878U,	// HEXAGON_A2_vavgh
    185525254U,	// HEXAGON_A2_vavghcr
    181330950U,	// HEXAGON_A2_vavghr
    1041414U,	// HEXAGON_A2_vavgub
    181396486U,	// HEXAGON_A2_vavgubr
    1049606U,	// HEXAGON_A2_vavguh
    181404678U,	// HEXAGON_A2_vavguhr
    1057798U,	// HEXAGON_A2_vavguw
    181412870U,	// HEXAGON_A2_vavguwr
    1065990U,	// HEXAGON_A2_vavgw
    185615366U,	// HEXAGON_A2_vavgwcr
    181421062U,	// HEXAGON_A2_vavgwr
    1074182U,	// HEXAGON_A2_vcmpbeq
    1082374U,	// HEXAGON_A2_vcmpbgtu
    1090566U,	// HEXAGON_A2_vcmpheq
    1098758U,	// HEXAGON_A2_vcmphgt
    1106950U,	// HEXAGON_A2_vcmphgtu
    1115142U,	// HEXAGON_A2_vcmpweq
    1123334U,	// HEXAGON_A2_vcmpwgt
    1131526U,	// HEXAGON_A2_vcmpwgtu
    1139718U,	// HEXAGON_A2_vconj
    1147910U,	// HEXAGON_A2_vmaxh
    1156102U,	// HEXAGON_A2_vmaxub
    1164294U,	// HEXAGON_A2_vmaxuh
    1172486U,	// HEXAGON_A2_vmaxuw
    1180678U,	// HEXAGON_A2_vmaxw
    1188870U,	// HEXAGON_A2_vminh
    1197062U,	// HEXAGON_A2_vminub
    1205254U,	// HEXAGON_A2_vminuh
    1213446U,	// HEXAGON_A2_vminuw
    1221638U,	// HEXAGON_A2_vminw
    984070U,	// HEXAGON_A2_vnavgh
    189727750U,	// HEXAGON_A2_vnavghcr
    193922054U,	// HEXAGON_A2_vnavghr
    1229830U,	// HEXAGON_A2_vnavgw
    189973510U,	// HEXAGON_A2_vnavgwcr
    194167814U,	// HEXAGON_A2_vnavgwr
    1238022U,	// HEXAGON_A2_vraddub
    1246214U,	// HEXAGON_A2_vraddub_acc
    1254406U,	// HEXAGON_A2_vrsadub
    1262598U,	// HEXAGON_A2_vrsadub_acc
    992262U,	// HEXAGON_A2_vsubh
    5186566U,	// HEXAGON_A2_vsubhs
    1270790U,	// HEXAGON_A2_vsubub
    5465094U,	// HEXAGON_A2_vsububs
    1000454U,	// HEXAGON_A2_vsubuhs
    1278982U,	// HEXAGON_A2_vsubw
    5473286U,	// HEXAGON_A2_vsubws
    8635398U,	// HEXAGON_A2_xor
    8635398U,	// HEXAGON_A2_xorp
    254982U,	// HEXAGON_A2_zxtb
    263174U,	// HEXAGON_A2_zxth
    3292873734U,	// HEXAGON_A4_cround_ri
    1623540742U,	// HEXAGON_A4_cround_rr
    361478U,	// HEXAGON_A4_modwrapu
    3292914694U,	// HEXAGON_A4_round_ri
    3292914694U,	// HEXAGON_A4_round_ri_sat
    1623581702U,	// HEXAGON_A4_round_rr
    1623581702U,	// HEXAGON_A4_round_rr_sat
    1287174U,	// HEXAGON_A5_vaddhubs
    402438U,	// HEXAGON_C2_all8
    1623213062U,	// HEXAGON_C2_and
    109069318U,	// HEXAGON_C2_andn
    410630U,	// HEXAGON_C2_any8
    1623565318U,	// HEXAGON_C2_cmpeq
    3292898310U,	// HEXAGON_C2_cmpeqi
    1623565318U,	// HEXAGON_C2_cmpeqp
    1295366U,	// HEXAGON_C2_cmpgei
    1303558U,	// HEXAGON_C2_cmpgeui
    1623630854U,	// HEXAGON_C2_cmpgt
    3292963846U,	// HEXAGON_C2_cmpgti
    1623630854U,	// HEXAGON_C2_cmpgtp
    1623639046U,	// HEXAGON_C2_cmpgtu
    3292972038U,	// HEXAGON_C2_cmpgtui
    1623639046U,	// HEXAGON_C2_cmpgtup
    1311750U,	// HEXAGON_C2_cmplt
    1319942U,	// HEXAGON_C2_cmpltu
    451590U,	// HEXAGON_C2_mask
    1623655430U,	// HEXAGON_C2_mux
    3292988422U,	// HEXAGON_C2_muxii
    1623655430U,	// HEXAGON_C2_muxir
    3292988422U,	// HEXAGON_C2_muxri
    99334U,	// HEXAGON_C2_not
    1623303174U,	// HEXAGON_C2_or
    109159430U,	// HEXAGON_C2_orn
    50545670U,	// HEXAGON_C2_pxfer_map
    50545670U,	// HEXAGON_C2_tfrpr
    50545670U,	// HEXAGON_C2_tfrrp
    467974U,	// HEXAGON_C2_vitpack
    1328134U,	// HEXAGON_C2_vmux
    8635398U,	// HEXAGON_C2_xor
    500742U,	// HEXAGON_C4_fastcorner9
    508934U,	// HEXAGON_C4_fastcorner9_not
    607238U,	// HEXAGON_F2_conv_d2df
    615430U,	// HEXAGON_F2_conv_d2sf
    623622U,	// HEXAGON_F2_conv_df2d
    623622U,	// HEXAGON_F2_conv_df2d_chop
    631814U,	// HEXAGON_F2_conv_df2sf
    640006U,	// HEXAGON_F2_conv_df2ud
    640006U,	// HEXAGON_F2_conv_df2ud_chop
    648198U,	// HEXAGON_F2_conv_df2uw
    648198U,	// HEXAGON_F2_conv_df2uw_chop
    656390U,	// HEXAGON_F2_conv_df2w
    656390U,	// HEXAGON_F2_conv_df2w_chop
    664582U,	// HEXAGON_F2_conv_sf2d
    664582U,	// HEXAGON_F2_conv_sf2d_chop
    672774U,	// HEXAGON_F2_conv_sf2df
    680966U,	// HEXAGON_F2_conv_sf2ud
    680966U,	// HEXAGON_F2_conv_sf2ud_chop
    689158U,	// HEXAGON_F2_conv_sf2uw
    689158U,	// HEXAGON_F2_conv_sf2uw_chop
    697350U,	// HEXAGON_F2_conv_sf2w
    697350U,	// HEXAGON_F2_conv_sf2w_chop
    705542U,	// HEXAGON_F2_conv_ud2df
    713734U,	// HEXAGON_F2_conv_ud2sf
    721926U,	// HEXAGON_F2_conv_uw2df
    730118U,	// HEXAGON_F2_conv_uw2sf
    738310U,	// HEXAGON_F2_conv_w2df
    746502U,	// HEXAGON_F2_conv_w2sf
    1336326U,	// HEXAGON_F2_dfadd
    771078U,	// HEXAGON_F2_dfclass
    779270U,	// HEXAGON_F2_dfcmpeq
    787462U,	// HEXAGON_F2_dfcmpge
    795654U,	// HEXAGON_F2_dfcmpgt
    803846U,	// HEXAGON_F2_dfcmpuo
    1344518U,	// HEXAGON_F2_dffixupd
    1352710U,	// HEXAGON_F2_dffixupn
    1360902U,	// HEXAGON_F2_dffixupr
    9757702U,	// HEXAGON_F2_dffma
    9757702U,	// HEXAGON_F2_dffma_lib
    64283654U,	// HEXAGON_F2_dffma_sc
    1377286U,	// HEXAGON_F2_dffms
    198509574U,	// HEXAGON_F2_dffms_lib
    160769030U,	// HEXAGON_F2_dfimm_n
    164963334U,	// HEXAGON_F2_dfimm_p
    1393670U,	// HEXAGON_F2_dfmax
    1401862U,	// HEXAGON_F2_dfmin
    1410054U,	// HEXAGON_F2_dfmpy
    1418246U,	// HEXAGON_F2_dfsub
    820230U,	// HEXAGON_F2_sfadd
    828422U,	// HEXAGON_F2_sfclass
    836614U,	// HEXAGON_F2_sfcmpeq
    844806U,	// HEXAGON_F2_sfcmpge
    852998U,	// HEXAGON_F2_sfcmpgt
    861190U,	// HEXAGON_F2_sfcmpuo
    869382U,	// HEXAGON_F2_sffixupd
    877574U,	// HEXAGON_F2_sffixupn
    885766U,	// HEXAGON_F2_sffixupr
    9282566U,	// HEXAGON_F2_sffma
    9282566U,	// HEXAGON_F2_sffma_lib
    63808518U,	// HEXAGON_F2_sffma_sc
    9290758U,	// HEXAGON_F2_sffms
    9290758U,	// HEXAGON_F2_sffms_lib
    160809990U,	// HEXAGON_F2_sfimm_n
    165004294U,	// HEXAGON_F2_sfimm_p
    918534U,	// HEXAGON_F2_sfmax
    926726U,	// HEXAGON_F2_sfmin
    934918U,	// HEXAGON_F2_sfmpy
    943110U,	// HEXAGON_F2_sfsub
    2161501190U,	// HEXAGON_M2_acci
    2757092358U,	// HEXAGON_M2_accii
    1442822U,	// HEXAGON_M2_cmaci_s0
    1451014U,	// HEXAGON_M2_cmacr_s0
    5653510U,	// HEXAGON_M2_cmacs_s0
    202785798U,	// HEXAGON_M2_cmacs_s1
    206980102U,	// HEXAGON_M2_cmacsc_s0
    211174406U,	// HEXAGON_M2_cmacsc_s1
    1467398U,	// HEXAGON_M2_cmpyi_s0
    1475590U,	// HEXAGON_M2_cmpyr_s0
    194421766U,	// HEXAGON_M2_cmpyrs_s0
    215393286U,	// HEXAGON_M2_cmpyrs_s1
    219587590U,	// HEXAGON_M2_cmpyrsc_s0
    223781894U,	// HEXAGON_M2_cmpyrsc_s1
    5678086U,	// HEXAGON_M2_cmpys_s0
    202810374U,	// HEXAGON_M2_cmpys_s1
    207004678U,	// HEXAGON_M2_cmpysc_s0
    211198982U,	// HEXAGON_M2_cmpysc_s1
    5686278U,	// HEXAGON_M2_cnacs_s0
    202818566U,	// HEXAGON_M2_cnacs_s1
    207012870U,	// HEXAGON_M2_cnacsc_s0
    211207174U,	// HEXAGON_M2_cnacsc_s1
    2161566726U,	// HEXAGON_M2_dpmpyss_acc_s0
    2161574918U,	// HEXAGON_M2_dpmpyss_nac_s0
    1624712198U,	// HEXAGON_M2_dpmpyss_rnd_s0
    1624712198U,	// HEXAGON_M2_dpmpyss_s0
    2161591302U,	// HEXAGON_M2_dpmpyuu_acc_s0
    2161599494U,	// HEXAGON_M2_dpmpyuu_nac_s0
    1624736774U,	// HEXAGON_M2_dpmpyuu_s0
    1624712198U,	// HEXAGON_M2_hmmpyh_rs1
    1624712198U,	// HEXAGON_M2_hmmpyl_rs1
    2161615878U,	// HEXAGON_M2_maci
    228049926U,	// HEXAGON_M2_macsin
    2757207046U,	// HEXAGON_M2_macsip
    194503686U,	// HEXAGON_M2_mmachs_rs0
    215475206U,	// HEXAGON_M2_mmachs_rs1
    5760006U,	// HEXAGON_M2_mmachs_s0
    202892294U,	// HEXAGON_M2_mmachs_s1
    194511878U,	// HEXAGON_M2_mmacls_rs0
    215483398U,	// HEXAGON_M2_mmacls_rs1
    5768198U,	// HEXAGON_M2_mmacls_s0
    202900486U,	// HEXAGON_M2_mmacls_s1
    194520070U,	// HEXAGON_M2_mmacuhs_rs0
    215491590U,	// HEXAGON_M2_mmacuhs_rs1
    5776390U,	// HEXAGON_M2_mmacuhs_s0
    202908678U,	// HEXAGON_M2_mmacuhs_s1
    194528262U,	// HEXAGON_M2_mmaculs_rs0
    215499782U,	// HEXAGON_M2_mmaculs_rs1
    5784582U,	// HEXAGON_M2_mmaculs_s0
    202916870U,	// HEXAGON_M2_mmaculs_s1
    194536454U,	// HEXAGON_M2_mmpyh_rs0
    215507974U,	// HEXAGON_M2_mmpyh_rs1
    5792774U,	// HEXAGON_M2_mmpyh_s0
    202925062U,	// HEXAGON_M2_mmpyh_s1
    194544646U,	// HEXAGON_M2_mmpyl_rs0
    215516166U,	// HEXAGON_M2_mmpyl_rs1
    5800966U,	// HEXAGON_M2_mmpyl_s0
    202933254U,	// HEXAGON_M2_mmpyl_s1
    194552838U,	// HEXAGON_M2_mmpyuh_rs0
    215524358U,	// HEXAGON_M2_mmpyuh_rs1
    5809158U,	// HEXAGON_M2_mmpyuh_s0
    202941446U,	// HEXAGON_M2_mmpyuh_s1
    194561030U,	// HEXAGON_M2_mmpyul_rs0
    215532550U,	// HEXAGON_M2_mmpyul_rs1
    5817350U,	// HEXAGON_M2_mmpyul_s0
    202949638U,	// HEXAGON_M2_mmpyul_s1
    2320950278U,	// HEXAGON_M2_mpy_acc_hh_s0
    2320950278U,	// HEXAGON_M2_mpy_acc_hh_s1
    2320950278U,	// HEXAGON_M2_mpy_acc_hl_s0
    2320950278U,	// HEXAGON_M2_mpy_acc_hl_s1
    2325144582U,	// HEXAGON_M2_mpy_acc_lh_s0
    2325144582U,	// HEXAGON_M2_mpy_acc_lh_s1
    2325144582U,	// HEXAGON_M2_mpy_acc_ll_s0
    2325144582U,	// HEXAGON_M2_mpy_acc_ll_s1
    2320950278U,	// HEXAGON_M2_mpy_acc_sat_hh_s0
    2320950278U,	// HEXAGON_M2_mpy_acc_sat_hh_s1
    2320950278U,	// HEXAGON_M2_mpy_acc_sat_hl_s0
    2320950278U,	// HEXAGON_M2_mpy_acc_sat_hl_s1
    2325144582U,	// HEXAGON_M2_mpy_acc_sat_lh_s0
    2325144582U,	// HEXAGON_M2_mpy_acc_sat_lh_s1
    2325144582U,	// HEXAGON_M2_mpy_acc_sat_ll_s0
    2325144582U,	// HEXAGON_M2_mpy_acc_sat_ll_s1
    1784095750U,	// HEXAGON_M2_mpy_hh_s0
    1784095750U,	// HEXAGON_M2_mpy_hh_s1
    1784095750U,	// HEXAGON_M2_mpy_hl_s0
    1784095750U,	// HEXAGON_M2_mpy_hl_s1
    1788290054U,	// HEXAGON_M2_mpy_lh_s0
    1788290054U,	// HEXAGON_M2_mpy_lh_s1
    1788290054U,	// HEXAGON_M2_mpy_ll_s0
    1788290054U,	// HEXAGON_M2_mpy_ll_s1
    2320958470U,	// HEXAGON_M2_mpy_nac_hh_s0
    2320958470U,	// HEXAGON_M2_mpy_nac_hh_s1
    2320958470U,	// HEXAGON_M2_mpy_nac_hl_s0
    2320958470U,	// HEXAGON_M2_mpy_nac_hl_s1
    2325152774U,	// HEXAGON_M2_mpy_nac_lh_s0
    2325152774U,	// HEXAGON_M2_mpy_nac_lh_s1
    2325152774U,	// HEXAGON_M2_mpy_nac_ll_s0
    2325152774U,	// HEXAGON_M2_mpy_nac_ll_s1
    2320958470U,	// HEXAGON_M2_mpy_nac_sat_hh_s0
    2320958470U,	// HEXAGON_M2_mpy_nac_sat_hh_s1
    2320958470U,	// HEXAGON_M2_mpy_nac_sat_hl_s0
    2320958470U,	// HEXAGON_M2_mpy_nac_sat_hl_s1
    2325152774U,	// HEXAGON_M2_mpy_nac_sat_lh_s0
    2325152774U,	// HEXAGON_M2_mpy_nac_sat_lh_s1
    2325152774U,	// HEXAGON_M2_mpy_nac_sat_ll_s0
    2325152774U,	// HEXAGON_M2_mpy_nac_sat_ll_s1
    1784095750U,	// HEXAGON_M2_mpy_rnd_hh_s0
    1784095750U,	// HEXAGON_M2_mpy_rnd_hh_s1
    1784095750U,	// HEXAGON_M2_mpy_rnd_hl_s0
    1784095750U,	// HEXAGON_M2_mpy_rnd_hl_s1
    1788290054U,	// HEXAGON_M2_mpy_rnd_lh_s0
    1788290054U,	// HEXAGON_M2_mpy_rnd_lh_s1
    1788290054U,	// HEXAGON_M2_mpy_rnd_ll_s0
    1788290054U,	// HEXAGON_M2_mpy_rnd_ll_s1
    1784095750U,	// HEXAGON_M2_mpy_sat_hh_s0
    1784095750U,	// HEXAGON_M2_mpy_sat_hh_s1
    1784095750U,	// HEXAGON_M2_mpy_sat_hl_s0
    1784095750U,	// HEXAGON_M2_mpy_sat_hl_s1
    1788290054U,	// HEXAGON_M2_mpy_sat_lh_s0
    1788290054U,	// HEXAGON_M2_mpy_sat_lh_s1
    1788290054U,	// HEXAGON_M2_mpy_sat_ll_s0
    1788290054U,	// HEXAGON_M2_mpy_sat_ll_s1
    1784095750U,	// HEXAGON_M2_mpy_sat_rnd_hh_s0
    1784095750U,	// HEXAGON_M2_mpy_sat_rnd_hh_s1
    1784095750U,	// HEXAGON_M2_mpy_sat_rnd_hl_s0
    1784095750U,	// HEXAGON_M2_mpy_sat_rnd_hl_s1
    1788290054U,	// HEXAGON_M2_mpy_sat_rnd_lh_s0
    1788290054U,	// HEXAGON_M2_mpy_sat_rnd_lh_s1
    1788290054U,	// HEXAGON_M2_mpy_sat_rnd_ll_s0
    1788290054U,	// HEXAGON_M2_mpy_sat_rnd_ll_s1
    1624712198U,	// HEXAGON_M2_mpy_up
    2320950278U,	// HEXAGON_M2_mpyd_acc_hh_s0
    2320950278U,	// HEXAGON_M2_mpyd_acc_hh_s1
    2320950278U,	// HEXAGON_M2_mpyd_acc_hl_s0
    2320950278U,	// HEXAGON_M2_mpyd_acc_hl_s1
    2325144582U,	// HEXAGON_M2_mpyd_acc_lh_s0
    2325144582U,	// HEXAGON_M2_mpyd_acc_lh_s1
    2325144582U,	// HEXAGON_M2_mpyd_acc_ll_s0
    2325144582U,	// HEXAGON_M2_mpyd_acc_ll_s1
    1784095750U,	// HEXAGON_M2_mpyd_hh_s0
    1784095750U,	// HEXAGON_M2_mpyd_hh_s1
    1784095750U,	// HEXAGON_M2_mpyd_hl_s0
    1784095750U,	// HEXAGON_M2_mpyd_hl_s1
    1788290054U,	// HEXAGON_M2_mpyd_lh_s0
    1788290054U,	// HEXAGON_M2_mpyd_lh_s1
    1788290054U,	// HEXAGON_M2_mpyd_ll_s0
    1788290054U,	// HEXAGON_M2_mpyd_ll_s1
    2320958470U,	// HEXAGON_M2_mpyd_nac_hh_s0
    2320958470U,	// HEXAGON_M2_mpyd_nac_hh_s1
    2320958470U,	// HEXAGON_M2_mpyd_nac_hl_s0
    2320958470U,	// HEXAGON_M2_mpyd_nac_hl_s1
    2325152774U,	// HEXAGON_M2_mpyd_nac_lh_s0
    2325152774U,	// HEXAGON_M2_mpyd_nac_lh_s1
    2325152774U,	// HEXAGON_M2_mpyd_nac_ll_s0
    2325152774U,	// HEXAGON_M2_mpyd_nac_ll_s1
    1784095750U,	// HEXAGON_M2_mpyd_rnd_hh_s0
    1784095750U,	// HEXAGON_M2_mpyd_rnd_hh_s1
    1784095750U,	// HEXAGON_M2_mpyd_rnd_hl_s0
    1784095750U,	// HEXAGON_M2_mpyd_rnd_hl_s1
    1788290054U,	// HEXAGON_M2_mpyd_rnd_lh_s0
    1788290054U,	// HEXAGON_M2_mpyd_rnd_lh_s1
    1788290054U,	// HEXAGON_M2_mpyd_rnd_ll_s0
    1788290054U,	// HEXAGON_M2_mpyd_rnd_ll_s1
    1624826886U,	// HEXAGON_M2_mpyi
    2320974854U,	// HEXAGON_M2_mpyu_acc_hh_s0
    2320974854U,	// HEXAGON_M2_mpyu_acc_hh_s1
    2320974854U,	// HEXAGON_M2_mpyu_acc_hl_s0
    2320974854U,	// HEXAGON_M2_mpyu_acc_hl_s1
    2325169158U,	// HEXAGON_M2_mpyu_acc_lh_s0
    2325169158U,	// HEXAGON_M2_mpyu_acc_lh_s1
    2325169158U,	// HEXAGON_M2_mpyu_acc_ll_s0
    2325169158U,	// HEXAGON_M2_mpyu_acc_ll_s1
    1784120326U,	// HEXAGON_M2_mpyu_hh_s0
    1784120326U,	// HEXAGON_M2_mpyu_hh_s1
    1784120326U,	// HEXAGON_M2_mpyu_hl_s0
    1784120326U,	// HEXAGON_M2_mpyu_hl_s1
    1788314630U,	// HEXAGON_M2_mpyu_lh_s0
    1788314630U,	// HEXAGON_M2_mpyu_lh_s1
    1788314630U,	// HEXAGON_M2_mpyu_ll_s0
    1788314630U,	// HEXAGON_M2_mpyu_ll_s1
    2320983046U,	// HEXAGON_M2_mpyu_nac_hh_s0
    2320983046U,	// HEXAGON_M2_mpyu_nac_hh_s1
    2320983046U,	// HEXAGON_M2_mpyu_nac_hl_s0
    2320983046U,	// HEXAGON_M2_mpyu_nac_hl_s1
    2325177350U,	// HEXAGON_M2_mpyu_nac_lh_s0
    2325177350U,	// HEXAGON_M2_mpyu_nac_lh_s1
    2325177350U,	// HEXAGON_M2_mpyu_nac_ll_s0
    2325177350U,	// HEXAGON_M2_mpyu_nac_ll_s1
    1624736774U,	// HEXAGON_M2_mpyu_up
    2320974854U,	// HEXAGON_M2_mpyud_acc_hh_s0
    2320974854U,	// HEXAGON_M2_mpyud_acc_hh_s1
    2320974854U,	// HEXAGON_M2_mpyud_acc_hl_s0
    2320974854U,	// HEXAGON_M2_mpyud_acc_hl_s1
    2325169158U,	// HEXAGON_M2_mpyud_acc_lh_s0
    2325169158U,	// HEXAGON_M2_mpyud_acc_lh_s1
    2325169158U,	// HEXAGON_M2_mpyud_acc_ll_s0
    2325169158U,	// HEXAGON_M2_mpyud_acc_ll_s1
    1784120326U,	// HEXAGON_M2_mpyud_hh_s0
    1784120326U,	// HEXAGON_M2_mpyud_hh_s1
    1784120326U,	// HEXAGON_M2_mpyud_hl_s0
    1784120326U,	// HEXAGON_M2_mpyud_hl_s1
    1788314630U,	// HEXAGON_M2_mpyud_lh_s0
    1788314630U,	// HEXAGON_M2_mpyud_lh_s1
    1788314630U,	// HEXAGON_M2_mpyud_ll_s0
    1788314630U,	// HEXAGON_M2_mpyud_ll_s1
    2320983046U,	// HEXAGON_M2_mpyud_nac_hh_s0
    2320983046U,	// HEXAGON_M2_mpyud_nac_hh_s1
    2320983046U,	// HEXAGON_M2_mpyud_nac_hl_s0
    2320983046U,	// HEXAGON_M2_mpyud_nac_hl_s1
    2325177350U,	// HEXAGON_M2_mpyud_nac_lh_s0
    2325177350U,	// HEXAGON_M2_mpyud_nac_lh_s1
    2325177350U,	// HEXAGON_M2_mpyud_nac_ll_s0
    2325177350U,	// HEXAGON_M2_mpyud_nac_ll_s1
    1639430U,	// HEXAGON_M2_mpyui
    2161714182U,	// HEXAGON_M2_nacci
    2757305350U,	// HEXAGON_M2_naccii
    1655814U,	// HEXAGON_M2_subacc
    1664006U,	// HEXAGON_M2_vabsdiffh
    1672198U,	// HEXAGON_M2_vabsdiffw
    1680390U,	// HEXAGON_M2_vcmac_s0_sat_i
    1688582U,	// HEXAGON_M2_vcmac_s0_sat_r
    5891078U,	// HEXAGON_M2_vcmpy_s0_sat_i
    5899270U,	// HEXAGON_M2_vcmpy_s0_sat_r
    203023366U,	// HEXAGON_M2_vcmpy_s1_sat_i
    203031558U,	// HEXAGON_M2_vcmpy_s1_sat_r
    5907462U,	// HEXAGON_M2_vdmacs_s0
    203039750U,	// HEXAGON_M2_vdmacs_s1
    194659334U,	// HEXAGON_M2_vdmpyrs_s0
    215630854U,	// HEXAGON_M2_vdmpyrs_s1
    5915654U,	// HEXAGON_M2_vdmpys_s0
    203047942U,	// HEXAGON_M2_vdmpys_s1
    1729542U,	// HEXAGON_M2_vmac2
    1737734U,	// HEXAGON_M2_vmac2es
    5932038U,	// HEXAGON_M2_vmac2es_s0
    203064326U,	// HEXAGON_M2_vmac2es_s1
    5923846U,	// HEXAGON_M2_vmac2s_s0
    203056134U,	// HEXAGON_M2_vmac2s_s1
    5940230U,	// HEXAGON_M2_vmpy2es_s0
    203072518U,	// HEXAGON_M2_vmpy2es_s1
    5948422U,	// HEXAGON_M2_vmpy2s_s0
    194692102U,	// HEXAGON_M2_vmpy2s_s0pack
    203080710U,	// HEXAGON_M2_vmpy2s_s1
    215663622U,	// HEXAGON_M2_vmpy2s_s1pack
    1762310U,	// HEXAGON_M2_vrcmaci_s0
    232449030U,	// HEXAGON_M2_vrcmaci_s0c
    1770502U,	// HEXAGON_M2_vrcmacr_s0
    232457222U,	// HEXAGON_M2_vrcmacr_s0c
    1778694U,	// HEXAGON_M2_vrcmpyi_s0
    232465414U,	// HEXAGON_M2_vrcmpyi_s0c
    1786886U,	// HEXAGON_M2_vrcmpyr_s0
    232473606U,	// HEXAGON_M2_vrcmpyr_s0c
    1795078U,	// HEXAGON_M2_vrmac_s0
    1803270U,	// HEXAGON_M2_vrmpy_s0
    1811462U,	// HEXAGON_M2_xor_xacc
    2161886214U,	// HEXAGON_M4_and_and
    2216412166U,	// HEXAGON_M4_and_andn
    1827846U,	// HEXAGON_M4_and_or
    1836038U,	// HEXAGON_M4_and_xor
    2161910790U,	// HEXAGON_M4_or_and
    2216436742U,	// HEXAGON_M4_or_andn
    2161918982U,	// HEXAGON_M4_or_or
    1860614U,	// HEXAGON_M4_or_xor
    2161935366U,	// HEXAGON_M4_xor_and
    2216461318U,	// HEXAGON_M4_xor_andn
    1876998U,	// HEXAGON_M4_xor_or
    1885190U,	// HEXAGON_M5_vdmacbsu
    1893382U,	// HEXAGON_M5_vdmpybsu
    1901574U,	// HEXAGON_M5_vmacbsu
    1909766U,	// HEXAGON_M5_vmacbuu
    1917958U,	// HEXAGON_M5_vmpybsu
    1926150U,	// HEXAGON_M5_vmpybuu
    1934342U,	// HEXAGON_M5_vrmacbsu
    1942534U,	// HEXAGON_M5_vrmacbuu
    1950726U,	// HEXAGON_M5_vrmpybsu
    1958918U,	// HEXAGON_M5_vrmpybuu
    1967110U,	// HEXAGON_S2_addasl_rrri
    3294503942U,	// HEXAGON_S2_asl_i_p
    2757641222U,	// HEXAGON_S2_asl_i_p_acc
    2757649414U,	// HEXAGON_S2_asl_i_p_and
    2757657606U,	// HEXAGON_S2_asl_i_p_nac
    2757665798U,	// HEXAGON_S2_asl_i_p_or
    2757673990U,	// HEXAGON_S2_asl_i_p_xacc
    3294503942U,	// HEXAGON_S2_asl_i_r
    2757641222U,	// HEXAGON_S2_asl_i_r_acc
    2757649414U,	// HEXAGON_S2_asl_i_r_and
    2757657606U,	// HEXAGON_S2_asl_i_r_nac
    2757665798U,	// HEXAGON_S2_asl_i_r_or
    1625170950U,	// HEXAGON_S2_asl_i_r_sat
    2757673990U,	// HEXAGON_S2_asl_i_r_xacc
    2024454U,	// HEXAGON_S2_asl_i_vh
    2032646U,	// HEXAGON_S2_asl_i_vw
    1625170950U,	// HEXAGON_S2_asl_r_p
    2162050054U,	// HEXAGON_S2_asl_r_p_acc
    2162058246U,	// HEXAGON_S2_asl_r_p_and
    2162066438U,	// HEXAGON_S2_asl_r_p_nac
    2162074630U,	// HEXAGON_S2_asl_r_p_or
    1625170950U,	// HEXAGON_S2_asl_r_r
    2162050054U,	// HEXAGON_S2_asl_r_r_acc
    2162058246U,	// HEXAGON_S2_asl_r_r_and
    2162066438U,	// HEXAGON_S2_asl_r_r_nac
    2162074630U,	// HEXAGON_S2_asl_r_r_or
    1625170950U,	// HEXAGON_S2_asl_r_r_sat
    2024454U,	// HEXAGON_S2_asl_r_vh
    2032646U,	// HEXAGON_S2_asl_r_vw
    3294569478U,	// HEXAGON_S2_asr_i_p
    2757706758U,	// HEXAGON_S2_asr_i_p_acc
    2757714950U,	// HEXAGON_S2_asr_i_p_and
    2757723142U,	// HEXAGON_S2_asr_i_p_nac
    2757731334U,	// HEXAGON_S2_asr_i_p_or
    3294569478U,	// HEXAGON_S2_asr_i_p_rnd
    2081798U,	// HEXAGON_S2_asr_i_p_rnd_goodsyntax
    3294569478U,	// HEXAGON_S2_asr_i_r
    2757706758U,	// HEXAGON_S2_asr_i_r_acc
    2757714950U,	// HEXAGON_S2_asr_i_r_and
    2757723142U,	// HEXAGON_S2_asr_i_r_nac
    2757731334U,	// HEXAGON_S2_asr_i_r_or
    3294569478U,	// HEXAGON_S2_asr_i_r_rnd
    2081798U,	// HEXAGON_S2_asr_i_r_rnd_goodsyntax
    3294618630U,	// HEXAGON_S2_asr_i_svw_trun
    1625293830U,	// HEXAGON_S2_asr_i_vh
    1625285638U,	// HEXAGON_S2_asr_i_vw
    1625236486U,	// HEXAGON_S2_asr_r_p
    2162115590U,	// HEXAGON_S2_asr_r_p_acc
    2162123782U,	// HEXAGON_S2_asr_r_p_and
    2162131974U,	// HEXAGON_S2_asr_r_p_nac
    2162140166U,	// HEXAGON_S2_asr_r_p_or
    1625236486U,	// HEXAGON_S2_asr_r_r
    2162115590U,	// HEXAGON_S2_asr_r_r_acc
    2162123782U,	// HEXAGON_S2_asr_r_r_and
    2162131974U,	// HEXAGON_S2_asr_r_r_nac
    2162140166U,	// HEXAGON_S2_asr_r_r_or
    1625236486U,	// HEXAGON_S2_asr_r_r_sat
    1625285638U,	// HEXAGON_S2_asr_r_svw_trun
    1625293830U,	// HEXAGON_S2_asr_r_vh
    1625285638U,	// HEXAGON_S2_asr_r_vw
    754694U,	// HEXAGON_S2_cl0
    754694U,	// HEXAGON_S2_cl0p
    2106374U,	// HEXAGON_S2_cl1
    2106374U,	// HEXAGON_S2_cl1p
    2114566U,	// HEXAGON_S2_clb
    2122758U,	// HEXAGON_S2_clbnorm
    2114566U,	// HEXAGON_S2_clbp
    3294659590U,	// HEXAGON_S2_clrbit_i
    1625326598U,	// HEXAGON_S2_clrbit_r
    762886U,	// HEXAGON_S2_ct0
    2139142U,	// HEXAGON_S2_ct1
    3294675974U,	// HEXAGON_S2_extractu
    1625342982U,	// HEXAGON_S2_extractu_rp
    3294675974U,	// HEXAGON_S2_extractup
    1625342982U,	// HEXAGON_S2_extractup_rp
    2155526U,	// HEXAGON_S2_lsl_r_p
    2163718U,	// HEXAGON_S2_lsl_r_p_acc
    2171910U,	// HEXAGON_S2_lsl_r_p_and
    2180102U,	// HEXAGON_S2_lsl_r_p_nac
    2188294U,	// HEXAGON_S2_lsl_r_p_or
    2155526U,	// HEXAGON_S2_lsl_r_r
    2163718U,	// HEXAGON_S2_lsl_r_r_acc
    2171910U,	// HEXAGON_S2_lsl_r_r_and
    2180102U,	// HEXAGON_S2_lsl_r_r_nac
    2188294U,	// HEXAGON_S2_lsl_r_r_or
    2196486U,	// HEXAGON_S2_lsl_r_vh
    2204678U,	// HEXAGON_S2_lsl_r_vw
    3294741510U,	// HEXAGON_S2_lsr_i_p
    2757878790U,	// HEXAGON_S2_lsr_i_p_acc
    2757886982U,	// HEXAGON_S2_lsr_i_p_and
    2757895174U,	// HEXAGON_S2_lsr_i_p_nac
    2757903366U,	// HEXAGON_S2_lsr_i_p_or
    2757911558U,	// HEXAGON_S2_lsr_i_p_xacc
    3294741510U,	// HEXAGON_S2_lsr_i_r
    2757878790U,	// HEXAGON_S2_lsr_i_r_acc
    2757886982U,	// HEXAGON_S2_lsr_i_r_and
    2757895174U,	// HEXAGON_S2_lsr_i_r_nac
    2757903366U,	// HEXAGON_S2_lsr_i_r_or
    2757911558U,	// HEXAGON_S2_lsr_i_r_xacc
    2262022U,	// HEXAGON_S2_lsr_i_vh
    2270214U,	// HEXAGON_S2_lsr_i_vw
    1625408518U,	// HEXAGON_S2_lsr_r_p
    2162287622U,	// HEXAGON_S2_lsr_r_p_acc
    2162295814U,	// HEXAGON_S2_lsr_r_p_and
    2162304006U,	// HEXAGON_S2_lsr_r_p_nac
    2162312198U,	// HEXAGON_S2_lsr_r_p_or
    1625408518U,	// HEXAGON_S2_lsr_r_r
    2162287622U,	// HEXAGON_S2_lsr_r_r_acc
    2162295814U,	// HEXAGON_S2_lsr_r_r_and
    2162304006U,	// HEXAGON_S2_lsr_r_r_nac
    2162312198U,	// HEXAGON_S2_lsr_r_r_or
    2262022U,	// HEXAGON_S2_lsr_r_vh
    2270214U,	// HEXAGON_S2_lsr_r_vw
    2278406U,	// HEXAGON_S2_packhl
    2286598U,	// HEXAGON_S2_parityp
    3294823430U,	// HEXAGON_S2_setbit_i
    1625490438U,	// HEXAGON_S2_setbit_r
    2302982U,	// HEXAGON_S2_shuffeb
    2311174U,	// HEXAGON_S2_shuffeh
    2319366U,	// HEXAGON_S2_shuffob
    2327558U,	// HEXAGON_S2_shuffoh
    2335750U,	// HEXAGON_S2_svsathb
    2343942U,	// HEXAGON_S2_svsathub
    3294880774U,	// HEXAGON_S2_togglebit_i
    1625547782U,	// HEXAGON_S2_togglebit_r
    3294888966U,	// HEXAGON_S2_tstbit_i
    1625555974U,	// HEXAGON_S2_tstbit_r
    2758026246U,	// HEXAGON_S2_valignib
    2162435078U,	// HEXAGON_S2_valignrb
    2376710U,	// HEXAGON_S2_vcrotate
    2384902U,	// HEXAGON_S2_vrndpackwh
    6579206U,	// HEXAGON_S2_vrndpackwhs
    2335750U,	// HEXAGON_S2_vsathb
    2335750U,	// HEXAGON_S2_vsathb_nopack
    2343942U,	// HEXAGON_S2_vsathub
    2343942U,	// HEXAGON_S2_vsathub_nopack
    2393094U,	// HEXAGON_S2_vsatwh
    2393094U,	// HEXAGON_S2_vsatwh_nopack
    2401286U,	// HEXAGON_S2_vsatwuh
    2401286U,	// HEXAGON_S2_vsatwuh_nopack
    2409478U,	// HEXAGON_S2_vsplatrb
    2417670U,	// HEXAGON_S2_vsplatrh
    2425862U,	// HEXAGON_S2_vsxtbh
    2434054U,	// HEXAGON_S2_vsxthw
    2442246U,	// HEXAGON_S2_vtrunehb
    2450438U,	// HEXAGON_S2_vtrunewh
    2458630U,	// HEXAGON_S2_vtrunohb
    2466822U,	// HEXAGON_S2_vtrunowh
    2475014U,	// HEXAGON_S2_vzxtbh
    2483206U,	// HEXAGON_S2_vzxthw
    2757501958U,	// HEXAGON_S4_or_andi
    2269225990U,	// HEXAGON_S4_or_andix
    2757510150U,	// HEXAGON_S4_or_ori
    195429382U,	// HEXAGON_S5_asrhub_rnd_sat_goodsyntax
    6685702U,	// HEXAGON_S5_asrhub_sat
    2499590U,	// HEXAGON_S5_popcountp
    3294626822U,	// HEXAGON_S5_vasrhrnd_goodsyntax
    3286648838U,	// HEXAGON_circ_ldd
    149316614U,	// HI
    153510918U,	// HI_jt
    547775494U,	// HI_label
    547775494U,	// HIi
    8397830U,	// Hexagon_A2_addpsat
    8397830U,	// Hexagon_A2_addsp
    58374U,	// Hexagon_A2_maxp
    66566U,	// Hexagon_A2_maxup
    1677739014U,	// Hexagon_A4_andn
    58770438U,	// Hexagon_A4_combineir
    3292570630U,	// Hexagon_A4_combineri
    1677829126U,	// Hexagon_A4_orn
    1623565318U,	// Hexagon_A4_rcmpeq
    3292898310U,	// Hexagon_A4_rcmpeqi
    1623573510U,	// Hexagon_A4_rcmpneq
    3292906502U,	// Hexagon_A4_rcmpneqi
    1623614470U,	// Hexagon_C2_bitsclr
    3292947462U,	// Hexagon_C2_bitsclri
    427014U,	// Hexagon_C2_bitsset
    121652230U,	// Hexagon_C4_and_and
    121652230U,	// Hexagon_C4_and_andn
    125846534U,	// Hexagon_C4_and_or
    125846534U,	// Hexagon_C4_and_orn
    1623680006U,	// Hexagon_C4_cmplte
    3293012998U,	// Hexagon_C4_cmpltei
    1623688198U,	// Hexagon_C4_cmplteu
    500742U,	// Hexagon_C4_fastcorner9
    508934U,	// Hexagon_C4_fastcorner9_not
    121742342U,	// Hexagon_C4_or_and
    121742342U,	// Hexagon_C4_or_andn
    125936646U,	// Hexagon_C4_or_or
    125936646U,	// Hexagon_C4_or_orn
    3294159878U,	// Hexagon_M2_mpysmi
    2524166U,	// Hexagon_M2_vradduh
    2532358U,	// Hexagon_M2_vrcmpys_acc_s1
    203867142U,	// Hexagon_M2_vrcmpys_s1
    216450054U,	// Hexagon_M2_vrcmpys_s1rp
    1811462U,	// Hexagon_M4_xor_xacc
    2548742U,	// Hexagon_S2_brev
    2556934U,	// Hexagon_S2_deinterleave
    2758222854U,	// Hexagon_S2_insert
    2162631686U,	// Hexagon_S2_insert_rp
    2758222854U,	// Hexagon_S2_insertp
    2162631686U,	// Hexagon_S2_insertp_rp
    2573318U,	// Hexagon_S2_interleave
    2581510U,	// Hexagon_S2_lfsp
    2589702U,	// Hexagon_S2_tableidxb_goodsyntax
    2597894U,	// Hexagon_S2_tableidxd_goodsyntax
    2606086U,	// Hexagon_S2_tableidxh_goodsyntax
    2614278U,	// Hexagon_S2_tableidxw_goodsyntax
    2758280198U,	// Hexagon_S2_vspliceib
    2162689030U,	// Hexagon_S2_vsplicerb
    3766494214U,	// Hexagon_S4_addaddi
    1677739014U,	// Hexagon_S4_andnp
    1677829126U,	// Hexagon_S4_ornp
    8397830U,	// Hexagon_S4_subaddi
    533505U,	// J2_call
    2630683U,	// J2_callf
    533517U,	// J2_callr
    2638875U,	// J2_callrf
    2639008U,	// J2_callrt
    2630816U,	// J2_callt
    533511U,	// J2_jump
    533574U,	// J2_jump_ext
    2647067U,	// J2_jump_extf
    2655259U,	// J2_jump_extfnew
    2663451U,	// J2_jump_extfnewpt
    2647200U,	// J2_jump_extt
    2655392U,	// J2_jump_exttnew
    2663584U,	// J2_jump_exttnewpt
    533567U,	// J2_jump_noext
    2671643U,	// J2_jump_noextf
    2679835U,	// J2_jump_noextfnew
    2688027U,	// J2_jump_noextfnewpt
    2671776U,	// J2_jump_noextt
    2679968U,	// J2_jump_noexttnew
    2688160U,	// J2_jump_noexttnewpt
    2696219U,	// J2_jumpf
    2704411U,	// J2_jumpfnew
    2712603U,	// J2_jumpfnewpt
    533524U,	// J2_jumpr
    2720795U,	// J2_jumprf
    2728987U,	// J2_jumprfnew
    2737179U,	// J2_jumprfnewpt
    2720928U,	// J2_jumprt
    2729120U,	// J2_jumprtnew
    2737312U,	// J2_jumprtnewpt
    2696352U,	// J2_jumpt
    2704544U,	// J2_jumptnew
    2712736U,	// J2_jumptnewpt
    2745517U,	// J2_loop0i
    574637U,	// J2_loop0r
    2745554U,	// J2_loop1i
    574674U,	// J2_loop1r
    2745509U,	// J2_ploop1si
    574629U,	// J2_ploop1sr
    2745524U,	// J2_ploop2si
    574644U,	// J2_ploop2sr
    2745539U,	// J2_ploop3si
    574659U,	// J2_ploop3sr
    235455743U,	// J4_cmpeq_fp0_jump_nt
    239650047U,	// J4_cmpeq_fp0_jump_t
    243844364U,	// J4_cmpeq_fp1_jump_nt
    248038668U,	// J4_cmpeq_fp1_jump_t
    252232959U,	// J4_cmpeq_tp0_jump_nt
    256427263U,	// J4_cmpeq_tp0_jump_t
    260621580U,	// J4_cmpeq_tp1_jump_nt
    264815884U,	// J4_cmpeq_tp1_jump_t
    237626623U,	// J4_cmpeqi_fp0_jump_nt
    241820927U,	// J4_cmpeqi_fp0_jump_t
    246015244U,	// J4_cmpeqi_fp1_jump_nt
    250209548U,	// J4_cmpeqi_fp1_jump_t
    254403839U,	// J4_cmpeqi_tp0_jump_nt
    258598143U,	// J4_cmpeqi_tp0_jump_t
    262792460U,	// J4_cmpeqi_tp1_jump_nt
    266986764U,	// J4_cmpeqi_tp1_jump_t
    2753791U,	// J4_cmpeqn1_fp0_jump_nt
    2761983U,	// J4_cmpeqn1_fp0_jump_t
    2770188U,	// J4_cmpeqn1_fp1_jump_nt
    2778380U,	// J4_cmpeqn1_fp1_jump_t
    2786559U,	// J4_cmpeqn1_tp0_jump_nt
    2794751U,	// J4_cmpeqn1_tp0_jump_t
    2802956U,	// J4_cmpeqn1_tp1_jump_nt
    2811148U,	// J4_cmpeqn1_tp1_jump_t
    235455802U,	// J4_cmpgt_fp0_jump_nt
    239650106U,	// J4_cmpgt_fp0_jump_t
    243844423U,	// J4_cmpgt_fp1_jump_nt
    248038727U,	// J4_cmpgt_fp1_jump_t
    252233018U,	// J4_cmpgt_tp0_jump_nt
    256427322U,	// J4_cmpgt_tp0_jump_t
    260621639U,	// J4_cmpgt_tp1_jump_nt
    264815943U,	// J4_cmpgt_tp1_jump_t
    237626682U,	// J4_cmpgti_fp0_jump_nt
    241820986U,	// J4_cmpgti_fp0_jump_t
    246015303U,	// J4_cmpgti_fp1_jump_nt
    250209607U,	// J4_cmpgti_fp1_jump_t
    254403898U,	// J4_cmpgti_tp0_jump_nt
    258598202U,	// J4_cmpgti_tp0_jump_t
    262792519U,	// J4_cmpgti_tp1_jump_nt
    266986823U,	// J4_cmpgti_tp1_jump_t
    2753850U,	// J4_cmpgtn1_fp0_jump_nt
    2762042U,	// J4_cmpgtn1_fp0_jump_t
    2770247U,	// J4_cmpgtn1_fp1_jump_nt
    2778439U,	// J4_cmpgtn1_fp1_jump_t
    2786618U,	// J4_cmpgtn1_tp0_jump_nt
    2794810U,	// J4_cmpgtn1_tp0_jump_t
    2803015U,	// J4_cmpgtn1_tp1_jump_nt
    2811207U,	// J4_cmpgtn1_tp1_jump_t
    235455904U,	// J4_cmpgtu_fp0_jump_nt
    239650208U,	// J4_cmpgtu_fp0_jump_t
    243844526U,	// J4_cmpgtu_fp1_jump_nt
    248038830U,	// J4_cmpgtu_fp1_jump_t
    252233120U,	// J4_cmpgtu_tp0_jump_nt
    256427424U,	// J4_cmpgtu_tp0_jump_t
    260621742U,	// J4_cmpgtu_tp1_jump_nt
    264816046U,	// J4_cmpgtu_tp1_jump_t
    237626784U,	// J4_cmpgtui_fp0_jump_nt
    241821088U,	// J4_cmpgtui_fp0_jump_t
    246015406U,	// J4_cmpgtui_fp1_jump_nt
    250209710U,	// J4_cmpgtui_fp1_jump_t
    254404000U,	// J4_cmpgtui_tp0_jump_nt
    258598304U,	// J4_cmpgtui_tp0_jump_t
    262792622U,	// J4_cmpgtui_tp1_jump_nt
    266986926U,	// J4_cmpgtui_tp1_jump_t
    353586U,	// J4_hintjumpr
    595829766U,	// J4_jumpseti
    268649478U,	// J4_jumpsetr
    2819437U,	// J4_tstbit0_fp0_jump_nt
    2827629U,	// J4_tstbit0_fp0_jump_t
    2835834U,	// J4_tstbit0_fp1_jump_nt
    2844026U,	// J4_tstbit0_fp1_jump_t
    2852205U,	// J4_tstbit0_tp0_jump_nt
    2860397U,	// J4_tstbit0_tp0_jump_t
    2868602U,	// J4_tstbit0_tp1_jump_nt
    2876794U,	// J4_tstbit0_tp1_jump_t
    533524U,	// JMPret
    2720795U,	// JMPretf
    2728987U,	// JMPretfnew
    2737179U,	// JMPretfnewpt
    2720928U,	// JMPrett
    2729120U,	// JMPrettnew
    2737312U,	// JMPrettnewpt
    566U,	// L2_deallocframe
    1085015046U,	// L2_loadrb_io
    1676411910U,	// L2_loadrb_pbr
    2213282822U,	// L2_loadrb_pci
    2750153734U,	// L2_loadrb_pcr
    3287024646U,	// L2_loadrb_pi
    3287024646U,	// L2_loadrb_pr
    2892806U,	// L2_loadrbgp
    1084638214U,	// L2_loadrd_io
    1676035078U,	// L2_loadrd_pbr
    2212905990U,	// L2_loadrd_pci
    2749776902U,	// L2_loadrd_pcr
    3286647814U,	// L2_loadrd_pi
    3286647814U,	// L2_loadrd_pr
    2900998U,	// L2_loadrdgp
    1085039622U,	// L2_loadrh_io
    1676436486U,	// L2_loadrh_pbr
    2213307398U,	// L2_loadrh_pci
    2750178310U,	// L2_loadrh_pcr
    3287049222U,	// L2_loadrh_pi
    3287049222U,	// L2_loadrh_pr
    2917382U,	// L2_loadrhgp
    1085056006U,	// L2_loadri_io
    1676452870U,	// L2_loadri_pbr
    2213323782U,	// L2_loadri_pci
    2750194694U,	// L2_loadri_pcr
    3287065606U,	// L2_loadri_pi
    3287065606U,	// L2_loadri_pr
    2933766U,	// L2_loadrigp
    1085072390U,	// L2_loadrub_io
    1676469254U,	// L2_loadrub_pbr
    2213340166U,	// L2_loadrub_pci
    2750211078U,	// L2_loadrub_pcr
    3287081990U,	// L2_loadrub_pi
    3287081990U,	// L2_loadrub_pr
    2950150U,	// L2_loadrubgp
    1085088774U,	// L2_loadruh_io
    1676485638U,	// L2_loadruh_pbr
    2213356550U,	// L2_loadruh_pci
    2750227462U,	// L2_loadruh_pcr
    3287098374U,	// L2_loadruh_pi
    3287098374U,	// L2_loadruh_pr
    2966534U,	// L2_loadruhgp
    2974726U,	// L2_loadw_locked
    1883359259U,	// L2_ploadrbf_io
    2420233243U,	// L2_ploadrbf_pi
    1883367451U,	// L2_ploadrbfnew_io
    2420241435U,	// L2_ploadrbfnew_pi
    1883359392U,	// L2_ploadrbt_io
    2420233376U,	// L2_ploadrbt_pi
    1883367584U,	// L2_ploadrbtnew_io
    2420241568U,	// L2_ploadrbtnew_pi
    1887553563U,	// L2_ploadrdf_io
    2424427547U,	// L2_ploadrdf_pi
    1887561755U,	// L2_ploadrdfnew_io
    2424435739U,	// L2_ploadrdfnew_pi
    1887553696U,	// L2_ploadrdt_io
    2424427680U,	// L2_ploadrdt_pi
    1887561888U,	// L2_ploadrdtnew_io
    2424435872U,	// L2_ploadrdtnew_pi
    1891747867U,	// L2_ploadrhf_io
    2428621851U,	// L2_ploadrhf_pi
    1891756059U,	// L2_ploadrhfnew_io
    2428630043U,	// L2_ploadrhfnew_pi
    1891748000U,	// L2_ploadrht_io
    2428621984U,	// L2_ploadrht_pi
    1891756192U,	// L2_ploadrhtnew_io
    2428630176U,	// L2_ploadrhtnew_pi
    1895942171U,	// L2_ploadrif_io
    2432816155U,	// L2_ploadrif_pi
    1895950363U,	// L2_ploadrifnew_io
    2432824347U,	// L2_ploadrifnew_pi
    1895942304U,	// L2_ploadrit_io
    2432816288U,	// L2_ploadrit_pi
    1895950496U,	// L2_ploadritnew_io
    2432824480U,	// L2_ploadritnew_pi
    1900136475U,	// L2_ploadrubf_io
    2437010459U,	// L2_ploadrubf_pi
    1900144667U,	// L2_ploadrubfnew_io
    2437018651U,	// L2_ploadrubfnew_pi
    1900136608U,	// L2_ploadrubt_io
    2437010592U,	// L2_ploadrubt_pi
    1900144800U,	// L2_ploadrubtnew_io
    2437018784U,	// L2_ploadrubtnew_pi
    1904330779U,	// L2_ploadruhf_io
    2441204763U,	// L2_ploadruhf_pi
    1904338971U,	// L2_ploadruhfnew_io
    2441212955U,	// L2_ploadruhfnew_pi
    1904330912U,	// L2_ploadruht_io
    2441204896U,	// L2_ploadruht_pi
    1904339104U,	// L2_ploadruhtnew_io
    2441213088U,	// L2_ploadruhtnew_pi
    3786245337U,	// L4_add_memopb_io
    3786245369U,	// L4_add_memoph_io
    3786245591U,	// L4_add_memopw_io
    28148953U,	// L4_and_memopb_io
    28148985U,	// L4_and_memoph_io
    28149207U,	// L4_and_memopw_io
    565019865U,	// L4_iadd_memopb_io
    565019897U,	// L4_iadd_memoph_io
    565020119U,	// L4_iadd_memopw_io
    1101890777U,	// L4_iand_memopb_io
    1101890809U,	// L4_iand_memoph_io
    1101891031U,	// L4_iand_memopw_io
    1638761689U,	// L4_ior_memopb_io
    1638761721U,	// L4_ior_memoph_io
    1638761943U,	// L4_ior_memopw_io
    2175632601U,	// L4_isub_memopb_io
    2175632633U,	// L4_isub_memoph_io
    2175632855U,	// L4_isub_memopw_io
    2991110U,	// L4_loadd_locked
    2999302U,	// L4_loadrb_abs
    2695627782U,	// L4_loadrb_rr
    3007494U,	// L4_loadrd_abs
    2695250950U,	// L4_loadrd_rr
    3015686U,	// L4_loadrh_abs
    2695652358U,	// L4_loadrh_rr
    3023878U,	// L4_loadri_abs
    2695668742U,	// L4_loadri_rr
    3032070U,	// L4_loadrub_abs
    2695685126U,	// L4_loadrub_rr
    3040262U,	// L4_loadruh_abs
    2695701510U,	// L4_loadruh_rr
    3249374425U,	// L4_or_memopb_io
    3249374457U,	// L4_or_memoph_io
    3249374679U,	// L4_or_memopw_io
    297912347U,	// L4_ploadrbf_abs
    1883359259U,	// L4_ploadrbf_rr
    297920539U,	// L4_ploadrbfnew_abs
    1883367451U,	// L4_ploadrbfnew_rr
    297912480U,	// L4_ploadrbt_abs
    1883359392U,	// L4_ploadrbt_rr
    297920672U,	// L4_ploadrbtnew_abs
    1883367584U,	// L4_ploadrbtnew_rr
    302106651U,	// L4_ploadrdf_abs
    1887553563U,	// L4_ploadrdf_rr
    302114843U,	// L4_ploadrdfnew_abs
    1887561755U,	// L4_ploadrdfnew_rr
    302106784U,	// L4_ploadrdt_abs
    1887553696U,	// L4_ploadrdt_rr
    302114976U,	// L4_ploadrdtnew_abs
    1887561888U,	// L4_ploadrdtnew_rr
    306300955U,	// L4_ploadrhf_abs
    1891747867U,	// L4_ploadrhf_rr
    306309147U,	// L4_ploadrhfnew_abs
    1891756059U,	// L4_ploadrhfnew_rr
    306301088U,	// L4_ploadrht_abs
    1891748000U,	// L4_ploadrht_rr
    306309280U,	// L4_ploadrhtnew_abs
    1891756192U,	// L4_ploadrhtnew_rr
    310495259U,	// L4_ploadrif_abs
    1895942171U,	// L4_ploadrif_rr
    310503451U,	// L4_ploadrifnew_abs
    1895950363U,	// L4_ploadrifnew_rr
    310495392U,	// L4_ploadrit_abs
    1895942304U,	// L4_ploadrit_rr
    310503584U,	// L4_ploadritnew_abs
    1895950496U,	// L4_ploadritnew_rr
    314689563U,	// L4_ploadrubf_abs
    1900136475U,	// L4_ploadrubf_rr
    314697755U,	// L4_ploadrubfnew_abs
    1900144667U,	// L4_ploadrubfnew_rr
    314689696U,	// L4_ploadrubt_abs
    1900136608U,	// L4_ploadrubt_rr
    314697888U,	// L4_ploadrubtnew_abs
    1900144800U,	// L4_ploadrubtnew_rr
    318883867U,	// L4_ploadruhf_abs
    1904330779U,	// L4_ploadruhf_rr
    318892059U,	// L4_ploadruhfnew_abs
    1904338971U,	// L4_ploadruhfnew_rr
    318884000U,	// L4_ploadruht_abs
    1904330912U,	// L4_ploadruht_rr
    318892192U,	// L4_ploadruhtnew_abs
    1904339104U,	// L4_ploadruhtnew_rr
    579U,	// L4_return
    3048475U,	// L4_return_f
    3056667U,	// L4_return_fnew_pnt
    3064859U,	// L4_return_fnew_pt
    3048608U,	// L4_return_t
    3056800U,	// L4_return_tnew_pnt
    3064992U,	// L4_return_tnew_pt
    3786245337U,	// L4_sub_memopb_io
    3786245369U,	// L4_sub_memoph_io
    3786245591U,	// L4_sub_memopw_io
    11273222U,	// LDrib_abs_set_V4
    548144134U,	// LDrib_ind_lo_V4
    10896390U,	// LDrid_abs_set_V4
    325469190U,	// LDrid_f
    3073030U,	// LDrid_ind_lo_V4
    1084638214U,	// LDrid_indexed_f
    11297798U,	// LDrih_abs_set_V4
    548168710U,	// LDrih_ind_lo_V4
    11330566U,	// LDriub_abs_set_V4
    548201478U,	// LDriub_ind_anyext_lo_V4
    548201478U,	// LDriub_ind_lo_V4
    11346950U,	// LDriuh_abs_set_V4
    548217862U,	// LDriuh_ind_anyext_lo_V4
    548217862U,	// LDriuh_ind_lo_V4
    11314182U,	// LDriw_abs_set_V4
    325886982U,	// LDriw_f
    548185094U,	// LDriw_ind_lo_V4
    1085056006U,	// LDriw_indexed_f
    606U,	// LDriw_pred
    149881862U,	// LO
    154076166U,	// LO_jt
    548340742U,	// LO_label
    548340742U,	// LOi
    2161501190U,	// M2_acci
    1683350534U,	// M2_accii
    2161566726U,	// M2_dpmpyss_acc_s0
    2161574918U,	// M2_dpmpyss_nac_s0
    1624712198U,	// M2_dpmpyss_rnd_s0
    1624712198U,	// M2_dpmpyss_s0
    2161591302U,	// M2_dpmpyuu_acc_s0
    2161599494U,	// M2_dpmpyuu_nac_s0
    1624736774U,	// M2_dpmpyuu_s0
    1624712198U,	// M2_hmmpyh_rs1
    1624712198U,	// M2_hmmpyh_s1
    1624712198U,	// M2_hmmpyl_rs1
    1624712198U,	// M2_hmmpyl_s1
    2161615878U,	// M2_maci
    328713222U,	// M2_macsin
    1683465222U,	// M2_macsip
    2165761030U,	// M2_mpy_acc_hh_s0
    2165761030U,	// M2_mpy_acc_hh_s1
    2165761030U,	// M2_mpy_acc_hl_s0
    2165761030U,	// M2_mpy_acc_hl_s1
    2169955334U,	// M2_mpy_acc_lh_s0
    2169955334U,	// M2_mpy_acc_lh_s1
    2169955334U,	// M2_mpy_acc_ll_s0
    2169955334U,	// M2_mpy_acc_ll_s1
    2165761030U,	// M2_mpy_acc_sat_hh_s0
    2165761030U,	// M2_mpy_acc_sat_hh_s1
    2165761030U,	// M2_mpy_acc_sat_hl_s0
    2165761030U,	// M2_mpy_acc_sat_hl_s1
    2169955334U,	// M2_mpy_acc_sat_lh_s0
    2169955334U,	// M2_mpy_acc_sat_lh_s1
    2169955334U,	// M2_mpy_acc_sat_ll_s0
    2169955334U,	// M2_mpy_acc_sat_ll_s1
    1628906502U,	// M2_mpy_hh_s0
    1628906502U,	// M2_mpy_hh_s1
    1628906502U,	// M2_mpy_hl_s0
    1628906502U,	// M2_mpy_hl_s1
    1633100806U,	// M2_mpy_lh_s0
    1633100806U,	// M2_mpy_lh_s1
    1633100806U,	// M2_mpy_ll_s0
    1633100806U,	// M2_mpy_ll_s1
    2165769222U,	// M2_mpy_nac_hh_s0
    2165769222U,	// M2_mpy_nac_hh_s1
    2165769222U,	// M2_mpy_nac_hl_s0
    2165769222U,	// M2_mpy_nac_hl_s1
    2169963526U,	// M2_mpy_nac_lh_s0
    2169963526U,	// M2_mpy_nac_lh_s1
    2169963526U,	// M2_mpy_nac_ll_s0
    2169963526U,	// M2_mpy_nac_ll_s1
    2165769222U,	// M2_mpy_nac_sat_hh_s0
    2165769222U,	// M2_mpy_nac_sat_hh_s1
    2165769222U,	// M2_mpy_nac_sat_hl_s0
    2165769222U,	// M2_mpy_nac_sat_hl_s1
    2169963526U,	// M2_mpy_nac_sat_lh_s0
    2169963526U,	// M2_mpy_nac_sat_lh_s1
    2169963526U,	// M2_mpy_nac_sat_ll_s0
    2169963526U,	// M2_mpy_nac_sat_ll_s1
    1628906502U,	// M2_mpy_rnd_hh_s0
    1628906502U,	// M2_mpy_rnd_hh_s1
    1628906502U,	// M2_mpy_rnd_hl_s0
    1628906502U,	// M2_mpy_rnd_hl_s1
    1633100806U,	// M2_mpy_rnd_lh_s0
    1633100806U,	// M2_mpy_rnd_lh_s1
    1633100806U,	// M2_mpy_rnd_ll_s0
    1633100806U,	// M2_mpy_rnd_ll_s1
    1628906502U,	// M2_mpy_sat_hh_s0
    1628906502U,	// M2_mpy_sat_hh_s1
    1628906502U,	// M2_mpy_sat_hl_s0
    1628906502U,	// M2_mpy_sat_hl_s1
    1633100806U,	// M2_mpy_sat_lh_s0
    1633100806U,	// M2_mpy_sat_lh_s1
    1633100806U,	// M2_mpy_sat_ll_s0
    1633100806U,	// M2_mpy_sat_ll_s1
    1628906502U,	// M2_mpy_sat_rnd_hh_s0
    1628906502U,	// M2_mpy_sat_rnd_hh_s1
    1628906502U,	// M2_mpy_sat_rnd_hl_s0
    1628906502U,	// M2_mpy_sat_rnd_hl_s1
    1633100806U,	// M2_mpy_sat_rnd_lh_s0
    1633100806U,	// M2_mpy_sat_rnd_lh_s1
    1633100806U,	// M2_mpy_sat_rnd_ll_s0
    1633100806U,	// M2_mpy_sat_rnd_ll_s1
    1624712198U,	// M2_mpy_up
    1624712198U,	// M2_mpy_up_s1_sat
    2165761030U,	// M2_mpyd_acc_hh_s0
    2165761030U,	// M2_mpyd_acc_hh_s1
    2165761030U,	// M2_mpyd_acc_hl_s0
    2165761030U,	// M2_mpyd_acc_hl_s1
    2169955334U,	// M2_mpyd_acc_lh_s0
    2169955334U,	// M2_mpyd_acc_lh_s1
    2169955334U,	// M2_mpyd_acc_ll_s0
    2169955334U,	// M2_mpyd_acc_ll_s1
    1628906502U,	// M2_mpyd_hh_s0
    1628906502U,	// M2_mpyd_hh_s1
    1628906502U,	// M2_mpyd_hl_s0
    1628906502U,	// M2_mpyd_hl_s1
    1633100806U,	// M2_mpyd_lh_s0
    1633100806U,	// M2_mpyd_lh_s1
    1633100806U,	// M2_mpyd_ll_s0
    1633100806U,	// M2_mpyd_ll_s1
    2165769222U,	// M2_mpyd_nac_hh_s0
    2165769222U,	// M2_mpyd_nac_hh_s1
    2165769222U,	// M2_mpyd_nac_hl_s0
    2165769222U,	// M2_mpyd_nac_hl_s1
    2169963526U,	// M2_mpyd_nac_lh_s0
    2169963526U,	// M2_mpyd_nac_lh_s1
    2169963526U,	// M2_mpyd_nac_ll_s0
    2169963526U,	// M2_mpyd_nac_ll_s1
    1628906502U,	// M2_mpyd_rnd_hh_s0
    1628906502U,	// M2_mpyd_rnd_hh_s1
    1628906502U,	// M2_mpyd_rnd_hl_s0
    1628906502U,	// M2_mpyd_rnd_hl_s1
    1633100806U,	// M2_mpyd_rnd_lh_s0
    1633100806U,	// M2_mpyd_rnd_lh_s1
    1633100806U,	// M2_mpyd_rnd_ll_s0
    1633100806U,	// M2_mpyd_rnd_ll_s1
    1624826886U,	// M2_mpyi
    3089414U,	// M2_mpysin
    3097606U,	// M2_mpysip
    3831030790U,	// M2_mpysmi
    3105798U,	// M2_mpysu_up
    2165785606U,	// M2_mpyu_acc_hh_s0
    2165785606U,	// M2_mpyu_acc_hh_s1
    2165785606U,	// M2_mpyu_acc_hl_s0
    2165785606U,	// M2_mpyu_acc_hl_s1
    2169979910U,	// M2_mpyu_acc_lh_s0
    2169979910U,	// M2_mpyu_acc_lh_s1
    2169979910U,	// M2_mpyu_acc_ll_s0
    2169979910U,	// M2_mpyu_acc_ll_s1
    1628931078U,	// M2_mpyu_hh_s0
    1628931078U,	// M2_mpyu_hh_s1
    1628931078U,	// M2_mpyu_hl_s0
    1628931078U,	// M2_mpyu_hl_s1
    1633125382U,	// M2_mpyu_lh_s0
    1633125382U,	// M2_mpyu_lh_s1
    1633125382U,	// M2_mpyu_ll_s0
    1633125382U,	// M2_mpyu_ll_s1
    2165793798U,	// M2_mpyu_nac_hh_s0
    2165793798U,	// M2_mpyu_nac_hh_s1
    2165793798U,	// M2_mpyu_nac_hl_s0
    2165793798U,	// M2_mpyu_nac_hl_s1
    2169988102U,	// M2_mpyu_nac_lh_s0
    2169988102U,	// M2_mpyu_nac_lh_s1
    2169988102U,	// M2_mpyu_nac_ll_s0
    2169988102U,	// M2_mpyu_nac_ll_s1
    1624736774U,	// M2_mpyu_up
    2165785606U,	// M2_mpyud_acc_hh_s0
    2165785606U,	// M2_mpyud_acc_hh_s1
    2165785606U,	// M2_mpyud_acc_hl_s0
    2165785606U,	// M2_mpyud_acc_hl_s1
    2169979910U,	// M2_mpyud_acc_lh_s0
    2169979910U,	// M2_mpyud_acc_lh_s1
    2169979910U,	// M2_mpyud_acc_ll_s0
    2169979910U,	// M2_mpyud_acc_ll_s1
    1628931078U,	// M2_mpyud_hh_s0
    1628931078U,	// M2_mpyud_hh_s1
    1628931078U,	// M2_mpyud_hl_s0
    1628931078U,	// M2_mpyud_hl_s1
    1633125382U,	// M2_mpyud_lh_s0
    1633125382U,	// M2_mpyud_lh_s1
    1633125382U,	// M2_mpyud_ll_s0
    1633125382U,	// M2_mpyud_ll_s1
    2165793798U,	// M2_mpyud_nac_hh_s0
    2165793798U,	// M2_mpyud_nac_hh_s1
    2165793798U,	// M2_mpyud_nac_hl_s0
    2165793798U,	// M2_mpyud_nac_hl_s1
    2169988102U,	// M2_mpyud_nac_lh_s0
    2169988102U,	// M2_mpyud_nac_lh_s1
    2169988102U,	// M2_mpyud_nac_ll_s0
    2169988102U,	// M2_mpyud_nac_ll_s1
    1639430U,	// M2_mpyui
    2161714182U,	// M2_nacci
    1683563526U,	// M2_naccii
    1655814U,	// M2_subacc
    1811462U,	// M2_xor_xacc
    2161886214U,	// M4_and_and
    2216412166U,	// M4_and_andn
    1827846U,	// M4_and_or
    1836038U,	// M4_and_xor
    2161566726U,	// M4_mac_up_s1_sat
    2481947654U,	// M4_mpyri_addi
    2155881478U,	// M4_mpyri_addr
    2692752390U,	// M4_mpyri_addr_u2
    334464006U,	// M4_mpyrr_addi
    2155881478U,	// M4_mpyrr_addr
    2161574918U,	// M4_nac_up_s1_sat
    2161910790U,	// M4_or_and
    2216436742U,	// M4_or_andn
    2161918982U,	// M4_or_or
    1860614U,	// M4_or_xor
    2161935366U,	// M4_xor_and
    2216461318U,	// M4_xor_andn
    1876998U,	// M4_xor_or
    1811462U,	// M4_xor_xacc
    1624712198U,	// MPY_trsext
    99334U,	// NOT_rr64
    3236930566U,	// NTSTBIT_ri
    1626317830U,	// NTSTBIT_rr
    3829507078U,	// OR_ri
    533505U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    533511U,	// RESTORE_DEALLOC_RET_JMP_V4
    1967110U,	// S2_addasl_rrri
    355452U,	// S2_allocframe
    3294503942U,	// S2_asl_i_p
    2757641222U,	// S2_asl_i_p_acc
    2757649414U,	// S2_asl_i_p_and
    2757657606U,	// S2_asl_i_p_nac
    2757665798U,	// S2_asl_i_p_or
    2757673990U,	// S2_asl_i_p_xacc
    3294503942U,	// S2_asl_i_r
    2757641222U,	// S2_asl_i_r_acc
    2757649414U,	// S2_asl_i_r_and
    2757657606U,	// S2_asl_i_r_nac
    2757665798U,	// S2_asl_i_r_or
    3294503942U,	// S2_asl_i_r_sat
    2757673990U,	// S2_asl_i_r_xacc
    1625170950U,	// S2_asl_r_p
    2162050054U,	// S2_asl_r_p_acc
    2162058246U,	// S2_asl_r_p_and
    2162066438U,	// S2_asl_r_p_nac
    2162074630U,	// S2_asl_r_p_or
    2162082822U,	// S2_asl_r_p_xor
    1625170950U,	// S2_asl_r_r
    2162050054U,	// S2_asl_r_r_acc
    2162058246U,	// S2_asl_r_r_and
    2162066438U,	// S2_asl_r_r_nac
    2162074630U,	// S2_asl_r_r_or
    1625170950U,	// S2_asl_r_r_sat
    3294569478U,	// S2_asr_i_p
    2757706758U,	// S2_asr_i_p_acc
    2757714950U,	// S2_asr_i_p_and
    2757723142U,	// S2_asr_i_p_nac
    2757731334U,	// S2_asr_i_p_or
    3294569478U,	// S2_asr_i_p_rnd
    3294569478U,	// S2_asr_i_r
    2757706758U,	// S2_asr_i_r_acc
    2757714950U,	// S2_asr_i_r_and
    2757723142U,	// S2_asr_i_r_nac
    2757731334U,	// S2_asr_i_r_or
    3294569478U,	// S2_asr_i_r_rnd
    1625236486U,	// S2_asr_r_p
    2162115590U,	// S2_asr_r_p_acc
    2162123782U,	// S2_asr_r_p_and
    2162131974U,	// S2_asr_r_p_nac
    2162140166U,	// S2_asr_r_p_or
    3130374U,	// S2_asr_r_p_xor
    1625236486U,	// S2_asr_r_r
    2162115590U,	// S2_asr_r_r_acc
    2162123782U,	// S2_asr_r_r_and
    2162131974U,	// S2_asr_r_r_nac
    2162140166U,	// S2_asr_r_r_or
    1625236486U,	// S2_asr_r_r_sat
    2548742U,	// S2_brevp
    754694U,	// S2_cl0
    754694U,	// S2_cl0p
    2106374U,	// S2_cl1
    2106374U,	// S2_cl1p
    2114566U,	// S2_clb
    2122758U,	// S2_clbnorm
    2114566U,	// S2_clbp
    3294659590U,	// S2_clrbit_i
    1625326598U,	// S2_clrbit_r
    762886U,	// S2_ct0
    762886U,	// S2_ct0p
    2139142U,	// S2_ct1
    2139142U,	// S2_ct1p
    2556934U,	// S2_deinterleave
    3294675974U,	// S2_extractu
    1625342982U,	// S2_extractu_rp
    3294675974U,	// S2_extractup
    1625342982U,	// S2_extractup_rp
    2758222854U,	// S2_insert
    2162631686U,	// S2_insert_rp
    2758222854U,	// S2_insertp
    2162631686U,	// S2_insertp_rp
    2573318U,	// S2_interleave
    2581510U,	// S2_lfsp
    2155526U,	// S2_lsl_r_p
    2163718U,	// S2_lsl_r_p_acc
    2171910U,	// S2_lsl_r_p_and
    2180102U,	// S2_lsl_r_p_nac
    2188294U,	// S2_lsl_r_p_or
    3138566U,	// S2_lsl_r_p_xor
    2155526U,	// S2_lsl_r_r
    2163718U,	// S2_lsl_r_r_acc
    2171910U,	// S2_lsl_r_r_and
    2180102U,	// S2_lsl_r_r_nac
    2188294U,	// S2_lsl_r_r_or
    3294741510U,	// S2_lsr_i_p
    2757878790U,	// S2_lsr_i_p_acc
    2757886982U,	// S2_lsr_i_p_and
    2757895174U,	// S2_lsr_i_p_nac
    2757903366U,	// S2_lsr_i_p_or
    2757911558U,	// S2_lsr_i_p_xacc
    3294741510U,	// S2_lsr_i_r
    2757878790U,	// S2_lsr_i_r_acc
    2757886982U,	// S2_lsr_i_r_and
    2757895174U,	// S2_lsr_i_r_nac
    2757903366U,	// S2_lsr_i_r_or
    2757911558U,	// S2_lsr_i_r_xacc
    1625408518U,	// S2_lsr_r_p
    2162287622U,	// S2_lsr_r_p_acc
    2162295814U,	// S2_lsr_r_p_and
    2162304006U,	// S2_lsr_r_p_nac
    2162312198U,	// S2_lsr_r_p_or
    2162320390U,	// S2_lsr_r_p_xor
    1625408518U,	// S2_lsr_r_r
    2162287622U,	// S2_lsr_r_r_acc
    2162295814U,	// S2_lsr_r_r_and
    2162304006U,	// S2_lsr_r_r_nac
    2162312198U,	// S2_lsr_r_r_or
    2278406U,	// S2_packhl
    2286598U,	// S2_parityp
    1085277211U,	// S2_pstorerbf_io
    3287287835U,	// S2_pstorerbf_pi
    3287296027U,	// S2_pstorerbfnew_pi
    1085277211U,	// S2_pstorerbnewf_io
    3287287835U,	// S2_pstorerbnewf_pi
    3287296027U,	// S2_pstorerbnewfnew_pi
    1085277344U,	// S2_pstorerbnewt_io
    3287287968U,	// S2_pstorerbnewt_pi
    3287296160U,	// S2_pstorerbnewtnew_pi
    1085277344U,	// S2_pstorerbt_io
    3287287968U,	// S2_pstorerbt_pi
    3287296160U,	// S2_pstorerbtnew_pi
    1085293595U,	// S2_pstorerdf_io
    3287304219U,	// S2_pstorerdf_pi
    3287312411U,	// S2_pstorerdfnew_pi
    1085293728U,	// S2_pstorerdt_io
    3287304352U,	// S2_pstorerdt_pi
    3287312544U,	// S2_pstorerdtnew_pi
    1085309979U,	// S2_pstorerff_io
    3287320603U,	// S2_pstorerff_pi
    3287328795U,	// S2_pstorerffnew_pi
    1085310112U,	// S2_pstorerft_io
    3287320736U,	// S2_pstorerft_pi
    3287328928U,	// S2_pstorerftnew_pi
    1085309979U,	// S2_pstorerhf_io
    3287320603U,	// S2_pstorerhf_pi
    3287328795U,	// S2_pstorerhfnew_pi
    1085309979U,	// S2_pstorerhnewf_io
    3287320603U,	// S2_pstorerhnewf_pi
    3287328795U,	// S2_pstorerhnewfnew_pi
    1085310112U,	// S2_pstorerhnewt_io
    3287320736U,	// S2_pstorerhnewt_pi
    3287328928U,	// S2_pstorerhnewtnew_pi
    1085310112U,	// S2_pstorerht_io
    3287320736U,	// S2_pstorerht_pi
    3287328928U,	// S2_pstorerhtnew_pi
    1085326363U,	// S2_pstorerif_io
    3287336987U,	// S2_pstorerif_pi
    3287345179U,	// S2_pstorerifnew_pi
    1085326363U,	// S2_pstorerinewf_io
    3287336987U,	// S2_pstorerinewf_pi
    3287345179U,	// S2_pstorerinewfnew_pi
    1085326496U,	// S2_pstorerinewt_io
    3287337120U,	// S2_pstorerinewt_pi
    3287345312U,	// S2_pstorerinewtnew_pi
    1085326496U,	// S2_pstorerit_io
    3287337120U,	// S2_pstorerit_pi
    3287345312U,	// S2_pstoreritnew_pi
    3294823430U,	// S2_setbit_i
    1625490438U,	// S2_setbit_r
    3249374425U,	// S2_storerb_io
    53545177U,	// S2_storerb_pbr
    53553369U,	// S2_storerb_pci
    53561561U,	// S2_storerb_pcr
    53569753U,	// S2_storerb_pi
    53577945U,	// S2_storerb_pr
    53587022U,	// S2_storerbabs
    53588078U,	// S2_storerbgp
    3249374425U,	// S2_storerbnew_io
    338782425U,	// S2_storerbnew_pi
    338790617U,	// S2_storerbnew_pr
    338799694U,	// S2_storerbnewabs
    338799726U,	// S2_storerbnewgp
    3249374431U,	// S2_storerd_io
    53545183U,	// S2_storerd_pbr
    53553375U,	// S2_storerd_pci
    53561567U,	// S2_storerd_pcr
    53569759U,	// S2_storerd_pi
    53577951U,	// S2_storerd_pr
    53587030U,	// S2_storerdabs
    53588085U,	// S2_storerdgp
    3249374457U,	// S2_storerf_io
    342952185U,	// S2_storerf_pbr
    342960377U,	// S2_storerf_pci
    342968569U,	// S2_storerf_pcr
    342976761U,	// S2_storerf_pi
    342984953U,	// S2_storerf_pr
    342994014U,	// S2_storerfabs
    342995081U,	// S2_storerfgp
    3249374457U,	// S2_storerh_io
    53545209U,	// S2_storerh_pbr
    53553401U,	// S2_storerh_pci
    53561593U,	// S2_storerh_pcr
    53569785U,	// S2_storerh_pi
    53577977U,	// S2_storerh_pr
    53587038U,	// S2_storerhabs
    53588105U,	// S2_storerhgp
    3249374457U,	// S2_storerhnew_io
    338782457U,	// S2_storerhnew_pi
    338790649U,	// S2_storerhnew_pr
    338799710U,	// S2_storerhnewabs
    338799753U,	// S2_storerhnewgp
    3249374679U,	// S2_storeri_io
    53545431U,	// S2_storeri_pbr
    53553623U,	// S2_storeri_pci
    53561815U,	// S2_storeri_pcr
    53570007U,	// S2_storeri_pi
    53578199U,	// S2_storeri_pr
    53587046U,	// S2_storeriabs
    53588121U,	// S2_storerigp
    3249374679U,	// S2_storerinew_io
    338782679U,	// S2_storerinew_pi
    338790871U,	// S2_storerinew_pr
    338799718U,	// S2_storerinewabs
    338799769U,	// S2_storerinewgp
    346522630U,	// S2_tableidxb
    346530822U,	// S2_tableidxd
    346539014U,	// S2_tableidxh
    346547206U,	// S2_tableidxw
    3294880774U,	// S2_togglebit_i
    1625547782U,	// S2_togglebit_r
    3294888966U,	// S2_tstbit_i
    1625555974U,	// S2_tstbit_r
    3766494214U,	// S4_addaddi
    351241222U,	// S4_addi_asl_ri
    355435526U,	// S4_addi_lsr_ri
    351388678U,	// S4_andi_asl_ri
    355582982U,	// S4_andi_lsr_ri
    3269638U,	// S4_clbaddi
    3269638U,	// S4_clbpaddi
    2122758U,	// S4_clbpnorm
    3295806470U,	// S4_extract
    1626473478U,	// S4_extract_rp
    3295806470U,	// S4_extractp
    1626473478U,	// S4_extractp_rp
    3286022U,	// S4_lsli
    3295650822U,	// S4_ntstbit_i
    1626317830U,	// S4_ntstbit_r
    1683760134U,	// S4_or_andi
    2269225990U,	// S4_or_andix
    1683768326U,	// S4_or_ori
    351421446U,	// S4_ori_asl_ri
    355615750U,	// S4_ori_lsr_ri
    2286598U,	// S4_parity
    53634075U,	// S4_pstorerbf_abs
    3769631771U,	// S4_pstorerbf_rr
    53642267U,	// S4_pstorerbfnew_abs
    1085285403U,	// S4_pstorerbfnew_io
    3769639963U,	// S4_pstorerbfnew_rr
    338846747U,	// S4_pstorerbnewf_abs
    3769631771U,	// S4_pstorerbnewf_rr
    338854939U,	// S4_pstorerbnewfnew_abs
    1085285403U,	// S4_pstorerbnewfnew_io
    3769639963U,	// S4_pstorerbnewfnew_rr
    338846880U,	// S4_pstorerbnewt_abs
    3769631904U,	// S4_pstorerbnewt_rr
    338855072U,	// S4_pstorerbnewtnew_abs
    1085285536U,	// S4_pstorerbnewtnew_io
    3769640096U,	// S4_pstorerbnewtnew_rr
    53634208U,	// S4_pstorerbt_abs
    3769631904U,	// S4_pstorerbt_rr
    53642400U,	// S4_pstorerbtnew_abs
    1085285536U,	// S4_pstorerbtnew_io
    3769640096U,	// S4_pstorerbtnew_rr
    3318811U,	// S4_pstorerdf_abs
    3769648155U,	// S4_pstorerdf_rr
    3327003U,	// S4_pstorerdfnew_abs
    1085301787U,	// S4_pstorerdfnew_io
    3769656347U,	// S4_pstorerdfnew_rr
    3318944U,	// S4_pstorerdt_abs
    3769648288U,	// S4_pstorerdt_rr
    3327136U,	// S4_pstorerdtnew_abs
    1085301920U,	// S4_pstorerdtnew_io
    3769656480U,	// S4_pstorerdtnew_rr
    343073819U,	// S4_pstorerff_abs
    3769664539U,	// S4_pstorerff_rr
    343082011U,	// S4_pstorerffnew_abs
    1085318171U,	// S4_pstorerffnew_io
    3769672731U,	// S4_pstorerffnew_rr
    343073952U,	// S4_pstorerft_abs
    3769664672U,	// S4_pstorerft_rr
    343082144U,	// S4_pstorerftnew_abs
    1085318304U,	// S4_pstorerftnew_io
    3769672864U,	// S4_pstorerftnew_rr
    53666843U,	// S4_pstorerhf_abs
    3769664539U,	// S4_pstorerhf_rr
    53675035U,	// S4_pstorerhfnew_abs
    1085318171U,	// S4_pstorerhfnew_io
    3769672731U,	// S4_pstorerhfnew_rr
    338879515U,	// S4_pstorerhnewf_abs
    3769664539U,	// S4_pstorerhnewf_rr
    338887707U,	// S4_pstorerhnewfnew_abs
    1085318171U,	// S4_pstorerhnewfnew_io
    3769672731U,	// S4_pstorerhnewfnew_rr
    338879648U,	// S4_pstorerhnewt_abs
    3769664672U,	// S4_pstorerhnewt_rr
    338887840U,	// S4_pstorerhnewtnew_abs
    1085318304U,	// S4_pstorerhnewtnew_io
    3769672864U,	// S4_pstorerhnewtnew_rr
    53666976U,	// S4_pstorerht_abs
    3769664672U,	// S4_pstorerht_rr
    53675168U,	// S4_pstorerhtnew_abs
    1085318304U,	// S4_pstorerhtnew_io
    3769672864U,	// S4_pstorerhtnew_rr
    53683227U,	// S4_pstorerif_abs
    3769680923U,	// S4_pstorerif_rr
    53691419U,	// S4_pstorerifnew_abs
    1085334555U,	// S4_pstorerifnew_io
    3769689115U,	// S4_pstorerifnew_rr
    338895899U,	// S4_pstorerinewf_abs
    3769680923U,	// S4_pstorerinewf_rr
    338904091U,	// S4_pstorerinewfnew_abs
    1085334555U,	// S4_pstorerinewfnew_io
    3769689115U,	// S4_pstorerinewfnew_rr
    338896032U,	// S4_pstorerinewt_abs
    3769681056U,	// S4_pstorerinewt_rr
    338904224U,	// S4_pstorerinewtnew_abs
    1085334688U,	// S4_pstorerinewtnew_io
    3769689248U,	// S4_pstorerinewtnew_rr
    53683360U,	// S4_pstorerit_abs
    3769681056U,	// S4_pstorerit_rr
    53691552U,	// S4_pstoreritnew_abs
    1085334688U,	// S4_pstoreritnew_io
    3769689248U,	// S4_pstoreritnew_rr
    61703385U,	// S4_storeirb_io
    1085277211U,	// S4_storeirbf_io
    1085285403U,	// S4_storeirbfnew_io
    1085277344U,	// S4_storeirbt_io
    1085285536U,	// S4_storeirbtnew_io
    61703417U,	// S4_storeirh_io
    1085309979U,	// S4_storeirhf_io
    1085318171U,	// S4_storeirhfnew_io
    1085310112U,	// S4_storeirht_io
    1085318304U,	// S4_storeirhtnew_io
    61703639U,	// S4_storeiri_io
    1085326363U,	// S4_storeirif_io
    1085334555U,	// S4_storeirifnew_io
    1085326496U,	// S4_storeirit_io
    1085334688U,	// S4_storeiritnew_io
    53699801U,	// S4_storerb_rr
    338912473U,	// S4_storerbnew_rr
    53699807U,	// S4_storerd_rr
    343106809U,	// S4_storerf_rr
    53699833U,	// S4_storerh_rr
    338912505U,	// S4_storerhnew_rr
    53700055U,	// S4_storeri_rr
    338912727U,	// S4_storerinew_rr
    8397830U,	// S4_subaddi
    562988038U,	// S4_subi_asl_ri
    1099858950U,	// S4_subi_lsr_ri
    2499590U,	// S5_popcountp
    3376129U,	// SAVE_REGISTERS_CALL_V4
    33798U,	// SI_to_SXTHI_asrh
    3384537U,	// STrib_abs_set_V4
    53724377U,	// STrib_shl_V4
    338937049U,	// STrib_shl_nv_V4
    3384543U,	// STrid_abs_set_V4
    6367U,	// STrid_f
    3282928863U,	// STrid_indexed_f
    53724383U,	// STrid_shl_V4
    3384569U,	// STrih_abs_set_V4
    1672316153U,	// STrih_offset_ext_V4
    53724409U,	// STrih_shl_V4
    338937081U,	// STrih_shl_nv_V4
    3384791U,	// STriw_abs_set_V4
    6615U,	// STriw_f
    3282929111U,	// STriw_indexed_f
    1672316375U,	// STriw_offset_ext_V4
    38U,	// STriw_pred
    606U,	// STriw_pred_V4
    53724631U,	// STriw_shl_V4
    338937303U,	// STriw_shl_nv_V4
    26117126U,	// SUB_ri
    533524U,	// TCRETURNR
    533511U,	// TCRETURNtext
    533511U,	// TCRETURNtg
    2709758982U,	// TFRI64_V4
    2709758982U,	// TFRI_V4
    3875653665U,	// TFRI_cNotPt_V4
    356632603U,	// TFRI_cNotPt_f
    3875653868U,	// TFRI_cPt_V4
    3338782880U,	// TFRI_cPt_f
    3875661857U,	// TFRI_cdnNotPt_V4
    3875662060U,	// TFRI_cdnPt_V4
    2743313414U,	// TFRI_f
    360719366U,	// TFR_FI
    365151238U,	// TFR_PdFalse
    606U,	// TFR_condset_ii
    606U,	// TFR_condset_ii_f
    606U,	// TFR_condset_ir
    606U,	// TFR_condset_ir_f
    606U,	// TFR_condset_ri
    606U,	// TFR_condset_ri_f
    606U,	// TFR_condset_rr64_f
    606U,	// TFR_condset_rr_f
    3401095U,	// TSTBIT0_f_Jumpnv_nt_V4
    3409287U,	// TSTBIT0_f_Jumpnv_t_V4
    3401108U,	// TSTBIT0_t_Jumpnv_nt_V4
    3409300U,	// TSTBIT0_t_Jumpnv_t_V4
    2162435078U,	// VALIGN_rrp
    1328134U,	// VMUX_prr64
    2162689030U,	// VSPLICE_rrp
    3417328U,	// Y2_dcfetchbo
    353509U,	// Y4_trace
    1336326U,	// fADD64_rr
    820230U,	// fADD_rr
    1410054U,	// fMUL64_rr
    934918U,	// fMUL_rr
    1418246U,	// fSUB64_rr
    943110U,	// fSUB_rr
    0U
  };

  static const uint32_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// FRAME_ALLOC
    0U,	// A2_abs
    0U,	// A2_absp
    0U,	// A2_abssat
    0U,	// A2_add
    8U,	// A2_addh_h16_hh
    16U,	// A2_addh_h16_hl
    8U,	// A2_addh_h16_lh
    16U,	// A2_addh_h16_ll
    24U,	// A2_addh_h16_sat_hh
    32U,	// A2_addh_h16_sat_hl
    24U,	// A2_addh_h16_sat_lh
    32U,	// A2_addh_h16_sat_ll
    40U,	// A2_addh_l16_hl
    48U,	// A2_addh_l16_ll
    56U,	// A2_addh_l16_sat_hl
    64U,	// A2_addh_l16_sat_ll
    0U,	// A2_addp
    512U,	// A2_addpsat
    512U,	// A2_addsat
    0U,	// A2_addsp
    1024U,	// A2_addsph
    1536U,	// A2_addspl
    72U,	// A2_and
    72U,	// A2_andp
    0U,	// A2_aslh
    0U,	// A2_asrh
    40U,	// A2_combine_hh
    48U,	// A2_combine_hl
    40U,	// A2_combine_lh
    48U,	// A2_combine_ll
    80U,	// A2_combineii
    72U,	// A2_combinew
    0U,	// A2_max
    0U,	// A2_maxp
    0U,	// A2_maxu
    0U,	// A2_maxup
    0U,	// A2_min
    0U,	// A2_minp
    0U,	// A2_minu
    0U,	// A2_minup
    0U,	// A2_negp
    0U,	// A2_negsat
    0U,	// A2_nop
    0U,	// A2_notp
    72U,	// A2_or
    72U,	// A2_orp
    88U,	// A2_paddf
    88U,	// A2_paddfnew
    88U,	// A2_paddt
    88U,	// A2_paddtnew
    0U,	// A2_pandf
    0U,	// A2_pandfnew
    0U,	// A2_pandt
    0U,	// A2_pandtnew
    0U,	// A2_porf
    0U,	// A2_porfnew
    0U,	// A2_port
    0U,	// A2_portnew
    0U,	// A2_psubf
    0U,	// A2_psubfnew
    0U,	// A2_psubt
    0U,	// A2_psubtnew
    0U,	// A2_pxorf
    0U,	// A2_pxorfnew
    0U,	// A2_pxort
    0U,	// A2_pxortnew
    0U,	// A2_sat
    0U,	// A2_satb
    0U,	// A2_sath
    0U,	// A2_satub
    0U,	// A2_satuh
    0U,	// A2_sub
    8U,	// A2_subh_h16_hh
    16U,	// A2_subh_h16_hl
    8U,	// A2_subh_h16_lh
    16U,	// A2_subh_h16_ll
    24U,	// A2_subh_h16_sat_hh
    32U,	// A2_subh_h16_sat_hl
    24U,	// A2_subh_h16_sat_lh
    32U,	// A2_subh_h16_sat_ll
    40U,	// A2_subh_l16_hl
    48U,	// A2_subh_l16_ll
    56U,	// A2_subh_l16_sat_hl
    64U,	// A2_subh_l16_sat_ll
    0U,	// A2_subp
    512U,	// A2_subsat
    0U,	// A2_swiz
    0U,	// A2_sxtb
    0U,	// A2_sxth
    0U,	// A2_sxtw
    0U,	// A2_tfr
    0U,	// A2_tfrcrr
    0U,	// A2_tfrf
    0U,	// A2_tfrfnew
    0U,	// A2_tfrih
    0U,	// A2_tfril
    0U,	// A2_tfrp
    0U,	// A2_tfrpf
    0U,	// A2_tfrpfnew
    0U,	// A2_tfrpi
    0U,	// A2_tfrpt
    0U,	// A2_tfrptnew
    0U,	// A2_tfrrcr
    0U,	// A2_tfrsi
    0U,	// A2_tfrt
    0U,	// A2_tfrtnew
    0U,	// A2_xor
    0U,	// A2_xorp
    0U,	// A2_zxtb
    0U,	// A2_zxth
    2136U,	// A4_addp_c
    72U,	// A4_andn
    72U,	// A4_andnp
    72U,	// A4_bitsplit
    72U,	// A4_bitspliti
    0U,	// A4_boundscheck
    0U,	// A4_boundscheck_hi
    0U,	// A4_boundscheck_lo
    72U,	// A4_cmpbeq
    72U,	// A4_cmpbeqi
    72U,	// A4_cmpbgt
    72U,	// A4_cmpbgti
    72U,	// A4_cmpbgtu
    72U,	// A4_cmpbgtui
    72U,	// A4_cmpheq
    72U,	// A4_cmpheqi
    72U,	// A4_cmphgt
    72U,	// A4_cmphgti
    72U,	// A4_cmphgtu
    72U,	// A4_cmphgtui
    96U,	// A4_combineii
    0U,	// A4_combineir
    72U,	// A4_combineri
    72U,	// A4_cround_ri
    72U,	// A4_cround_rr
    0U,	// A4_ext
    0U,	// A4_ext_b
    0U,	// A4_ext_c
    0U,	// A4_ext_g
    0U,	// A4_modwrapu
    72U,	// A4_orn
    72U,	// A4_ornp
    0U,	// A4_paslhf
    0U,	// A4_paslhfnew
    0U,	// A4_paslht
    0U,	// A4_paslhtnew
    0U,	// A4_pasrhf
    0U,	// A4_pasrhfnew
    0U,	// A4_pasrht
    0U,	// A4_pasrhtnew
    0U,	// A4_psxtbf
    0U,	// A4_psxtbfnew
    0U,	// A4_psxtbt
    0U,	// A4_psxtbtnew
    0U,	// A4_psxthf
    0U,	// A4_psxthfnew
    0U,	// A4_psxtht
    0U,	// A4_psxthtnew
    0U,	// A4_pzxtbf
    0U,	// A4_pzxtbfnew
    0U,	// A4_pzxtbt
    0U,	// A4_pzxtbtnew
    0U,	// A4_pzxthf
    0U,	// A4_pzxthfnew
    0U,	// A4_pzxtht
    0U,	// A4_pzxthtnew
    72U,	// A4_rcmpeq
    72U,	// A4_rcmpeqi
    72U,	// A4_rcmpneq
    72U,	// A4_rcmpneqi
    72U,	// A4_round_ri
    104U,	// A4_round_ri_sat
    72U,	// A4_round_rr
    104U,	// A4_round_rr_sat
    2136U,	// A4_subp_c
    0U,	// A4_tlbmatch
    96U,	// ADD_ri
    112U,	// ADD_ri_cNotPt
    112U,	// ADD_ri_cPt
    112U,	// ADD_ri_cdnNotPt
    112U,	// ADD_ri_cdnPt
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    80U,	// ADJDYNALLOC
    72U,	// AND_ri
    0U,	// ARGEXTEND
    0U,	// BARRIER
    0U,	// C2_all8
    72U,	// C2_and
    0U,	// C2_andn
    0U,	// C2_any8
    72U,	// C2_bitsclr
    72U,	// C2_bitsclri
    0U,	// C2_bitsset
    0U,	// C2_ccombinewf
    0U,	// C2_ccombinewnewf
    0U,	// C2_ccombinewnewt
    0U,	// C2_ccombinewt
    120U,	// C2_cmoveif
    120U,	// C2_cmoveit
    120U,	// C2_cmovenewif
    120U,	// C2_cmovenewit
    72U,	// C2_cmpeq
    72U,	// C2_cmpeqi
    72U,	// C2_cmpeqp
    72U,	// C2_cmpgt
    72U,	// C2_cmpgti
    72U,	// C2_cmpgtp
    72U,	// C2_cmpgtu
    72U,	// C2_cmpgtui
    72U,	// C2_cmpgtup
    0U,	// C2_mask
    128U,	// C2_mux
    2696U,	// C2_muxii
    11400U,	// C2_muxir
    128U,	// C2_muxri
    0U,	// C2_not
    72U,	// C2_or
    0U,	// C2_orn
    0U,	// C2_tfrpr
    0U,	// C2_tfrrp
    0U,	// C2_vitpack
    0U,	// C2_xor
    0U,	// C4_addipc
    3672U,	// C4_and_and
    145U,	// C4_and_andn
    3672U,	// C4_and_or
    145U,	// C4_and_orn
    72U,	// C4_cmplte
    72U,	// C4_cmpltei
    72U,	// C4_cmplteu
    72U,	// C4_cmplteui
    72U,	// C4_cmpneq
    72U,	// C4_cmpneqi
    0U,	// C4_fastcorner9
    0U,	// C4_fastcorner9_not
    72U,	// C4_nbitsclr
    72U,	// C4_nbitsclri
    0U,	// C4_nbitsset
    3672U,	// C4_or_and
    145U,	// C4_or_andn
    3672U,	// C4_or_or
    145U,	// C4_or_orn
    0U,	// CALL
    0U,	// CALLRv3
    0U,	// CMPEQn1_f_Jumpnv_nt_V4
    0U,	// CMPEQn1_f_Jumpnv_t_V4
    0U,	// CMPEQn1_t_Jumpnv_nt_V4
    0U,	// CMPEQn1_t_Jumpnv_t_V4
    0U,	// CMPEQri_f_Jumpnv_nt_V4
    0U,	// CMPEQri_f_Jumpnv_t_V4
    0U,	// CMPEQri_t_Jumpnv_nt_V4
    0U,	// CMPEQri_t_Jumpnv_t_V4
    0U,	// CMPEQrr_f_Jumpnv_nt_V4
    0U,	// CMPEQrr_f_Jumpnv_t_V4
    0U,	// CMPEQrr_t_Jumpnv_nt_V4
    0U,	// CMPEQrr_t_Jumpnv_t_V4
    0U,	// CMPGTUri_f_Jumpnv_nt_V4
    0U,	// CMPGTUri_f_Jumpnv_t_V4
    0U,	// CMPGTUri_t_Jumpnv_nt_V4
    0U,	// CMPGTUri_t_Jumpnv_t_V4
    0U,	// CMPGTUrr_f_Jumpnv_nt_V4
    0U,	// CMPGTUrr_f_Jumpnv_t_V4
    0U,	// CMPGTUrr_t_Jumpnv_nt_V4
    0U,	// CMPGTUrr_t_Jumpnv_t_V4
    0U,	// CMPGTn1_f_Jumpnv_nt_V4
    0U,	// CMPGTn1_f_Jumpnv_t_V4
    0U,	// CMPGTn1_t_Jumpnv_nt_V4
    0U,	// CMPGTn1_t_Jumpnv_t_V4
    0U,	// CMPGTri_f_Jumpnv_nt_V4
    0U,	// CMPGTri_f_Jumpnv_t_V4
    0U,	// CMPGTri_t_Jumpnv_nt_V4
    0U,	// CMPGTri_t_Jumpnv_t_V4
    0U,	// CMPGTrr_f_Jumpnv_nt_V4
    0U,	// CMPGTrr_f_Jumpnv_t_V4
    0U,	// CMPGTrr_t_Jumpnv_nt_V4
    0U,	// CMPGTrr_t_Jumpnv_t_V4
    0U,	// CMPLTUrr_f_Jumpnv_nt_V4
    0U,	// CMPLTUrr_f_Jumpnv_t_V4
    0U,	// CMPLTUrr_t_Jumpnv_nt_V4
    0U,	// CMPLTUrr_t_Jumpnv_t_V4
    0U,	// CMPLTrr_f_Jumpnv_nt_V4
    0U,	// CMPLTrr_f_Jumpnv_t_V4
    0U,	// CMPLTrr_t_Jumpnv_nt_V4
    0U,	// CMPLTrr_t_Jumpnv_t_V4
    72U,	// CMPbEQri_V4
    72U,	// CMPbEQrr_sbsb_V4
    72U,	// CMPbEQrr_ubub_V4
    72U,	// CMPbGTUri_V4
    72U,	// CMPbGTUrr_V4
    72U,	// CMPbGTrr_V4
    72U,	// CMPhEQri_V4
    72U,	// CMPhEQrr_shl_V4
    72U,	// CMPhEQrr_xor_V4
    72U,	// CMPhGTUri_V4
    72U,	// CMPhGTUrr_V4
    72U,	// CMPhGTrr_shl_V4
    72U,	// CMPnotEQ_rr
    72U,	// CMPnotGTU_rr
    72U,	// CMPnotGT_rr
    0U,	// CONST32
    0U,	// CONST32GP_set
    1U,	// CONST32_Float_Real
    1U,	// CONST32_Int_Real
    0U,	// CONST32_Label
    0U,	// CONST32_set
    0U,	// CONST32_set_jt
    0U,	// CONST64_Float_Real
    0U,	// CONST64_Int_Real
    0U,	// CONVERT_d2df
    0U,	// CONVERT_d2sf
    0U,	// CONVERT_df2d
    0U,	// CONVERT_df2d_nchop
    0U,	// CONVERT_df2sf
    0U,	// CONVERT_df2ud
    0U,	// CONVERT_df2ud_nchop
    0U,	// CONVERT_df2uw
    0U,	// CONVERT_df2uw_nchop
    0U,	// CONVERT_df2w
    0U,	// CONVERT_df2w_nchop
    0U,	// CONVERT_sf2d
    0U,	// CONVERT_sf2d_nchop
    0U,	// CONVERT_sf2df
    0U,	// CONVERT_sf2ud
    0U,	// CONVERT_sf2ud_nchop
    0U,	// CONVERT_sf2uw
    0U,	// CONVERT_sf2uw_nchop
    0U,	// CONVERT_sf2w
    0U,	// CONVERT_sf2w_nchop
    0U,	// CONVERT_ud2df
    0U,	// CONVERT_ud2sf
    0U,	// CONVERT_uw2df
    0U,	// CONVERT_uw2sf
    0U,	// CONVERT_w2df
    0U,	// CONVERT_w2sf
    0U,	// CTLZ64_rr
    0U,	// CTTZ64_rr
    0U,	// EH_RETURN_JMPR
    0U,	// ENDLOOP0
    0U,	// ENDLOOP1
    0U,	// F2_conv_d2df
    0U,	// F2_conv_d2sf
    0U,	// F2_conv_df2d
    0U,	// F2_conv_df2d_chop
    0U,	// F2_conv_df2sf
    0U,	// F2_conv_df2ud
    0U,	// F2_conv_df2ud_chop
    0U,	// F2_conv_df2uw
    0U,	// F2_conv_df2uw_chop
    0U,	// F2_conv_df2w
    0U,	// F2_conv_df2w_chop
    0U,	// F2_conv_sf2d
    0U,	// F2_conv_sf2d_chop
    0U,	// F2_conv_sf2df
    0U,	// F2_conv_sf2ud
    0U,	// F2_conv_sf2ud_chop
    0U,	// F2_conv_sf2uw
    0U,	// F2_conv_sf2uw_chop
    0U,	// F2_conv_sf2w
    0U,	// F2_conv_sf2w_chop
    0U,	// F2_conv_ud2df
    0U,	// F2_conv_ud2sf
    0U,	// F2_conv_uw2df
    0U,	// F2_conv_uw2sf
    0U,	// F2_conv_w2df
    0U,	// F2_conv_w2sf
    0U,	// F2_dfclass
    0U,	// F2_dfcmpeq
    0U,	// F2_dfcmpge
    0U,	// F2_dfcmpgt
    0U,	// F2_dfcmpuo
    0U,	// F2_dfimm_n
    0U,	// F2_dfimm_p
    0U,	// F2_sfadd
    0U,	// F2_sfclass
    0U,	// F2_sfcmpeq
    0U,	// F2_sfcmpge
    0U,	// F2_sfcmpgt
    0U,	// F2_sfcmpuo
    0U,	// F2_sffixupd
    0U,	// F2_sffixupn
    0U,	// F2_sffixupr
    88U,	// F2_sffma
    4184U,	// F2_sffma_lib
    34904U,	// F2_sffma_sc
    88U,	// F2_sffms
    4184U,	// F2_sffms_lib
    0U,	// F2_sfimm_n
    0U,	// F2_sfimm_p
    0U,	// F2_sfmax
    0U,	// F2_sfmin
    0U,	// F2_sfmpy
    0U,	// F2_sfrecipa
    0U,	// F2_sfsub
    0U,	// FCMPOEQ32_rr
    0U,	// FCMPOEQ64_rr
    0U,	// FCMPOGE32_rr
    0U,	// FCMPOGE64_rr
    0U,	// FCMPOGT32_rr
    0U,	// FCMPOGT64_rr
    0U,	// FCMPUEQ32_rr
    0U,	// FCMPUEQ64_rr
    0U,	// FCMPUGE32_rr
    0U,	// FCMPUGE64_rr
    0U,	// FCMPUGT32_rr
    0U,	// FCMPUGT64_rr
    0U,	// FCONST32_nsdata
    88U,	// FMADD_sp
    0U,	// FMAX_sp
    0U,	// FMIN_sp
    0U,	// HEXAGON_A2_abs
    0U,	// HEXAGON_A2_absp
    0U,	// HEXAGON_A2_abssat
    0U,	// HEXAGON_A2_add
    153U,	// HEXAGON_A2_addh_h16_hh
    161U,	// HEXAGON_A2_addh_h16_hl
    153U,	// HEXAGON_A2_addh_h16_lh
    161U,	// HEXAGON_A2_addh_h16_ll
    169U,	// HEXAGON_A2_addh_h16_sat_hh
    177U,	// HEXAGON_A2_addh_h16_sat_hl
    169U,	// HEXAGON_A2_addh_h16_sat_lh
    177U,	// HEXAGON_A2_addh_h16_sat_ll
    185U,	// HEXAGON_A2_addh_l16_hl
    193U,	// HEXAGON_A2_addh_l16_ll
    201U,	// HEXAGON_A2_addh_l16_sat_hl
    209U,	// HEXAGON_A2_addh_l16_sat_ll
    80U,	// HEXAGON_A2_addi
    0U,	// HEXAGON_A2_addp
    512U,	// HEXAGON_A2_addsat
    72U,	// HEXAGON_A2_and
    72U,	// HEXAGON_A2_andir
    72U,	// HEXAGON_A2_andp
    0U,	// HEXAGON_A2_aslh
    0U,	// HEXAGON_A2_asrh
    184U,	// HEXAGON_A2_combine_hh
    192U,	// HEXAGON_A2_combine_hl
    184U,	// HEXAGON_A2_combine_lh
    192U,	// HEXAGON_A2_combine_ll
    80U,	// HEXAGON_A2_combineii
    72U,	// HEXAGON_A2_combinew
    0U,	// HEXAGON_A2_max
    0U,	// HEXAGON_A2_maxu
    0U,	// HEXAGON_A2_min
    0U,	// HEXAGON_A2_minu
    0U,	// HEXAGON_A2_neg
    0U,	// HEXAGON_A2_negp
    0U,	// HEXAGON_A2_negsat
    0U,	// HEXAGON_A2_not
    0U,	// HEXAGON_A2_notp
    72U,	// HEXAGON_A2_or
    72U,	// HEXAGON_A2_orir
    72U,	// HEXAGON_A2_orp
    0U,	// HEXAGON_A2_sat
    0U,	// HEXAGON_A2_satb
    0U,	// HEXAGON_A2_sath
    0U,	// HEXAGON_A2_satub
    0U,	// HEXAGON_A2_satuh
    0U,	// HEXAGON_A2_sub
    153U,	// HEXAGON_A2_subh_h16_hh
    161U,	// HEXAGON_A2_subh_h16_hl
    153U,	// HEXAGON_A2_subh_h16_lh
    161U,	// HEXAGON_A2_subh_h16_ll
    169U,	// HEXAGON_A2_subh_h16_sat_hh
    177U,	// HEXAGON_A2_subh_h16_sat_hl
    169U,	// HEXAGON_A2_subh_h16_sat_lh
    177U,	// HEXAGON_A2_subh_h16_sat_ll
    185U,	// HEXAGON_A2_subh_l16_hl
    193U,	// HEXAGON_A2_subh_l16_ll
    201U,	// HEXAGON_A2_subh_l16_sat_hl
    209U,	// HEXAGON_A2_subh_l16_sat_ll
    0U,	// HEXAGON_A2_subp
    0U,	// HEXAGON_A2_subri
    512U,	// HEXAGON_A2_subsat
    0U,	// HEXAGON_A2_svaddh
    0U,	// HEXAGON_A2_svaddhs
    0U,	// HEXAGON_A2_svadduhs
    0U,	// HEXAGON_A2_svavgh
    0U,	// HEXAGON_A2_svavghs
    0U,	// HEXAGON_A2_svnavgh
    0U,	// HEXAGON_A2_svsubh
    0U,	// HEXAGON_A2_svsubhs
    0U,	// HEXAGON_A2_svsubuhs
    0U,	// HEXAGON_A2_swiz
    0U,	// HEXAGON_A2_sxtb
    0U,	// HEXAGON_A2_sxth
    0U,	// HEXAGON_A2_sxtw
    0U,	// HEXAGON_A2_tfr
    0U,	// HEXAGON_A2_tfrih
    0U,	// HEXAGON_A2_tfril
    0U,	// HEXAGON_A2_tfrp
    0U,	// HEXAGON_A2_tfrpi
    0U,	// HEXAGON_A2_tfrsi
    0U,	// HEXAGON_A2_vabsh
    0U,	// HEXAGON_A2_vabshsat
    0U,	// HEXAGON_A2_vabsw
    0U,	// HEXAGON_A2_vabswsat
    0U,	// HEXAGON_A2_vaddh
    0U,	// HEXAGON_A2_vaddhs
    0U,	// HEXAGON_A2_vaddub
    0U,	// HEXAGON_A2_vaddubs
    0U,	// HEXAGON_A2_vadduhs
    0U,	// HEXAGON_A2_vaddw
    0U,	// HEXAGON_A2_vaddws
    0U,	// HEXAGON_A2_vavgh
    0U,	// HEXAGON_A2_vavghcr
    0U,	// HEXAGON_A2_vavghr
    0U,	// HEXAGON_A2_vavgub
    0U,	// HEXAGON_A2_vavgubr
    0U,	// HEXAGON_A2_vavguh
    0U,	// HEXAGON_A2_vavguhr
    0U,	// HEXAGON_A2_vavguw
    0U,	// HEXAGON_A2_vavguwr
    0U,	// HEXAGON_A2_vavgw
    0U,	// HEXAGON_A2_vavgwcr
    0U,	// HEXAGON_A2_vavgwr
    0U,	// HEXAGON_A2_vcmpbeq
    0U,	// HEXAGON_A2_vcmpbgtu
    0U,	// HEXAGON_A2_vcmpheq
    0U,	// HEXAGON_A2_vcmphgt
    0U,	// HEXAGON_A2_vcmphgtu
    0U,	// HEXAGON_A2_vcmpweq
    0U,	// HEXAGON_A2_vcmpwgt
    0U,	// HEXAGON_A2_vcmpwgtu
    0U,	// HEXAGON_A2_vconj
    0U,	// HEXAGON_A2_vmaxh
    0U,	// HEXAGON_A2_vmaxub
    0U,	// HEXAGON_A2_vmaxuh
    0U,	// HEXAGON_A2_vmaxuw
    0U,	// HEXAGON_A2_vmaxw
    0U,	// HEXAGON_A2_vminh
    0U,	// HEXAGON_A2_vminub
    0U,	// HEXAGON_A2_vminuh
    0U,	// HEXAGON_A2_vminuw
    0U,	// HEXAGON_A2_vminw
    0U,	// HEXAGON_A2_vnavgh
    0U,	// HEXAGON_A2_vnavghcr
    0U,	// HEXAGON_A2_vnavghr
    0U,	// HEXAGON_A2_vnavgw
    0U,	// HEXAGON_A2_vnavgwcr
    0U,	// HEXAGON_A2_vnavgwr
    0U,	// HEXAGON_A2_vraddub
    0U,	// HEXAGON_A2_vraddub_acc
    0U,	// HEXAGON_A2_vrsadub
    0U,	// HEXAGON_A2_vrsadub_acc
    0U,	// HEXAGON_A2_vsubh
    0U,	// HEXAGON_A2_vsubhs
    0U,	// HEXAGON_A2_vsubub
    0U,	// HEXAGON_A2_vsububs
    0U,	// HEXAGON_A2_vsubuhs
    0U,	// HEXAGON_A2_vsubw
    0U,	// HEXAGON_A2_vsubws
    0U,	// HEXAGON_A2_xor
    0U,	// HEXAGON_A2_xorp
    0U,	// HEXAGON_A2_zxtb
    0U,	// HEXAGON_A2_zxth
    72U,	// HEXAGON_A4_cround_ri
    72U,	// HEXAGON_A4_cround_rr
    0U,	// HEXAGON_A4_modwrapu
    72U,	// HEXAGON_A4_round_ri
    104U,	// HEXAGON_A4_round_ri_sat
    72U,	// HEXAGON_A4_round_rr
    104U,	// HEXAGON_A4_round_rr_sat
    0U,	// HEXAGON_A5_vaddhubs
    0U,	// HEXAGON_C2_all8
    72U,	// HEXAGON_C2_and
    0U,	// HEXAGON_C2_andn
    0U,	// HEXAGON_C2_any8
    72U,	// HEXAGON_C2_cmpeq
    72U,	// HEXAGON_C2_cmpeqi
    72U,	// HEXAGON_C2_cmpeqp
    0U,	// HEXAGON_C2_cmpgei
    0U,	// HEXAGON_C2_cmpgeui
    72U,	// HEXAGON_C2_cmpgt
    72U,	// HEXAGON_C2_cmpgti
    72U,	// HEXAGON_C2_cmpgtp
    72U,	// HEXAGON_C2_cmpgtu
    72U,	// HEXAGON_C2_cmpgtui
    72U,	// HEXAGON_C2_cmpgtup
    0U,	// HEXAGON_C2_cmplt
    0U,	// HEXAGON_C2_cmpltu
    0U,	// HEXAGON_C2_mask
    128U,	// HEXAGON_C2_mux
    2696U,	// HEXAGON_C2_muxii
    2696U,	// HEXAGON_C2_muxir
    128U,	// HEXAGON_C2_muxri
    0U,	// HEXAGON_C2_not
    72U,	// HEXAGON_C2_or
    0U,	// HEXAGON_C2_orn
    0U,	// HEXAGON_C2_pxfer_map
    0U,	// HEXAGON_C2_tfrpr
    0U,	// HEXAGON_C2_tfrrp
    0U,	// HEXAGON_C2_vitpack
    0U,	// HEXAGON_C2_vmux
    0U,	// HEXAGON_C2_xor
    0U,	// HEXAGON_C4_fastcorner9
    0U,	// HEXAGON_C4_fastcorner9_not
    0U,	// HEXAGON_F2_conv_d2df
    0U,	// HEXAGON_F2_conv_d2sf
    0U,	// HEXAGON_F2_conv_df2d
    0U,	// HEXAGON_F2_conv_df2d_chop
    0U,	// HEXAGON_F2_conv_df2sf
    0U,	// HEXAGON_F2_conv_df2ud
    0U,	// HEXAGON_F2_conv_df2ud_chop
    0U,	// HEXAGON_F2_conv_df2uw
    0U,	// HEXAGON_F2_conv_df2uw_chop
    0U,	// HEXAGON_F2_conv_df2w
    0U,	// HEXAGON_F2_conv_df2w_chop
    0U,	// HEXAGON_F2_conv_sf2d
    0U,	// HEXAGON_F2_conv_sf2d_chop
    0U,	// HEXAGON_F2_conv_sf2df
    0U,	// HEXAGON_F2_conv_sf2ud
    0U,	// HEXAGON_F2_conv_sf2ud_chop
    0U,	// HEXAGON_F2_conv_sf2uw
    0U,	// HEXAGON_F2_conv_sf2uw_chop
    0U,	// HEXAGON_F2_conv_sf2w
    0U,	// HEXAGON_F2_conv_sf2w_chop
    0U,	// HEXAGON_F2_conv_ud2df
    0U,	// HEXAGON_F2_conv_ud2sf
    0U,	// HEXAGON_F2_conv_uw2df
    0U,	// HEXAGON_F2_conv_uw2sf
    0U,	// HEXAGON_F2_conv_w2df
    0U,	// HEXAGON_F2_conv_w2sf
    0U,	// HEXAGON_F2_dfadd
    0U,	// HEXAGON_F2_dfclass
    0U,	// HEXAGON_F2_dfcmpeq
    0U,	// HEXAGON_F2_dfcmpge
    0U,	// HEXAGON_F2_dfcmpgt
    0U,	// HEXAGON_F2_dfcmpuo
    0U,	// HEXAGON_F2_dffixupd
    0U,	// HEXAGON_F2_dffixupn
    0U,	// HEXAGON_F2_dffixupr
    0U,	// HEXAGON_F2_dffma
    4096U,	// HEXAGON_F2_dffma_lib
    34904U,	// HEXAGON_F2_dffma_sc
    0U,	// HEXAGON_F2_dffms
    0U,	// HEXAGON_F2_dffms_lib
    0U,	// HEXAGON_F2_dfimm_n
    0U,	// HEXAGON_F2_dfimm_p
    0U,	// HEXAGON_F2_dfmax
    0U,	// HEXAGON_F2_dfmin
    0U,	// HEXAGON_F2_dfmpy
    0U,	// HEXAGON_F2_dfsub
    0U,	// HEXAGON_F2_sfadd
    0U,	// HEXAGON_F2_sfclass
    0U,	// HEXAGON_F2_sfcmpeq
    0U,	// HEXAGON_F2_sfcmpge
    0U,	// HEXAGON_F2_sfcmpgt
    0U,	// HEXAGON_F2_sfcmpuo
    0U,	// HEXAGON_F2_sffixupd
    0U,	// HEXAGON_F2_sffixupn
    0U,	// HEXAGON_F2_sffixupr
    0U,	// HEXAGON_F2_sffma
    4096U,	// HEXAGON_F2_sffma_lib
    34904U,	// HEXAGON_F2_sffma_sc
    0U,	// HEXAGON_F2_sffms
    4096U,	// HEXAGON_F2_sffms_lib
    0U,	// HEXAGON_F2_sfimm_n
    0U,	// HEXAGON_F2_sfimm_p
    0U,	// HEXAGON_F2_sfmax
    0U,	// HEXAGON_F2_sfmin
    0U,	// HEXAGON_F2_sfmpy
    0U,	// HEXAGON_F2_sfsub
    73U,	// HEXAGON_M2_acci
    73U,	// HEXAGON_M2_accii
    0U,	// HEXAGON_M2_cmaci_s0
    0U,	// HEXAGON_M2_cmacr_s0
    0U,	// HEXAGON_M2_cmacs_s0
    0U,	// HEXAGON_M2_cmacs_s1
    0U,	// HEXAGON_M2_cmacsc_s0
    0U,	// HEXAGON_M2_cmacsc_s1
    0U,	// HEXAGON_M2_cmpyi_s0
    0U,	// HEXAGON_M2_cmpyr_s0
    0U,	// HEXAGON_M2_cmpyrs_s0
    0U,	// HEXAGON_M2_cmpyrs_s1
    0U,	// HEXAGON_M2_cmpyrsc_s0
    0U,	// HEXAGON_M2_cmpyrsc_s1
    0U,	// HEXAGON_M2_cmpys_s0
    0U,	// HEXAGON_M2_cmpys_s1
    0U,	// HEXAGON_M2_cmpysc_s0
    0U,	// HEXAGON_M2_cmpysc_s1
    0U,	// HEXAGON_M2_cnacs_s0
    0U,	// HEXAGON_M2_cnacs_s1
    0U,	// HEXAGON_M2_cnacsc_s0
    0U,	// HEXAGON_M2_cnacsc_s1
    73U,	// HEXAGON_M2_dpmpyss_acc_s0
    73U,	// HEXAGON_M2_dpmpyss_nac_s0
    216U,	// HEXAGON_M2_dpmpyss_rnd_s0
    72U,	// HEXAGON_M2_dpmpyss_s0
    73U,	// HEXAGON_M2_dpmpyuu_acc_s0
    73U,	// HEXAGON_M2_dpmpyuu_nac_s0
    72U,	// HEXAGON_M2_dpmpyuu_s0
    224U,	// HEXAGON_M2_hmmpyh_rs1
    232U,	// HEXAGON_M2_hmmpyl_rs1
    73U,	// HEXAGON_M2_maci
    0U,	// HEXAGON_M2_macsin
    73U,	// HEXAGON_M2_macsip
    0U,	// HEXAGON_M2_mmachs_rs0
    0U,	// HEXAGON_M2_mmachs_rs1
    0U,	// HEXAGON_M2_mmachs_s0
    0U,	// HEXAGON_M2_mmachs_s1
    0U,	// HEXAGON_M2_mmacls_rs0
    0U,	// HEXAGON_M2_mmacls_rs1
    0U,	// HEXAGON_M2_mmacls_s0
    0U,	// HEXAGON_M2_mmacls_s1
    0U,	// HEXAGON_M2_mmacuhs_rs0
    0U,	// HEXAGON_M2_mmacuhs_rs1
    0U,	// HEXAGON_M2_mmacuhs_s0
    0U,	// HEXAGON_M2_mmacuhs_s1
    0U,	// HEXAGON_M2_mmaculs_rs0
    0U,	// HEXAGON_M2_mmaculs_rs1
    0U,	// HEXAGON_M2_mmaculs_s0
    0U,	// HEXAGON_M2_mmaculs_s1
    0U,	// HEXAGON_M2_mmpyh_rs0
    0U,	// HEXAGON_M2_mmpyh_rs1
    0U,	// HEXAGON_M2_mmpyh_s0
    0U,	// HEXAGON_M2_mmpyh_s1
    0U,	// HEXAGON_M2_mmpyl_rs0
    0U,	// HEXAGON_M2_mmpyl_rs1
    0U,	// HEXAGON_M2_mmpyl_s0
    0U,	// HEXAGON_M2_mmpyl_s1
    0U,	// HEXAGON_M2_mmpyuh_rs0
    0U,	// HEXAGON_M2_mmpyuh_rs1
    0U,	// HEXAGON_M2_mmpyuh_s0
    0U,	// HEXAGON_M2_mmpyuh_s1
    0U,	// HEXAGON_M2_mmpyul_rs0
    0U,	// HEXAGON_M2_mmpyul_rs1
    0U,	// HEXAGON_M2_mmpyul_s0
    0U,	// HEXAGON_M2_mmpyul_s1
    185U,	// HEXAGON_M2_mpy_acc_hh_s0
    241U,	// HEXAGON_M2_mpy_acc_hh_s1
    193U,	// HEXAGON_M2_mpy_acc_hl_s0
    249U,	// HEXAGON_M2_mpy_acc_hl_s1
    185U,	// HEXAGON_M2_mpy_acc_lh_s0
    241U,	// HEXAGON_M2_mpy_acc_lh_s1
    193U,	// HEXAGON_M2_mpy_acc_ll_s0
    249U,	// HEXAGON_M2_mpy_acc_ll_s1
    201U,	// HEXAGON_M2_mpy_acc_sat_hh_s0
    257U,	// HEXAGON_M2_mpy_acc_sat_hh_s1
    209U,	// HEXAGON_M2_mpy_acc_sat_hl_s0
    265U,	// HEXAGON_M2_mpy_acc_sat_hl_s1
    201U,	// HEXAGON_M2_mpy_acc_sat_lh_s0
    257U,	// HEXAGON_M2_mpy_acc_sat_lh_s1
    209U,	// HEXAGON_M2_mpy_acc_sat_ll_s0
    265U,	// HEXAGON_M2_mpy_acc_sat_ll_s1
    184U,	// HEXAGON_M2_mpy_hh_s0
    240U,	// HEXAGON_M2_mpy_hh_s1
    192U,	// HEXAGON_M2_mpy_hl_s0
    248U,	// HEXAGON_M2_mpy_hl_s1
    184U,	// HEXAGON_M2_mpy_lh_s0
    240U,	// HEXAGON_M2_mpy_lh_s1
    192U,	// HEXAGON_M2_mpy_ll_s0
    248U,	// HEXAGON_M2_mpy_ll_s1
    185U,	// HEXAGON_M2_mpy_nac_hh_s0
    241U,	// HEXAGON_M2_mpy_nac_hh_s1
    193U,	// HEXAGON_M2_mpy_nac_hl_s0
    249U,	// HEXAGON_M2_mpy_nac_hl_s1
    185U,	// HEXAGON_M2_mpy_nac_lh_s0
    241U,	// HEXAGON_M2_mpy_nac_lh_s1
    193U,	// HEXAGON_M2_mpy_nac_ll_s0
    249U,	// HEXAGON_M2_mpy_nac_ll_s1
    201U,	// HEXAGON_M2_mpy_nac_sat_hh_s0
    257U,	// HEXAGON_M2_mpy_nac_sat_hh_s1
    209U,	// HEXAGON_M2_mpy_nac_sat_hl_s0
    265U,	// HEXAGON_M2_mpy_nac_sat_hl_s1
    201U,	// HEXAGON_M2_mpy_nac_sat_lh_s0
    257U,	// HEXAGON_M2_mpy_nac_sat_lh_s1
    209U,	// HEXAGON_M2_mpy_nac_sat_ll_s0
    265U,	// HEXAGON_M2_mpy_nac_sat_ll_s1
    272U,	// HEXAGON_M2_mpy_rnd_hh_s0
    280U,	// HEXAGON_M2_mpy_rnd_hh_s1
    288U,	// HEXAGON_M2_mpy_rnd_hl_s0
    296U,	// HEXAGON_M2_mpy_rnd_hl_s1
    272U,	// HEXAGON_M2_mpy_rnd_lh_s0
    280U,	// HEXAGON_M2_mpy_rnd_lh_s1
    288U,	// HEXAGON_M2_mpy_rnd_ll_s0
    296U,	// HEXAGON_M2_mpy_rnd_ll_s1
    200U,	// HEXAGON_M2_mpy_sat_hh_s0
    256U,	// HEXAGON_M2_mpy_sat_hh_s1
    208U,	// HEXAGON_M2_mpy_sat_hl_s0
    264U,	// HEXAGON_M2_mpy_sat_hl_s1
    200U,	// HEXAGON_M2_mpy_sat_lh_s0
    256U,	// HEXAGON_M2_mpy_sat_lh_s1
    208U,	// HEXAGON_M2_mpy_sat_ll_s0
    264U,	// HEXAGON_M2_mpy_sat_ll_s1
    304U,	// HEXAGON_M2_mpy_sat_rnd_hh_s0
    224U,	// HEXAGON_M2_mpy_sat_rnd_hh_s1
    312U,	// HEXAGON_M2_mpy_sat_rnd_hl_s0
    232U,	// HEXAGON_M2_mpy_sat_rnd_hl_s1
    304U,	// HEXAGON_M2_mpy_sat_rnd_lh_s0
    224U,	// HEXAGON_M2_mpy_sat_rnd_lh_s1
    312U,	// HEXAGON_M2_mpy_sat_rnd_ll_s0
    232U,	// HEXAGON_M2_mpy_sat_rnd_ll_s1
    72U,	// HEXAGON_M2_mpy_up
    185U,	// HEXAGON_M2_mpyd_acc_hh_s0
    241U,	// HEXAGON_M2_mpyd_acc_hh_s1
    193U,	// HEXAGON_M2_mpyd_acc_hl_s0
    249U,	// HEXAGON_M2_mpyd_acc_hl_s1
    185U,	// HEXAGON_M2_mpyd_acc_lh_s0
    241U,	// HEXAGON_M2_mpyd_acc_lh_s1
    193U,	// HEXAGON_M2_mpyd_acc_ll_s0
    249U,	// HEXAGON_M2_mpyd_acc_ll_s1
    184U,	// HEXAGON_M2_mpyd_hh_s0
    240U,	// HEXAGON_M2_mpyd_hh_s1
    192U,	// HEXAGON_M2_mpyd_hl_s0
    248U,	// HEXAGON_M2_mpyd_hl_s1
    184U,	// HEXAGON_M2_mpyd_lh_s0
    240U,	// HEXAGON_M2_mpyd_lh_s1
    192U,	// HEXAGON_M2_mpyd_ll_s0
    248U,	// HEXAGON_M2_mpyd_ll_s1
    185U,	// HEXAGON_M2_mpyd_nac_hh_s0
    241U,	// HEXAGON_M2_mpyd_nac_hh_s1
    193U,	// HEXAGON_M2_mpyd_nac_hl_s0
    249U,	// HEXAGON_M2_mpyd_nac_hl_s1
    185U,	// HEXAGON_M2_mpyd_nac_lh_s0
    241U,	// HEXAGON_M2_mpyd_nac_lh_s1
    193U,	// HEXAGON_M2_mpyd_nac_ll_s0
    249U,	// HEXAGON_M2_mpyd_nac_ll_s1
    272U,	// HEXAGON_M2_mpyd_rnd_hh_s0
    280U,	// HEXAGON_M2_mpyd_rnd_hh_s1
    288U,	// HEXAGON_M2_mpyd_rnd_hl_s0
    296U,	// HEXAGON_M2_mpyd_rnd_hl_s1
    272U,	// HEXAGON_M2_mpyd_rnd_lh_s0
    280U,	// HEXAGON_M2_mpyd_rnd_lh_s1
    288U,	// HEXAGON_M2_mpyd_rnd_ll_s0
    296U,	// HEXAGON_M2_mpyd_rnd_ll_s1
    72U,	// HEXAGON_M2_mpyi
    185U,	// HEXAGON_M2_mpyu_acc_hh_s0
    241U,	// HEXAGON_M2_mpyu_acc_hh_s1
    193U,	// HEXAGON_M2_mpyu_acc_hl_s0
    249U,	// HEXAGON_M2_mpyu_acc_hl_s1
    185U,	// HEXAGON_M2_mpyu_acc_lh_s0
    241U,	// HEXAGON_M2_mpyu_acc_lh_s1
    193U,	// HEXAGON_M2_mpyu_acc_ll_s0
    249U,	// HEXAGON_M2_mpyu_acc_ll_s1
    184U,	// HEXAGON_M2_mpyu_hh_s0
    240U,	// HEXAGON_M2_mpyu_hh_s1
    192U,	// HEXAGON_M2_mpyu_hl_s0
    248U,	// HEXAGON_M2_mpyu_hl_s1
    184U,	// HEXAGON_M2_mpyu_lh_s0
    240U,	// HEXAGON_M2_mpyu_lh_s1
    192U,	// HEXAGON_M2_mpyu_ll_s0
    248U,	// HEXAGON_M2_mpyu_ll_s1
    185U,	// HEXAGON_M2_mpyu_nac_hh_s0
    241U,	// HEXAGON_M2_mpyu_nac_hh_s1
    193U,	// HEXAGON_M2_mpyu_nac_hl_s0
    249U,	// HEXAGON_M2_mpyu_nac_hl_s1
    185U,	// HEXAGON_M2_mpyu_nac_lh_s0
    241U,	// HEXAGON_M2_mpyu_nac_lh_s1
    193U,	// HEXAGON_M2_mpyu_nac_ll_s0
    249U,	// HEXAGON_M2_mpyu_nac_ll_s1
    72U,	// HEXAGON_M2_mpyu_up
    185U,	// HEXAGON_M2_mpyud_acc_hh_s0
    241U,	// HEXAGON_M2_mpyud_acc_hh_s1
    193U,	// HEXAGON_M2_mpyud_acc_hl_s0
    249U,	// HEXAGON_M2_mpyud_acc_hl_s1
    185U,	// HEXAGON_M2_mpyud_acc_lh_s0
    241U,	// HEXAGON_M2_mpyud_acc_lh_s1
    193U,	// HEXAGON_M2_mpyud_acc_ll_s0
    249U,	// HEXAGON_M2_mpyud_acc_ll_s1
    184U,	// HEXAGON_M2_mpyud_hh_s0
    240U,	// HEXAGON_M2_mpyud_hh_s1
    192U,	// HEXAGON_M2_mpyud_hl_s0
    248U,	// HEXAGON_M2_mpyud_hl_s1
    184U,	// HEXAGON_M2_mpyud_lh_s0
    240U,	// HEXAGON_M2_mpyud_lh_s1
    192U,	// HEXAGON_M2_mpyud_ll_s0
    248U,	// HEXAGON_M2_mpyud_ll_s1
    185U,	// HEXAGON_M2_mpyud_nac_hh_s0
    241U,	// HEXAGON_M2_mpyud_nac_hh_s1
    193U,	// HEXAGON_M2_mpyud_nac_hl_s0
    249U,	// HEXAGON_M2_mpyud_nac_hl_s1
    185U,	// HEXAGON_M2_mpyud_nac_lh_s0
    241U,	// HEXAGON_M2_mpyud_nac_lh_s1
    193U,	// HEXAGON_M2_mpyud_nac_ll_s0
    249U,	// HEXAGON_M2_mpyud_nac_ll_s1
    0U,	// HEXAGON_M2_mpyui
    73U,	// HEXAGON_M2_nacci
    73U,	// HEXAGON_M2_naccii
    0U,	// HEXAGON_M2_subacc
    0U,	// HEXAGON_M2_vabsdiffh
    0U,	// HEXAGON_M2_vabsdiffw
    0U,	// HEXAGON_M2_vcmac_s0_sat_i
    0U,	// HEXAGON_M2_vcmac_s0_sat_r
    0U,	// HEXAGON_M2_vcmpy_s0_sat_i
    0U,	// HEXAGON_M2_vcmpy_s0_sat_r
    0U,	// HEXAGON_M2_vcmpy_s1_sat_i
    0U,	// HEXAGON_M2_vcmpy_s1_sat_r
    0U,	// HEXAGON_M2_vdmacs_s0
    0U,	// HEXAGON_M2_vdmacs_s1
    0U,	// HEXAGON_M2_vdmpyrs_s0
    0U,	// HEXAGON_M2_vdmpyrs_s1
    0U,	// HEXAGON_M2_vdmpys_s0
    0U,	// HEXAGON_M2_vdmpys_s1
    0U,	// HEXAGON_M2_vmac2
    0U,	// HEXAGON_M2_vmac2es
    0U,	// HEXAGON_M2_vmac2es_s0
    0U,	// HEXAGON_M2_vmac2es_s1
    0U,	// HEXAGON_M2_vmac2s_s0
    0U,	// HEXAGON_M2_vmac2s_s1
    0U,	// HEXAGON_M2_vmpy2es_s0
    0U,	// HEXAGON_M2_vmpy2es_s1
    0U,	// HEXAGON_M2_vmpy2s_s0
    0U,	// HEXAGON_M2_vmpy2s_s0pack
    0U,	// HEXAGON_M2_vmpy2s_s1
    0U,	// HEXAGON_M2_vmpy2s_s1pack
    0U,	// HEXAGON_M2_vrcmaci_s0
    0U,	// HEXAGON_M2_vrcmaci_s0c
    0U,	// HEXAGON_M2_vrcmacr_s0
    0U,	// HEXAGON_M2_vrcmacr_s0c
    0U,	// HEXAGON_M2_vrcmpyi_s0
    0U,	// HEXAGON_M2_vrcmpyi_s0c
    0U,	// HEXAGON_M2_vrcmpyr_s0
    0U,	// HEXAGON_M2_vrcmpyr_s0c
    0U,	// HEXAGON_M2_vrmac_s0
    0U,	// HEXAGON_M2_vrmpy_s0
    0U,	// HEXAGON_M2_xor_xacc
    73U,	// HEXAGON_M4_and_and
    73U,	// HEXAGON_M4_and_andn
    0U,	// HEXAGON_M4_and_or
    0U,	// HEXAGON_M4_and_xor
    73U,	// HEXAGON_M4_or_and
    73U,	// HEXAGON_M4_or_andn
    73U,	// HEXAGON_M4_or_or
    0U,	// HEXAGON_M4_or_xor
    73U,	// HEXAGON_M4_xor_and
    73U,	// HEXAGON_M4_xor_andn
    0U,	// HEXAGON_M4_xor_or
    0U,	// HEXAGON_M5_vdmacbsu
    0U,	// HEXAGON_M5_vdmpybsu
    0U,	// HEXAGON_M5_vmacbsu
    0U,	// HEXAGON_M5_vmacbuu
    0U,	// HEXAGON_M5_vmpybsu
    0U,	// HEXAGON_M5_vmpybuu
    0U,	// HEXAGON_M5_vrmacbsu
    0U,	// HEXAGON_M5_vrmacbuu
    0U,	// HEXAGON_M5_vrmpybsu
    0U,	// HEXAGON_M5_vrmpybuu
    0U,	// HEXAGON_S2_addasl_rrri
    72U,	// HEXAGON_S2_asl_i_p
    73U,	// HEXAGON_S2_asl_i_p_acc
    73U,	// HEXAGON_S2_asl_i_p_and
    73U,	// HEXAGON_S2_asl_i_p_nac
    73U,	// HEXAGON_S2_asl_i_p_or
    73U,	// HEXAGON_S2_asl_i_p_xacc
    72U,	// HEXAGON_S2_asl_i_r
    73U,	// HEXAGON_S2_asl_i_r_acc
    73U,	// HEXAGON_S2_asl_i_r_and
    73U,	// HEXAGON_S2_asl_i_r_nac
    73U,	// HEXAGON_S2_asl_i_r_or
    104U,	// HEXAGON_S2_asl_i_r_sat
    73U,	// HEXAGON_S2_asl_i_r_xacc
    0U,	// HEXAGON_S2_asl_i_vh
    0U,	// HEXAGON_S2_asl_i_vw
    72U,	// HEXAGON_S2_asl_r_p
    73U,	// HEXAGON_S2_asl_r_p_acc
    73U,	// HEXAGON_S2_asl_r_p_and
    73U,	// HEXAGON_S2_asl_r_p_nac
    73U,	// HEXAGON_S2_asl_r_p_or
    72U,	// HEXAGON_S2_asl_r_r
    73U,	// HEXAGON_S2_asl_r_r_acc
    73U,	// HEXAGON_S2_asl_r_r_and
    73U,	// HEXAGON_S2_asl_r_r_nac
    73U,	// HEXAGON_S2_asl_r_r_or
    104U,	// HEXAGON_S2_asl_r_r_sat
    0U,	// HEXAGON_S2_asl_r_vh
    0U,	// HEXAGON_S2_asl_r_vw
    72U,	// HEXAGON_S2_asr_i_p
    73U,	// HEXAGON_S2_asr_i_p_acc
    73U,	// HEXAGON_S2_asr_i_p_and
    73U,	// HEXAGON_S2_asr_i_p_nac
    73U,	// HEXAGON_S2_asr_i_p_or
    72U,	// HEXAGON_S2_asr_i_p_rnd
    0U,	// HEXAGON_S2_asr_i_p_rnd_goodsyntax
    72U,	// HEXAGON_S2_asr_i_r
    73U,	// HEXAGON_S2_asr_i_r_acc
    73U,	// HEXAGON_S2_asr_i_r_and
    73U,	// HEXAGON_S2_asr_i_r_nac
    73U,	// HEXAGON_S2_asr_i_r_or
    216U,	// HEXAGON_S2_asr_i_r_rnd
    0U,	// HEXAGON_S2_asr_i_r_rnd_goodsyntax
    72U,	// HEXAGON_S2_asr_i_svw_trun
    72U,	// HEXAGON_S2_asr_i_vh
    72U,	// HEXAGON_S2_asr_i_vw
    72U,	// HEXAGON_S2_asr_r_p
    73U,	// HEXAGON_S2_asr_r_p_acc
    73U,	// HEXAGON_S2_asr_r_p_and
    73U,	// HEXAGON_S2_asr_r_p_nac
    73U,	// HEXAGON_S2_asr_r_p_or
    72U,	// HEXAGON_S2_asr_r_r
    73U,	// HEXAGON_S2_asr_r_r_acc
    73U,	// HEXAGON_S2_asr_r_r_and
    73U,	// HEXAGON_S2_asr_r_r_nac
    73U,	// HEXAGON_S2_asr_r_r_or
    104U,	// HEXAGON_S2_asr_r_r_sat
    72U,	// HEXAGON_S2_asr_r_svw_trun
    72U,	// HEXAGON_S2_asr_r_vh
    72U,	// HEXAGON_S2_asr_r_vw
    0U,	// HEXAGON_S2_cl0
    0U,	// HEXAGON_S2_cl0p
    0U,	// HEXAGON_S2_cl1
    0U,	// HEXAGON_S2_cl1p
    0U,	// HEXAGON_S2_clb
    0U,	// HEXAGON_S2_clbnorm
    0U,	// HEXAGON_S2_clbp
    72U,	// HEXAGON_S2_clrbit_i
    72U,	// HEXAGON_S2_clrbit_r
    0U,	// HEXAGON_S2_ct0
    0U,	// HEXAGON_S2_ct1
    2696U,	// HEXAGON_S2_extractu
    72U,	// HEXAGON_S2_extractu_rp
    2696U,	// HEXAGON_S2_extractup
    72U,	// HEXAGON_S2_extractup_rp
    0U,	// HEXAGON_S2_lsl_r_p
    0U,	// HEXAGON_S2_lsl_r_p_acc
    0U,	// HEXAGON_S2_lsl_r_p_and
    0U,	// HEXAGON_S2_lsl_r_p_nac
    0U,	// HEXAGON_S2_lsl_r_p_or
    0U,	// HEXAGON_S2_lsl_r_r
    0U,	// HEXAGON_S2_lsl_r_r_acc
    0U,	// HEXAGON_S2_lsl_r_r_and
    0U,	// HEXAGON_S2_lsl_r_r_nac
    0U,	// HEXAGON_S2_lsl_r_r_or
    0U,	// HEXAGON_S2_lsl_r_vh
    0U,	// HEXAGON_S2_lsl_r_vw
    72U,	// HEXAGON_S2_lsr_i_p
    73U,	// HEXAGON_S2_lsr_i_p_acc
    73U,	// HEXAGON_S2_lsr_i_p_and
    73U,	// HEXAGON_S2_lsr_i_p_nac
    73U,	// HEXAGON_S2_lsr_i_p_or
    73U,	// HEXAGON_S2_lsr_i_p_xacc
    72U,	// HEXAGON_S2_lsr_i_r
    73U,	// HEXAGON_S2_lsr_i_r_acc
    73U,	// HEXAGON_S2_lsr_i_r_and
    73U,	// HEXAGON_S2_lsr_i_r_nac
    73U,	// HEXAGON_S2_lsr_i_r_or
    73U,	// HEXAGON_S2_lsr_i_r_xacc
    0U,	// HEXAGON_S2_lsr_i_vh
    0U,	// HEXAGON_S2_lsr_i_vw
    72U,	// HEXAGON_S2_lsr_r_p
    73U,	// HEXAGON_S2_lsr_r_p_acc
    73U,	// HEXAGON_S2_lsr_r_p_and
    73U,	// HEXAGON_S2_lsr_r_p_nac
    73U,	// HEXAGON_S2_lsr_r_p_or
    72U,	// HEXAGON_S2_lsr_r_r
    73U,	// HEXAGON_S2_lsr_r_r_acc
    73U,	// HEXAGON_S2_lsr_r_r_and
    73U,	// HEXAGON_S2_lsr_r_r_nac
    73U,	// HEXAGON_S2_lsr_r_r_or
    0U,	// HEXAGON_S2_lsr_r_vh
    0U,	// HEXAGON_S2_lsr_r_vw
    0U,	// HEXAGON_S2_packhl
    0U,	// HEXAGON_S2_parityp
    72U,	// HEXAGON_S2_setbit_i
    72U,	// HEXAGON_S2_setbit_r
    0U,	// HEXAGON_S2_shuffeb
    0U,	// HEXAGON_S2_shuffeh
    0U,	// HEXAGON_S2_shuffob
    0U,	// HEXAGON_S2_shuffoh
    0U,	// HEXAGON_S2_svsathb
    0U,	// HEXAGON_S2_svsathub
    72U,	// HEXAGON_S2_togglebit_i
    72U,	// HEXAGON_S2_togglebit_r
    72U,	// HEXAGON_S2_tstbit_i
    72U,	// HEXAGON_S2_tstbit_r
    73U,	// HEXAGON_S2_valignib
    73U,	// HEXAGON_S2_valignrb
    0U,	// HEXAGON_S2_vcrotate
    0U,	// HEXAGON_S2_vrndpackwh
    0U,	// HEXAGON_S2_vrndpackwhs
    0U,	// HEXAGON_S2_vsathb
    0U,	// HEXAGON_S2_vsathb_nopack
    0U,	// HEXAGON_S2_vsathub
    0U,	// HEXAGON_S2_vsathub_nopack
    0U,	// HEXAGON_S2_vsatwh
    0U,	// HEXAGON_S2_vsatwh_nopack
    0U,	// HEXAGON_S2_vsatwuh
    0U,	// HEXAGON_S2_vsatwuh_nopack
    0U,	// HEXAGON_S2_vsplatrb
    0U,	// HEXAGON_S2_vsplatrh
    0U,	// HEXAGON_S2_vsxtbh
    0U,	// HEXAGON_S2_vsxthw
    0U,	// HEXAGON_S2_vtrunehb
    0U,	// HEXAGON_S2_vtrunewh
    0U,	// HEXAGON_S2_vtrunohb
    0U,	// HEXAGON_S2_vtrunowh
    0U,	// HEXAGON_S2_vzxtbh
    0U,	// HEXAGON_S2_vzxthw
    73U,	// HEXAGON_S4_or_andi
    3904U,	// HEXAGON_S4_or_andix
    73U,	// HEXAGON_S4_or_ori
    0U,	// HEXAGON_S5_asrhub_rnd_sat_goodsyntax
    0U,	// HEXAGON_S5_asrhub_sat
    0U,	// HEXAGON_S5_popcountp
    216U,	// HEXAGON_S5_vasrhrnd_goodsyntax
    329U,	// HEXAGON_circ_ldd
    0U,	// HI
    0U,	// HI_jt
    1U,	// HI_label
    1U,	// HIi
    0U,	// Hexagon_A2_addpsat
    0U,	// Hexagon_A2_addsp
    0U,	// Hexagon_A2_maxp
    0U,	// Hexagon_A2_maxup
    72U,	// Hexagon_A4_andn
    0U,	// Hexagon_A4_combineir
    72U,	// Hexagon_A4_combineri
    72U,	// Hexagon_A4_orn
    72U,	// Hexagon_A4_rcmpeq
    72U,	// Hexagon_A4_rcmpeqi
    72U,	// Hexagon_A4_rcmpneq
    72U,	// Hexagon_A4_rcmpneqi
    72U,	// Hexagon_C2_bitsclr
    72U,	// Hexagon_C2_bitsclri
    0U,	// Hexagon_C2_bitsset
    88U,	// Hexagon_C4_and_and
    73U,	// Hexagon_C4_and_andn
    88U,	// Hexagon_C4_and_or
    73U,	// Hexagon_C4_and_orn
    72U,	// Hexagon_C4_cmplte
    72U,	// Hexagon_C4_cmpltei
    72U,	// Hexagon_C4_cmplteu
    0U,	// Hexagon_C4_fastcorner9
    0U,	// Hexagon_C4_fastcorner9_not
    88U,	// Hexagon_C4_or_and
    73U,	// Hexagon_C4_or_andn
    88U,	// Hexagon_C4_or_or
    73U,	// Hexagon_C4_or_orn
    72U,	// Hexagon_M2_mpysmi
    0U,	// Hexagon_M2_vradduh
    0U,	// Hexagon_M2_vrcmpys_acc_s1
    0U,	// Hexagon_M2_vrcmpys_s1
    0U,	// Hexagon_M2_vrcmpys_s1rp
    0U,	// Hexagon_M4_xor_xacc
    0U,	// Hexagon_S2_brev
    0U,	// Hexagon_S2_deinterleave
    4745U,	// Hexagon_S2_insert
    73U,	// Hexagon_S2_insert_rp
    4745U,	// Hexagon_S2_insertp
    73U,	// Hexagon_S2_insertp_rp
    0U,	// Hexagon_S2_interleave
    0U,	// Hexagon_S2_lfsp
    0U,	// Hexagon_S2_tableidxb_goodsyntax
    0U,	// Hexagon_S2_tableidxd_goodsyntax
    0U,	// Hexagon_S2_tableidxh_goodsyntax
    0U,	// Hexagon_S2_tableidxw_goodsyntax
    73U,	// Hexagon_S2_vspliceib
    73U,	// Hexagon_S2_vsplicerb
    321U,	// Hexagon_S4_addaddi
    72U,	// Hexagon_S4_andnp
    72U,	// Hexagon_S4_ornp
    84050U,	// Hexagon_S4_subaddi
    0U,	// J2_call
    0U,	// J2_callf
    0U,	// J2_callr
    0U,	// J2_callrf
    0U,	// J2_callrt
    0U,	// J2_callt
    0U,	// J2_jump
    0U,	// J2_jump_ext
    0U,	// J2_jump_extf
    0U,	// J2_jump_extfnew
    0U,	// J2_jump_extfnewpt
    0U,	// J2_jump_extt
    0U,	// J2_jump_exttnew
    0U,	// J2_jump_exttnewpt
    0U,	// J2_jump_noext
    0U,	// J2_jump_noextf
    0U,	// J2_jump_noextfnew
    0U,	// J2_jump_noextfnewpt
    0U,	// J2_jump_noextt
    0U,	// J2_jump_noexttnew
    0U,	// J2_jump_noexttnewpt
    0U,	// J2_jumpf
    0U,	// J2_jumpfnew
    0U,	// J2_jumpfnewpt
    0U,	// J2_jumpr
    0U,	// J2_jumprf
    0U,	// J2_jumprfnew
    0U,	// J2_jumprfnewpt
    0U,	// J2_jumprt
    0U,	// J2_jumprtnew
    0U,	// J2_jumprtnewpt
    0U,	// J2_jumpt
    0U,	// J2_jumptnew
    0U,	// J2_jumptnewpt
    0U,	// J2_loop0i
    0U,	// J2_loop0r
    0U,	// J2_loop1i
    0U,	// J2_loop1r
    0U,	// J2_ploop1si
    0U,	// J2_ploop1sr
    0U,	// J2_ploop2si
    0U,	// J2_ploop2sr
    0U,	// J2_ploop3si
    0U,	// J2_ploop3sr
    0U,	// J4_cmpeq_fp0_jump_nt
    0U,	// J4_cmpeq_fp0_jump_t
    0U,	// J4_cmpeq_fp1_jump_nt
    0U,	// J4_cmpeq_fp1_jump_t
    0U,	// J4_cmpeq_tp0_jump_nt
    0U,	// J4_cmpeq_tp0_jump_t
    0U,	// J4_cmpeq_tp1_jump_nt
    0U,	// J4_cmpeq_tp1_jump_t
    0U,	// J4_cmpeqi_fp0_jump_nt
    0U,	// J4_cmpeqi_fp0_jump_t
    0U,	// J4_cmpeqi_fp1_jump_nt
    0U,	// J4_cmpeqi_fp1_jump_t
    0U,	// J4_cmpeqi_tp0_jump_nt
    0U,	// J4_cmpeqi_tp0_jump_t
    0U,	// J4_cmpeqi_tp1_jump_nt
    0U,	// J4_cmpeqi_tp1_jump_t
    0U,	// J4_cmpeqn1_fp0_jump_nt
    0U,	// J4_cmpeqn1_fp0_jump_t
    0U,	// J4_cmpeqn1_fp1_jump_nt
    0U,	// J4_cmpeqn1_fp1_jump_t
    0U,	// J4_cmpeqn1_tp0_jump_nt
    0U,	// J4_cmpeqn1_tp0_jump_t
    0U,	// J4_cmpeqn1_tp1_jump_nt
    0U,	// J4_cmpeqn1_tp1_jump_t
    0U,	// J4_cmpgt_fp0_jump_nt
    0U,	// J4_cmpgt_fp0_jump_t
    0U,	// J4_cmpgt_fp1_jump_nt
    0U,	// J4_cmpgt_fp1_jump_t
    0U,	// J4_cmpgt_tp0_jump_nt
    0U,	// J4_cmpgt_tp0_jump_t
    0U,	// J4_cmpgt_tp1_jump_nt
    0U,	// J4_cmpgt_tp1_jump_t
    0U,	// J4_cmpgti_fp0_jump_nt
    0U,	// J4_cmpgti_fp0_jump_t
    0U,	// J4_cmpgti_fp1_jump_nt
    0U,	// J4_cmpgti_fp1_jump_t
    0U,	// J4_cmpgti_tp0_jump_nt
    0U,	// J4_cmpgti_tp0_jump_t
    0U,	// J4_cmpgti_tp1_jump_nt
    0U,	// J4_cmpgti_tp1_jump_t
    0U,	// J4_cmpgtn1_fp0_jump_nt
    0U,	// J4_cmpgtn1_fp0_jump_t
    0U,	// J4_cmpgtn1_fp1_jump_nt
    0U,	// J4_cmpgtn1_fp1_jump_t
    0U,	// J4_cmpgtn1_tp0_jump_nt
    0U,	// J4_cmpgtn1_tp0_jump_t
    0U,	// J4_cmpgtn1_tp1_jump_nt
    0U,	// J4_cmpgtn1_tp1_jump_t
    0U,	// J4_cmpgtu_fp0_jump_nt
    0U,	// J4_cmpgtu_fp0_jump_t
    0U,	// J4_cmpgtu_fp1_jump_nt
    0U,	// J4_cmpgtu_fp1_jump_t
    0U,	// J4_cmpgtu_tp0_jump_nt
    0U,	// J4_cmpgtu_tp0_jump_t
    0U,	// J4_cmpgtu_tp1_jump_nt
    0U,	// J4_cmpgtu_tp1_jump_t
    0U,	// J4_cmpgtui_fp0_jump_nt
    0U,	// J4_cmpgtui_fp0_jump_t
    0U,	// J4_cmpgtui_fp1_jump_nt
    0U,	// J4_cmpgtui_fp1_jump_t
    0U,	// J4_cmpgtui_tp0_jump_nt
    0U,	// J4_cmpgtui_tp0_jump_t
    0U,	// J4_cmpgtui_tp1_jump_nt
    0U,	// J4_cmpgtui_tp1_jump_t
    0U,	// J4_hintjumpr
    2U,	// J4_jumpseti
    0U,	// J4_jumpsetr
    0U,	// J4_tstbit0_fp0_jump_nt
    0U,	// J4_tstbit0_fp0_jump_t
    0U,	// J4_tstbit0_fp1_jump_nt
    0U,	// J4_tstbit0_fp1_jump_t
    0U,	// J4_tstbit0_tp0_jump_nt
    0U,	// J4_tstbit0_tp0_jump_t
    0U,	// J4_tstbit0_tp1_jump_nt
    0U,	// J4_tstbit0_tp1_jump_t
    0U,	// JMPret
    0U,	// JMPretf
    0U,	// JMPretfnew
    0U,	// JMPretfnewpt
    0U,	// JMPrett
    0U,	// JMPrettnew
    0U,	// JMPrettnewpt
    0U,	// L2_deallocframe
    2U,	// L2_loadrb_io
    2U,	// L2_loadrb_pbr
    2U,	// L2_loadrb_pci
    2U,	// L2_loadrb_pcr
    321U,	// L2_loadrb_pi
    2U,	// L2_loadrb_pr
    0U,	// L2_loadrbgp
    2U,	// L2_loadrd_io
    2U,	// L2_loadrd_pbr
    2U,	// L2_loadrd_pci
    2U,	// L2_loadrd_pcr
    321U,	// L2_loadrd_pi
    2U,	// L2_loadrd_pr
    0U,	// L2_loadrdgp
    2U,	// L2_loadrh_io
    2U,	// L2_loadrh_pbr
    2U,	// L2_loadrh_pci
    2U,	// L2_loadrh_pcr
    321U,	// L2_loadrh_pi
    2U,	// L2_loadrh_pr
    0U,	// L2_loadrhgp
    2U,	// L2_loadri_io
    2U,	// L2_loadri_pbr
    2U,	// L2_loadri_pci
    2U,	// L2_loadri_pcr
    321U,	// L2_loadri_pi
    2U,	// L2_loadri_pr
    0U,	// L2_loadrigp
    2U,	// L2_loadrub_io
    2U,	// L2_loadrub_pbr
    2U,	// L2_loadrub_pci
    2U,	// L2_loadrub_pcr
    321U,	// L2_loadrub_pi
    2U,	// L2_loadrub_pr
    0U,	// L2_loadrubgp
    2U,	// L2_loadruh_io
    2U,	// L2_loadruh_pbr
    2U,	// L2_loadruh_pci
    2U,	// L2_loadruh_pcr
    321U,	// L2_loadruh_pi
    2U,	// L2_loadruh_pr
    0U,	// L2_loadruhgp
    0U,	// L2_loadw_locked
    336U,	// L2_ploadrbf_io
    345U,	// L2_ploadrbf_pi
    336U,	// L2_ploadrbfnew_io
    345U,	// L2_ploadrbfnew_pi
    336U,	// L2_ploadrbt_io
    345U,	// L2_ploadrbt_pi
    336U,	// L2_ploadrbtnew_io
    345U,	// L2_ploadrbtnew_pi
    336U,	// L2_ploadrdf_io
    345U,	// L2_ploadrdf_pi
    336U,	// L2_ploadrdfnew_io
    345U,	// L2_ploadrdfnew_pi
    336U,	// L2_ploadrdt_io
    345U,	// L2_ploadrdt_pi
    336U,	// L2_ploadrdtnew_io
    345U,	// L2_ploadrdtnew_pi
    336U,	// L2_ploadrhf_io
    345U,	// L2_ploadrhf_pi
    336U,	// L2_ploadrhfnew_io
    345U,	// L2_ploadrhfnew_pi
    336U,	// L2_ploadrht_io
    345U,	// L2_ploadrht_pi
    336U,	// L2_ploadrhtnew_io
    345U,	// L2_ploadrhtnew_pi
    336U,	// L2_ploadrif_io
    345U,	// L2_ploadrif_pi
    336U,	// L2_ploadrifnew_io
    345U,	// L2_ploadrifnew_pi
    336U,	// L2_ploadrit_io
    345U,	// L2_ploadrit_pi
    336U,	// L2_ploadritnew_io
    345U,	// L2_ploadritnew_pi
    336U,	// L2_ploadrubf_io
    345U,	// L2_ploadrubf_pi
    336U,	// L2_ploadrubfnew_io
    345U,	// L2_ploadrubfnew_pi
    336U,	// L2_ploadrubt_io
    345U,	// L2_ploadrubt_pi
    336U,	// L2_ploadrubtnew_io
    345U,	// L2_ploadrubtnew_pi
    336U,	// L2_ploadruhf_io
    345U,	// L2_ploadruhf_pi
    336U,	// L2_ploadruhfnew_io
    345U,	// L2_ploadruhfnew_pi
    336U,	// L2_ploadruht_io
    345U,	// L2_ploadruht_pi
    336U,	// L2_ploadruhtnew_io
    345U,	// L2_ploadruhtnew_pi
    2U,	// L4_add_memopb_io
    2U,	// L4_add_memoph_io
    2U,	// L4_add_memopw_io
    3U,	// L4_and_memopb_io
    3U,	// L4_and_memoph_io
    3U,	// L4_and_memopw_io
    3U,	// L4_iadd_memopb_io
    3U,	// L4_iadd_memoph_io
    3U,	// L4_iadd_memopw_io
    3U,	// L4_iand_memopb_io
    3U,	// L4_iand_memoph_io
    3U,	// L4_iand_memopw_io
    3U,	// L4_ior_memopb_io
    3U,	// L4_ior_memoph_io
    3U,	// L4_ior_memopw_io
    3U,	// L4_isub_memopb_io
    3U,	// L4_isub_memoph_io
    3U,	// L4_isub_memopw_io
    0U,	// L4_loadd_locked
    0U,	// L4_loadrb_abs
    3U,	// L4_loadrb_rr
    0U,	// L4_loadrd_abs
    3U,	// L4_loadrd_rr
    0U,	// L4_loadrh_abs
    3U,	// L4_loadrh_rr
    0U,	// L4_loadri_abs
    3U,	// L4_loadri_rr
    0U,	// L4_loadrub_abs
    3U,	// L4_loadrub_rr
    0U,	// L4_loadruh_abs
    3U,	// L4_loadruh_rr
    3U,	// L4_or_memopb_io
    3U,	// L4_or_memoph_io
    3U,	// L4_or_memopw_io
    0U,	// L4_ploadrbf_abs
    352U,	// L4_ploadrbf_rr
    0U,	// L4_ploadrbfnew_abs
    352U,	// L4_ploadrbfnew_rr
    0U,	// L4_ploadrbt_abs
    352U,	// L4_ploadrbt_rr
    0U,	// L4_ploadrbtnew_abs
    352U,	// L4_ploadrbtnew_rr
    0U,	// L4_ploadrdf_abs
    352U,	// L4_ploadrdf_rr
    0U,	// L4_ploadrdfnew_abs
    352U,	// L4_ploadrdfnew_rr
    0U,	// L4_ploadrdt_abs
    352U,	// L4_ploadrdt_rr
    0U,	// L4_ploadrdtnew_abs
    352U,	// L4_ploadrdtnew_rr
    0U,	// L4_ploadrhf_abs
    352U,	// L4_ploadrhf_rr
    0U,	// L4_ploadrhfnew_abs
    352U,	// L4_ploadrhfnew_rr
    0U,	// L4_ploadrht_abs
    352U,	// L4_ploadrht_rr
    0U,	// L4_ploadrhtnew_abs
    352U,	// L4_ploadrhtnew_rr
    0U,	// L4_ploadrif_abs
    352U,	// L4_ploadrif_rr
    0U,	// L4_ploadrifnew_abs
    352U,	// L4_ploadrifnew_rr
    0U,	// L4_ploadrit_abs
    352U,	// L4_ploadrit_rr
    0U,	// L4_ploadritnew_abs
    352U,	// L4_ploadritnew_rr
    0U,	// L4_ploadrubf_abs
    352U,	// L4_ploadrubf_rr
    0U,	// L4_ploadrubfnew_abs
    352U,	// L4_ploadrubfnew_rr
    0U,	// L4_ploadrubt_abs
    352U,	// L4_ploadrubt_rr
    0U,	// L4_ploadrubtnew_abs
    352U,	// L4_ploadrubtnew_rr
    0U,	// L4_ploadruhf_abs
    352U,	// L4_ploadruhf_rr
    0U,	// L4_ploadruhfnew_abs
    352U,	// L4_ploadruhfnew_rr
    0U,	// L4_ploadruht_abs
    352U,	// L4_ploadruht_rr
    0U,	// L4_ploadruhtnew_abs
    352U,	// L4_ploadruhtnew_rr
    0U,	// L4_return
    0U,	// L4_return_f
    0U,	// L4_return_fnew_pnt
    0U,	// L4_return_fnew_pt
    0U,	// L4_return_t
    0U,	// L4_return_tnew_pnt
    0U,	// L4_return_tnew_pt
    3U,	// L4_sub_memopb_io
    3U,	// L4_sub_memoph_io
    3U,	// L4_sub_memopw_io
    4U,	// LDrib_abs_set_V4
    4U,	// LDrib_ind_lo_V4
    4U,	// LDrid_abs_set_V4
    0U,	// LDrid_f
    0U,	// LDrid_ind_lo_V4
    84U,	// LDrid_indexed_f
    4U,	// LDrih_abs_set_V4
    4U,	// LDrih_ind_lo_V4
    4U,	// LDriub_abs_set_V4
    4U,	// LDriub_ind_anyext_lo_V4
    4U,	// LDriub_ind_lo_V4
    4U,	// LDriuh_abs_set_V4
    4U,	// LDriuh_ind_anyext_lo_V4
    4U,	// LDriuh_ind_lo_V4
    4U,	// LDriw_abs_set_V4
    0U,	// LDriw_f
    4U,	// LDriw_ind_lo_V4
    84U,	// LDriw_indexed_f
    0U,	// LDriw_pred
    0U,	// LO
    0U,	// LO_jt
    1U,	// LO_label
    1U,	// LOi
    73U,	// M2_acci
    4U,	// M2_accii
    73U,	// M2_dpmpyss_acc_s0
    73U,	// M2_dpmpyss_nac_s0
    216U,	// M2_dpmpyss_rnd_s0
    72U,	// M2_dpmpyss_s0
    73U,	// M2_dpmpyuu_acc_s0
    73U,	// M2_dpmpyuu_nac_s0
    72U,	// M2_dpmpyuu_s0
    360U,	// M2_hmmpyh_rs1
    368U,	// M2_hmmpyh_s1
    376U,	// M2_hmmpyl_rs1
    384U,	// M2_hmmpyl_s1
    73U,	// M2_maci
    0U,	// M2_macsin
    4U,	// M2_macsip
    41U,	// M2_mpy_acc_hh_s0
    393U,	// M2_mpy_acc_hh_s1
    49U,	// M2_mpy_acc_hl_s0
    401U,	// M2_mpy_acc_hl_s1
    41U,	// M2_mpy_acc_lh_s0
    393U,	// M2_mpy_acc_lh_s1
    49U,	// M2_mpy_acc_ll_s0
    401U,	// M2_mpy_acc_ll_s1
    57U,	// M2_mpy_acc_sat_hh_s0
    369U,	// M2_mpy_acc_sat_hh_s1
    65U,	// M2_mpy_acc_sat_hl_s0
    385U,	// M2_mpy_acc_sat_hl_s1
    57U,	// M2_mpy_acc_sat_lh_s0
    369U,	// M2_mpy_acc_sat_lh_s1
    65U,	// M2_mpy_acc_sat_ll_s0
    385U,	// M2_mpy_acc_sat_ll_s1
    40U,	// M2_mpy_hh_s0
    392U,	// M2_mpy_hh_s1
    48U,	// M2_mpy_hl_s0
    400U,	// M2_mpy_hl_s1
    40U,	// M2_mpy_lh_s0
    392U,	// M2_mpy_lh_s1
    48U,	// M2_mpy_ll_s0
    400U,	// M2_mpy_ll_s1
    41U,	// M2_mpy_nac_hh_s0
    393U,	// M2_mpy_nac_hh_s1
    49U,	// M2_mpy_nac_hl_s0
    401U,	// M2_mpy_nac_hl_s1
    41U,	// M2_mpy_nac_lh_s0
    393U,	// M2_mpy_nac_lh_s1
    49U,	// M2_mpy_nac_ll_s0
    401U,	// M2_mpy_nac_ll_s1
    57U,	// M2_mpy_nac_sat_hh_s0
    369U,	// M2_mpy_nac_sat_hh_s1
    65U,	// M2_mpy_nac_sat_hl_s0
    385U,	// M2_mpy_nac_sat_hl_s1
    57U,	// M2_mpy_nac_sat_lh_s0
    369U,	// M2_mpy_nac_sat_lh_s1
    65U,	// M2_mpy_nac_sat_ll_s0
    385U,	// M2_mpy_nac_sat_ll_s1
    408U,	// M2_mpy_rnd_hh_s0
    416U,	// M2_mpy_rnd_hh_s1
    424U,	// M2_mpy_rnd_hl_s0
    432U,	// M2_mpy_rnd_hl_s1
    408U,	// M2_mpy_rnd_lh_s0
    416U,	// M2_mpy_rnd_lh_s1
    424U,	// M2_mpy_rnd_ll_s0
    432U,	// M2_mpy_rnd_ll_s1
    56U,	// M2_mpy_sat_hh_s0
    368U,	// M2_mpy_sat_hh_s1
    64U,	// M2_mpy_sat_hl_s0
    384U,	// M2_mpy_sat_hl_s1
    56U,	// M2_mpy_sat_lh_s0
    368U,	// M2_mpy_sat_lh_s1
    64U,	// M2_mpy_sat_ll_s0
    384U,	// M2_mpy_sat_ll_s1
    440U,	// M2_mpy_sat_rnd_hh_s0
    360U,	// M2_mpy_sat_rnd_hh_s1
    448U,	// M2_mpy_sat_rnd_hl_s0
    376U,	// M2_mpy_sat_rnd_hl_s1
    440U,	// M2_mpy_sat_rnd_lh_s0
    360U,	// M2_mpy_sat_rnd_lh_s1
    448U,	// M2_mpy_sat_rnd_ll_s0
    376U,	// M2_mpy_sat_rnd_ll_s1
    72U,	// M2_mpy_up
    456U,	// M2_mpy_up_s1_sat
    41U,	// M2_mpyd_acc_hh_s0
    393U,	// M2_mpyd_acc_hh_s1
    49U,	// M2_mpyd_acc_hl_s0
    401U,	// M2_mpyd_acc_hl_s1
    41U,	// M2_mpyd_acc_lh_s0
    393U,	// M2_mpyd_acc_lh_s1
    49U,	// M2_mpyd_acc_ll_s0
    401U,	// M2_mpyd_acc_ll_s1
    40U,	// M2_mpyd_hh_s0
    392U,	// M2_mpyd_hh_s1
    48U,	// M2_mpyd_hl_s0
    400U,	// M2_mpyd_hl_s1
    40U,	// M2_mpyd_lh_s0
    392U,	// M2_mpyd_lh_s1
    48U,	// M2_mpyd_ll_s0
    400U,	// M2_mpyd_ll_s1
    41U,	// M2_mpyd_nac_hh_s0
    393U,	// M2_mpyd_nac_hh_s1
    49U,	// M2_mpyd_nac_hl_s0
    401U,	// M2_mpyd_nac_hl_s1
    41U,	// M2_mpyd_nac_lh_s0
    393U,	// M2_mpyd_nac_lh_s1
    49U,	// M2_mpyd_nac_ll_s0
    401U,	// M2_mpyd_nac_ll_s1
    408U,	// M2_mpyd_rnd_hh_s0
    416U,	// M2_mpyd_rnd_hh_s1
    424U,	// M2_mpyd_rnd_hl_s0
    432U,	// M2_mpyd_rnd_hl_s1
    408U,	// M2_mpyd_rnd_lh_s0
    416U,	// M2_mpyd_rnd_lh_s1
    424U,	// M2_mpyd_rnd_ll_s0
    432U,	// M2_mpyd_rnd_ll_s1
    72U,	// M2_mpyi
    0U,	// M2_mpysin
    0U,	// M2_mpysip
    72U,	// M2_mpysmi
    0U,	// M2_mpysu_up
    41U,	// M2_mpyu_acc_hh_s0
    393U,	// M2_mpyu_acc_hh_s1
    49U,	// M2_mpyu_acc_hl_s0
    401U,	// M2_mpyu_acc_hl_s1
    41U,	// M2_mpyu_acc_lh_s0
    393U,	// M2_mpyu_acc_lh_s1
    49U,	// M2_mpyu_acc_ll_s0
    401U,	// M2_mpyu_acc_ll_s1
    40U,	// M2_mpyu_hh_s0
    392U,	// M2_mpyu_hh_s1
    48U,	// M2_mpyu_hl_s0
    400U,	// M2_mpyu_hl_s1
    40U,	// M2_mpyu_lh_s0
    392U,	// M2_mpyu_lh_s1
    48U,	// M2_mpyu_ll_s0
    400U,	// M2_mpyu_ll_s1
    41U,	// M2_mpyu_nac_hh_s0
    393U,	// M2_mpyu_nac_hh_s1
    49U,	// M2_mpyu_nac_hl_s0
    401U,	// M2_mpyu_nac_hl_s1
    41U,	// M2_mpyu_nac_lh_s0
    393U,	// M2_mpyu_nac_lh_s1
    49U,	// M2_mpyu_nac_ll_s0
    401U,	// M2_mpyu_nac_ll_s1
    72U,	// M2_mpyu_up
    41U,	// M2_mpyud_acc_hh_s0
    393U,	// M2_mpyud_acc_hh_s1
    49U,	// M2_mpyud_acc_hl_s0
    401U,	// M2_mpyud_acc_hl_s1
    41U,	// M2_mpyud_acc_lh_s0
    393U,	// M2_mpyud_acc_lh_s1
    49U,	// M2_mpyud_acc_ll_s0
    401U,	// M2_mpyud_acc_ll_s1
    40U,	// M2_mpyud_hh_s0
    392U,	// M2_mpyud_hh_s1
    48U,	// M2_mpyud_hl_s0
    400U,	// M2_mpyud_hl_s1
    40U,	// M2_mpyud_lh_s0
    392U,	// M2_mpyud_lh_s1
    48U,	// M2_mpyud_ll_s0
    400U,	// M2_mpyud_ll_s1
    41U,	// M2_mpyud_nac_hh_s0
    393U,	// M2_mpyud_nac_hh_s1
    49U,	// M2_mpyud_nac_hl_s0
    401U,	// M2_mpyud_nac_hl_s1
    41U,	// M2_mpyud_nac_lh_s0
    393U,	// M2_mpyud_nac_lh_s1
    49U,	// M2_mpyud_nac_ll_s0
    401U,	// M2_mpyud_nac_ll_s1
    0U,	// M2_mpyui
    73U,	// M2_nacci
    4U,	// M2_naccii
    0U,	// M2_subacc
    0U,	// M2_xor_xacc
    73U,	// M4_and_and
    73U,	// M4_and_andn
    0U,	// M4_and_or
    0U,	// M4_and_xor
    457U,	// M4_mac_up_s1_sat
    3904U,	// M4_mpyri_addi
    27788U,	// M4_mpyri_addr
    4U,	// M4_mpyri_addr_u2
    3672U,	// M4_mpyrr_addi
    3716U,	// M4_mpyrr_addr
    457U,	// M4_nac_up_s1_sat
    73U,	// M4_or_and
    73U,	// M4_or_andn
    73U,	// M4_or_or
    0U,	// M4_or_xor
    73U,	// M4_xor_and
    73U,	// M4_xor_andn
    0U,	// M4_xor_or
    0U,	// M4_xor_xacc
    72U,	// MPY_trsext
    0U,	// NOT_rr64
    72U,	// NTSTBIT_ri
    72U,	// NTSTBIT_rr
    72U,	// OR_ri
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    0U,	// RESTORE_DEALLOC_RET_JMP_V4
    0U,	// S2_addasl_rrri
    0U,	// S2_allocframe
    72U,	// S2_asl_i_p
    73U,	// S2_asl_i_p_acc
    73U,	// S2_asl_i_p_and
    73U,	// S2_asl_i_p_nac
    73U,	// S2_asl_i_p_or
    73U,	// S2_asl_i_p_xacc
    72U,	// S2_asl_i_r
    73U,	// S2_asl_i_r_acc
    73U,	// S2_asl_i_r_and
    73U,	// S2_asl_i_r_nac
    73U,	// S2_asl_i_r_or
    104U,	// S2_asl_i_r_sat
    73U,	// S2_asl_i_r_xacc
    72U,	// S2_asl_r_p
    73U,	// S2_asl_r_p_acc
    73U,	// S2_asl_r_p_and
    73U,	// S2_asl_r_p_nac
    73U,	// S2_asl_r_p_or
    73U,	// S2_asl_r_p_xor
    72U,	// S2_asl_r_r
    73U,	// S2_asl_r_r_acc
    73U,	// S2_asl_r_r_and
    73U,	// S2_asl_r_r_nac
    73U,	// S2_asl_r_r_or
    104U,	// S2_asl_r_r_sat
    72U,	// S2_asr_i_p
    73U,	// S2_asr_i_p_acc
    73U,	// S2_asr_i_p_and
    73U,	// S2_asr_i_p_nac
    73U,	// S2_asr_i_p_or
    216U,	// S2_asr_i_p_rnd
    72U,	// S2_asr_i_r
    73U,	// S2_asr_i_r_acc
    73U,	// S2_asr_i_r_and
    73U,	// S2_asr_i_r_nac
    73U,	// S2_asr_i_r_or
    216U,	// S2_asr_i_r_rnd
    72U,	// S2_asr_r_p
    73U,	// S2_asr_r_p_acc
    73U,	// S2_asr_r_p_and
    73U,	// S2_asr_r_p_nac
    73U,	// S2_asr_r_p_or
    0U,	// S2_asr_r_p_xor
    72U,	// S2_asr_r_r
    73U,	// S2_asr_r_r_acc
    73U,	// S2_asr_r_r_and
    73U,	// S2_asr_r_r_nac
    73U,	// S2_asr_r_r_or
    104U,	// S2_asr_r_r_sat
    0U,	// S2_brevp
    0U,	// S2_cl0
    0U,	// S2_cl0p
    0U,	// S2_cl1
    0U,	// S2_cl1p
    0U,	// S2_clb
    0U,	// S2_clbnorm
    0U,	// S2_clbp
    72U,	// S2_clrbit_i
    72U,	// S2_clrbit_r
    0U,	// S2_ct0
    0U,	// S2_ct0p
    0U,	// S2_ct1
    0U,	// S2_ct1p
    0U,	// S2_deinterleave
    2696U,	// S2_extractu
    72U,	// S2_extractu_rp
    2696U,	// S2_extractup
    72U,	// S2_extractup_rp
    4745U,	// S2_insert
    73U,	// S2_insert_rp
    4745U,	// S2_insertp
    73U,	// S2_insertp_rp
    0U,	// S2_interleave
    0U,	// S2_lfsp
    0U,	// S2_lsl_r_p
    0U,	// S2_lsl_r_p_acc
    0U,	// S2_lsl_r_p_and
    0U,	// S2_lsl_r_p_nac
    0U,	// S2_lsl_r_p_or
    0U,	// S2_lsl_r_p_xor
    0U,	// S2_lsl_r_r
    0U,	// S2_lsl_r_r_acc
    0U,	// S2_lsl_r_r_and
    0U,	// S2_lsl_r_r_nac
    0U,	// S2_lsl_r_r_or
    72U,	// S2_lsr_i_p
    73U,	// S2_lsr_i_p_acc
    73U,	// S2_lsr_i_p_and
    73U,	// S2_lsr_i_p_nac
    73U,	// S2_lsr_i_p_or
    73U,	// S2_lsr_i_p_xacc
    72U,	// S2_lsr_i_r
    73U,	// S2_lsr_i_r_acc
    73U,	// S2_lsr_i_r_and
    73U,	// S2_lsr_i_r_nac
    73U,	// S2_lsr_i_r_or
    73U,	// S2_lsr_i_r_xacc
    72U,	// S2_lsr_r_p
    73U,	// S2_lsr_r_p_acc
    73U,	// S2_lsr_r_p_and
    73U,	// S2_lsr_r_p_nac
    73U,	// S2_lsr_r_p_or
    73U,	// S2_lsr_r_p_xor
    72U,	// S2_lsr_r_r
    73U,	// S2_lsr_r_r_acc
    73U,	// S2_lsr_r_r_and
    73U,	// S2_lsr_r_r_nac
    73U,	// S2_lsr_r_r_or
    0U,	// S2_packhl
    0U,	// S2_parityp
    119908U,	// S2_pstorerbf_io
    103745U,	// S2_pstorerbf_pi
    103745U,	// S2_pstorerbfnew_pi
    152676U,	// S2_pstorerbnewf_io
    136513U,	// S2_pstorerbnewf_pi
    136513U,	// S2_pstorerbnewfnew_pi
    152676U,	// S2_pstorerbnewt_io
    136513U,	// S2_pstorerbnewt_pi
    136513U,	// S2_pstorerbnewtnew_pi
    119908U,	// S2_pstorerbt_io
    103745U,	// S2_pstorerbt_pi
    103745U,	// S2_pstorerbtnew_pi
    119908U,	// S2_pstorerdf_io
    103745U,	// S2_pstorerdf_pi
    103745U,	// S2_pstorerdfnew_pi
    119908U,	// S2_pstorerdt_io
    103745U,	// S2_pstorerdt_pi
    103745U,	// S2_pstorerdtnew_pi
    185444U,	// S2_pstorerff_io
    169281U,	// S2_pstorerff_pi
    169281U,	// S2_pstorerffnew_pi
    185444U,	// S2_pstorerft_io
    169281U,	// S2_pstorerft_pi
    169281U,	// S2_pstorerftnew_pi
    119908U,	// S2_pstorerhf_io
    103745U,	// S2_pstorerhf_pi
    103745U,	// S2_pstorerhfnew_pi
    152676U,	// S2_pstorerhnewf_io
    136513U,	// S2_pstorerhnewf_pi
    136513U,	// S2_pstorerhnewfnew_pi
    152676U,	// S2_pstorerhnewt_io
    136513U,	// S2_pstorerhnewt_pi
    136513U,	// S2_pstorerhnewtnew_pi
    119908U,	// S2_pstorerht_io
    103745U,	// S2_pstorerht_pi
    103745U,	// S2_pstorerhtnew_pi
    119908U,	// S2_pstorerif_io
    103745U,	// S2_pstorerif_pi
    103745U,	// S2_pstorerifnew_pi
    152676U,	// S2_pstorerinewf_io
    136513U,	// S2_pstorerinewf_pi
    136513U,	// S2_pstorerinewfnew_pi
    152676U,	// S2_pstorerinewt_io
    136513U,	// S2_pstorerinewt_pi
    136513U,	// S2_pstorerinewtnew_pi
    119908U,	// S2_pstorerit_io
    103745U,	// S2_pstorerit_pi
    103745U,	// S2_pstoreritnew_pi
    72U,	// S2_setbit_i
    72U,	// S2_setbit_r
    124U,	// S2_storerb_io
    0U,	// S2_storerb_pbr
    0U,	// S2_storerb_pci
    0U,	// S2_storerb_pcr
    0U,	// S2_storerb_pi
    0U,	// S2_storerb_pr
    0U,	// S2_storerbabs
    0U,	// S2_storerbgp
    468U,	// S2_storerbnew_io
    0U,	// S2_storerbnew_pi
    0U,	// S2_storerbnew_pr
    0U,	// S2_storerbnewabs
    0U,	// S2_storerbnewgp
    124U,	// S2_storerd_io
    0U,	// S2_storerd_pbr
    0U,	// S2_storerd_pci
    0U,	// S2_storerd_pcr
    0U,	// S2_storerd_pi
    0U,	// S2_storerd_pr
    0U,	// S2_storerdabs
    0U,	// S2_storerdgp
    476U,	// S2_storerf_io
    0U,	// S2_storerf_pbr
    0U,	// S2_storerf_pci
    0U,	// S2_storerf_pcr
    0U,	// S2_storerf_pi
    0U,	// S2_storerf_pr
    0U,	// S2_storerfabs
    0U,	// S2_storerfgp
    124U,	// S2_storerh_io
    0U,	// S2_storerh_pbr
    0U,	// S2_storerh_pci
    0U,	// S2_storerh_pcr
    0U,	// S2_storerh_pi
    0U,	// S2_storerh_pr
    0U,	// S2_storerhabs
    0U,	// S2_storerhgp
    468U,	// S2_storerhnew_io
    0U,	// S2_storerhnew_pi
    0U,	// S2_storerhnew_pr
    0U,	// S2_storerhnewabs
    0U,	// S2_storerhnewgp
    124U,	// S2_storeri_io
    0U,	// S2_storeri_pbr
    0U,	// S2_storeri_pci
    0U,	// S2_storeri_pcr
    0U,	// S2_storeri_pi
    0U,	// S2_storeri_pr
    0U,	// S2_storeriabs
    0U,	// S2_storerigp
    468U,	// S2_storerinew_io
    0U,	// S2_storerinew_pi
    0U,	// S2_storerinew_pr
    0U,	// S2_storerinewabs
    0U,	// S2_storerinewgp
    0U,	// S2_tableidxb
    0U,	// S2_tableidxd
    0U,	// S2_tableidxh
    0U,	// S2_tableidxw
    72U,	// S2_togglebit_i
    72U,	// S2_togglebit_r
    72U,	// S2_tstbit_i
    72U,	// S2_tstbit_r
    3697U,	// S4_addaddi
    0U,	// S4_addi_asl_ri
    0U,	// S4_addi_lsr_ri
    0U,	// S4_andi_asl_ri
    0U,	// S4_andi_lsr_ri
    0U,	// S4_clbaddi
    0U,	// S4_clbpaddi
    0U,	// S4_clbpnorm
    2696U,	// S4_extract
    72U,	// S4_extract_rp
    2696U,	// S4_extractp
    72U,	// S4_extractp_rp
    0U,	// S4_lsli
    72U,	// S4_ntstbit_i
    72U,	// S4_ntstbit_r
    4U,	// S4_or_andi
    3696U,	// S4_or_andix
    4U,	// S4_or_ori
    0U,	// S4_ori_asl_ri
    0U,	// S4_ori_lsr_ri
    0U,	// S4_parity
    0U,	// S4_pstorerbf_abs
    124U,	// S4_pstorerbf_rr
    0U,	// S4_pstorerbfnew_abs
    119908U,	// S4_pstorerbfnew_io
    124U,	// S4_pstorerbfnew_rr
    0U,	// S4_pstorerbnewf_abs
    468U,	// S4_pstorerbnewf_rr
    0U,	// S4_pstorerbnewfnew_abs
    152676U,	// S4_pstorerbnewfnew_io
    468U,	// S4_pstorerbnewfnew_rr
    0U,	// S4_pstorerbnewt_abs
    468U,	// S4_pstorerbnewt_rr
    0U,	// S4_pstorerbnewtnew_abs
    152676U,	// S4_pstorerbnewtnew_io
    468U,	// S4_pstorerbnewtnew_rr
    0U,	// S4_pstorerbt_abs
    124U,	// S4_pstorerbt_rr
    0U,	// S4_pstorerbtnew_abs
    119908U,	// S4_pstorerbtnew_io
    124U,	// S4_pstorerbtnew_rr
    0U,	// S4_pstorerdf_abs
    124U,	// S4_pstorerdf_rr
    0U,	// S4_pstorerdfnew_abs
    119908U,	// S4_pstorerdfnew_io
    124U,	// S4_pstorerdfnew_rr
    0U,	// S4_pstorerdt_abs
    124U,	// S4_pstorerdt_rr
    0U,	// S4_pstorerdtnew_abs
    119908U,	// S4_pstorerdtnew_io
    124U,	// S4_pstorerdtnew_rr
    0U,	// S4_pstorerff_abs
    476U,	// S4_pstorerff_rr
    0U,	// S4_pstorerffnew_abs
    185444U,	// S4_pstorerffnew_io
    476U,	// S4_pstorerffnew_rr
    0U,	// S4_pstorerft_abs
    476U,	// S4_pstorerft_rr
    0U,	// S4_pstorerftnew_abs
    185444U,	// S4_pstorerftnew_io
    476U,	// S4_pstorerftnew_rr
    0U,	// S4_pstorerhf_abs
    124U,	// S4_pstorerhf_rr
    0U,	// S4_pstorerhfnew_abs
    119908U,	// S4_pstorerhfnew_io
    124U,	// S4_pstorerhfnew_rr
    0U,	// S4_pstorerhnewf_abs
    468U,	// S4_pstorerhnewf_rr
    0U,	// S4_pstorerhnewfnew_abs
    152676U,	// S4_pstorerhnewfnew_io
    468U,	// S4_pstorerhnewfnew_rr
    0U,	// S4_pstorerhnewt_abs
    468U,	// S4_pstorerhnewt_rr
    0U,	// S4_pstorerhnewtnew_abs
    152676U,	// S4_pstorerhnewtnew_io
    468U,	// S4_pstorerhnewtnew_rr
    0U,	// S4_pstorerht_abs
    124U,	// S4_pstorerht_rr
    0U,	// S4_pstorerhtnew_abs
    119908U,	// S4_pstorerhtnew_io
    124U,	// S4_pstorerhtnew_rr
    0U,	// S4_pstorerif_abs
    124U,	// S4_pstorerif_rr
    0U,	// S4_pstorerifnew_abs
    119908U,	// S4_pstorerifnew_io
    124U,	// S4_pstorerifnew_rr
    0U,	// S4_pstorerinewf_abs
    468U,	// S4_pstorerinewf_rr
    0U,	// S4_pstorerinewfnew_abs
    152676U,	// S4_pstorerinewfnew_io
    468U,	// S4_pstorerinewfnew_rr
    0U,	// S4_pstorerinewt_abs
    468U,	// S4_pstorerinewt_rr
    0U,	// S4_pstorerinewtnew_abs
    152676U,	// S4_pstorerinewtnew_io
    468U,	// S4_pstorerinewtnew_rr
    0U,	// S4_pstorerit_abs
    124U,	// S4_pstorerit_rr
    0U,	// S4_pstoreritnew_abs
    119908U,	// S4_pstoreritnew_io
    124U,	// S4_pstoreritnew_rr
    5U,	// S4_storeirb_io
    5716U,	// S4_storeirbf_io
    5716U,	// S4_storeirbfnew_io
    5716U,	// S4_storeirbt_io
    5716U,	// S4_storeirbtnew_io
    5U,	// S4_storeirh_io
    5716U,	// S4_storeirhf_io
    5716U,	// S4_storeirhfnew_io
    5716U,	// S4_storeirht_io
    5716U,	// S4_storeirhtnew_io
    5U,	// S4_storeiri_io
    5716U,	// S4_storeirif_io
    5716U,	// S4_storeirifnew_io
    5716U,	// S4_storeirit_io
    5716U,	// S4_storeiritnew_io
    0U,	// S4_storerb_rr
    0U,	// S4_storerbnew_rr
    0U,	// S4_storerd_rr
    0U,	// S4_storerf_rr
    0U,	// S4_storerh_rr
    0U,	// S4_storerhnew_rr
    0U,	// S4_storeri_rr
    0U,	// S4_storerinew_rr
    215138U,	// S4_subaddi
    5U,	// S4_subi_asl_ri
    5U,	// S4_subi_lsr_ri
    0U,	// S5_popcountp
    0U,	// SAVE_REGISTERS_CALL_V4
    0U,	// SI_to_SXTHI_asrh
    0U,	// STrib_abs_set_V4
    0U,	// STrib_shl_V4
    0U,	// STrib_shl_nv_V4
    0U,	// STrid_abs_set_V4
    0U,	// STrid_f
    124U,	// STrid_indexed_f
    0U,	// STrid_shl_V4
    0U,	// STrih_abs_set_V4
    5U,	// STrih_offset_ext_V4
    0U,	// STrih_shl_V4
    0U,	// STrih_shl_nv_V4
    0U,	// STriw_abs_set_V4
    0U,	// STriw_f
    124U,	// STriw_indexed_f
    5U,	// STriw_offset_ext_V4
    0U,	// STriw_pred
    0U,	// STriw_pred_V4
    0U,	// STriw_shl_V4
    0U,	// STriw_shl_nv_V4
    0U,	// SUB_ri
    0U,	// TCRETURNR
    0U,	// TCRETURNtext
    0U,	// TCRETURNtg
    0U,	// TFRI64_V4
    0U,	// TFRI_V4
    120U,	// TFRI_cNotPt_V4
    0U,	// TFRI_cNotPt_f
    120U,	// TFRI_cPt_V4
    120U,	// TFRI_cPt_f
    120U,	// TFRI_cdnNotPt_V4
    120U,	// TFRI_cdnPt_V4
    0U,	// TFRI_f
    0U,	// TFR_FI
    0U,	// TFR_PdFalse
    0U,	// TFR_condset_ii
    0U,	// TFR_condset_ii_f
    0U,	// TFR_condset_ir
    0U,	// TFR_condset_ir_f
    0U,	// TFR_condset_ri
    0U,	// TFR_condset_ri_f
    0U,	// TFR_condset_rr64_f
    0U,	// TFR_condset_rr_f
    0U,	// TSTBIT0_f_Jumpnv_nt_V4
    0U,	// TSTBIT0_f_Jumpnv_t_V4
    0U,	// TSTBIT0_t_Jumpnv_nt_V4
    0U,	// TSTBIT0_t_Jumpnv_t_V4
    73U,	// VALIGN_rrp
    0U,	// VMUX_prr64
    73U,	// VSPLICE_rrp
    0U,	// Y2_dcfetchbo
    0U,	// Y4_trace
    0U,	// fADD64_rr
    0U,	// fADD_rr
    0U,	// fMUL64_rr
    0U,	// fMUL_rr
    0U,	// fSUB64_rr
    0U,	// fSUB_rr
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 6 */ 'j', 'u', 'm', 'p', 32, 0,
  /* 12 */ 'c', 'a', 'l', 'l', 'r', 32, 0,
  /* 19 */ 'j', 'u', 'm', 'p', 'r', 32, 0,
  /* 26 */ 'i', 'f', 32, '(', '!', 0,
  /* 32 */ 'i', 'f', '(', '!', 0,
  /* 37 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', '"', 0,
  /* 62 */ 'j', 'u', 'm', 'p', 32, '#', 0,
  /* 69 */ 'j', 'u', 'm', 'p', 32, '#', '#', 0,
  /* 77 */ 'm', 'e', 'm', 'b', '(', '#', '#', 0,
  /* 85 */ 'm', 'e', 'm', 'd', '(', '#', '#', 0,
  /* 93 */ 'm', 'e', 'm', 'h', '(', '#', '#', 0,
  /* 101 */ 'm', 'e', 'm', 'w', '(', '#', '#', 0,
  /* 109 */ 'm', 'e', 'm', 'b', '(', '#', 0,
  /* 116 */ 'm', 'e', 'm', 'd', '(', '#', 0,
  /* 123 */ 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', '(', '#', 0,
  /* 136 */ 'm', 'e', 'm', 'h', '(', '#', 0,
  /* 143 */ 'i', 'm', 'm', 'e', 'x', 't', '(', '#', 0,
  /* 152 */ 'm', 'e', 'm', 'w', '(', '#', 0,
  /* 159 */ 'i', 'f', 32, '(', 0,
  /* 164 */ 'p', '3', 32, '=', 32, 's', 'p', '1', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 179 */ 'p', '3', 32, '=', 32, 's', 'p', '2', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 194 */ 'p', '3', 32, '=', 32, 's', 'p', '3', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 209 */ 'l', 'o', 'o', 'p', '1', '(', 0,
  /* 216 */ 'm', 'e', 'm', 'b', '(', 0,
  /* 222 */ 'm', 'e', 'm', 'd', '(', 0,
  /* 228 */ 't', 'r', 'a', 'c', 'e', '(', 0,
  /* 235 */ 'i', 'f', '(', 0,
  /* 239 */ 'd', 'c', 'f', 'e', 't', 'c', 'h', '(', 0,
  /* 248 */ 'm', 'e', 'm', 'h', '(', 0,
  /* 254 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 267 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 280 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 293 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 305 */ 'h', 'i', 'n', 't', 'j', 'r', '(', 0,
  /* 313 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 326 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 339 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 352 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 364 */ 'p', '0', 32, '=', 32, 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 377 */ 'p', '1', 32, '=', 32, 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 390 */ 'i', 'f', 32, '(', '!', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 403 */ 'i', 'f', 32, '(', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 415 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 429 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 443 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 457 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 470 */ 'm', 'e', 'm', 'w', '(', 0,
  /* 476 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '0', 0,
  /* 486 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '1', 0,
  /* 496 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 509 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 516 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 526 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 541 */ 'S', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'e', 'v', 'e', 'r', 32, 'b', 'e', 32, 'e', 'm', 'i', 't', 't', 'e', 'd', 0,
  /* 565 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', 0,
  /* 578 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', 0,
  /* 593 */ 'n', 'o', 'p', 0,
  /* 597 */ 'b', 'a', 'r', 'r', 'i', 'e', 'r', 0,
  /* 605 */ 'E', 'r', 'r', 'o', 'r', ';', 32, 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 1023)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 10) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, A2_nop, ADJCALLSTACKD...
    return;
    break;
  case 1:
    // A2_abs, A2_absp, A2_abssat, A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // A2_paddf, A2_paddfnew, A2_paddt, A2_paddtnew, A2_pandf, A2_pandfnew, A...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // A4_ext, S2_allocframe, S2_storerbabs, S2_storerbnewabs, S2_storerbnewg...
    printImmOperand(MI, 0, O); 
    break;
  case 4:
    // A4_ext_g, S2_storerbgp, S2_storerdgp, S2_storerfgp, S2_storerhgp, S2_s...
    printGlobalOperand(MI, 0, O); 
    break;
  case 5:
    // L2_ploadrbf_pi, L2_ploadrbfnew_pi, L2_ploadrbt_pi, L2_ploadrbtnew_pi, ...
    printOperand(MI, 2, O); 
    break;
  case 6:
    // STrid_f, STriw_f
    printMEMriOperand(MI, 0, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 9 bits for 418 unique commands.
  switch ((Bits >> 13) & 511) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_abs, A2_absp, A2_abssat, HEXAGON_A2_abs, HEXAGON_A2_absp, HEXAGON_A...
    O << " = abs("; 
    printOperand(MI, 1, O); 
    break;
  case 1:
    // A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_lh, A2_addh_h16_ll...
    O << " = add("; 
    break;
  case 2:
    // A2_and, A2_andp, A4_andn, A4_andnp, AND_ri, C2_and, C2_andn, C4_and_an...
    O << " = and("; 
    printOperand(MI, 1, O); 
    break;
  case 3:
    // A2_aslh, HEXAGON_A2_aslh
    O << " = aslh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 4:
    // A2_asrh, HEXAGON_A2_asrh, SI_to_SXTHI_asrh
    O << " = asrh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 5:
    // A2_combine_hh, A2_combine_hl, A2_combine_lh, A2_combine_ll, A2_combine...
    O << " = combine("; 
    printOperand(MI, 1, O); 
    break;
  case 6:
    // A2_combineii, A4_combineii, A4_combineir, HEXAGON_A2_combineii, Hexago...
    O << " = combine(#"; 
    break;
  case 7:
    // A2_max, A2_maxp, HEXAGON_A2_max, Hexagon_A2_maxp
    O << " = max("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // A2_maxu, A2_maxup, HEXAGON_A2_maxu, Hexagon_A2_maxup
    O << " = maxu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 9:
    // A2_min, A2_minp, HEXAGON_A2_min
    O << " = min("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 10:
    // A2_minu, A2_minup, HEXAGON_A2_minu
    O << " = minu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 11:
    // A2_negp, A2_negsat, HEXAGON_A2_neg, HEXAGON_A2_negp, HEXAGON_A2_negsat
    O << " = neg("; 
    printOperand(MI, 1, O); 
    break;
  case 12:
    // A2_notp, C2_not, HEXAGON_A2_not, HEXAGON_A2_notp, HEXAGON_C2_not, NOT_...
    O << " = not("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // A2_or, A2_orp, A4_orn, A4_ornp, C2_or, C2_orn, C4_or_and, C4_or_andn, ...
    O << " = or("; 
    printOperand(MI, 1, O); 
    break;
  case 14:
    // A2_paddf, A2_paddt, A2_pandf, A2_pandt, A2_porf, A2_port, A2_psubf, A2...
    O << ") "; 
    printOperand(MI, 0, O); 
    break;
  case 15:
    // A2_paddfnew, A2_paddtnew, A2_pandfnew, A2_pandtnew, A2_porfnew, A2_por...
    O << ".new) "; 
    printOperand(MI, 0, O); 
    break;
  case 16:
    // A2_sat, HEXAGON_A2_sat
    O << " = sat("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 17:
    // A2_satb, HEXAGON_A2_satb
    O << " = satb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 18:
    // A2_sath, HEXAGON_A2_sath
    O << " = sath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 19:
    // A2_satub, HEXAGON_A2_satub
    O << " = satub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 20:
    // A2_satuh, HEXAGON_A2_satuh
    O << " = satuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 21:
    // A2_sub, A2_subh_h16_hh, A2_subh_h16_hl, A2_subh_h16_lh, A2_subh_h16_ll...
    O << " = sub("; 
    break;
  case 22:
    // A2_swiz, HEXAGON_A2_swiz
    O << " = swiz("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 23:
    // A2_sxtb, HEXAGON_A2_sxtb
    O << " = sxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 24:
    // A2_sxth, HEXAGON_A2_sxth
    O << " = sxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 25:
    // A2_sxtw, HEXAGON_A2_sxtw
    O << " = sxtw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 26:
    // A2_tfr, A2_tfrcrr, A2_tfrp, A2_tfrrcr, ARGEXTEND, C2_tfrpr, C2_tfrrp, ...
    O << " = "; 
    printOperand(MI, 1, O); 
    break;
  case 27:
    // A2_tfrih, HEXAGON_A2_tfrih
    O << ".h = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 28:
    // A2_tfril, HEXAGON_A2_tfril
    O << ".l = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 29:
    // A2_tfrpi, A2_tfrsi, HEXAGON_A2_tfrpi, HEXAGON_A2_tfrsi, J4_jumpseti, T...
    O << " = #"; 
    break;
  case 30:
    // A2_xor, A2_xorp, C2_xor, HEXAGON_A2_xor, HEXAGON_A2_xorp, HEXAGON_C2_x...
    O << " = xor("; 
    break;
  case 31:
    // A2_zxtb, HEXAGON_A2_zxtb
    O << " = zxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 32:
    // A2_zxth, HEXAGON_A2_zxth
    O << " = zxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 33:
    // A4_bitsplit, A4_bitspliti
    O << " = bitsplit("; 
    printOperand(MI, 1, O); 
    break;
  case 34:
    // A4_boundscheck
    O << "=boundscheck("; 
    printOperand(MI, 1, O); 
    O << ','; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 35:
    // A4_boundscheck_hi, A4_boundscheck_lo
    O << " = boundscheck("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 36:
    // A4_cmpbeq, A4_cmpbeqi, CMPbEQri_V4, CMPbEQrr_sbsb_V4, CMPbEQrr_ubub_V4
    O << " = cmpb.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 37:
    // A4_cmpbgt, A4_cmpbgti, CMPbGTrr_V4
    O << " = cmpb.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 38:
    // A4_cmpbgtu, A4_cmpbgtui, CMPbGTUri_V4, CMPbGTUrr_V4
    O << " = cmpb.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 39:
    // A4_cmpheq, A4_cmpheqi, CMPhEQri_V4, CMPhEQrr_shl_V4, CMPhEQrr_xor_V4
    O << " = cmph.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 40:
    // A4_cmphgt, A4_cmphgti, CMPhGTrr_shl_V4
    O << " = cmph.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 41:
    // A4_cmphgtu, A4_cmphgtui, CMPhGTUri_V4, CMPhGTUrr_V4
    O << " = cmph.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 42:
    // A4_cround_ri, A4_cround_rr, HEXAGON_A4_cround_ri, HEXAGON_A4_cround_rr
    O << " = cround("; 
    printOperand(MI, 1, O); 
    break;
  case 43:
    // A4_ext, A4_ext_b, A4_ext_c, A4_ext_g, J4_hintjumpr, S2_allocframe, Y4_...
    O << ')'; 
    return;
    break;
  case 44:
    // A4_modwrapu, HEXAGON_A4_modwrapu
    O << " = modwrap("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 45:
    // A4_rcmpeq, A4_rcmpeqi, C2_cmpeq, C2_cmpeqi, C2_cmpeqp, HEXAGON_C2_cmpe...
    O << " = cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 46:
    // A4_rcmpneq, A4_rcmpneqi, C4_cmpneq, C4_cmpneqi, CMPnotEQ_rr, Hexagon_A...
    O << " = !cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 47:
    // A4_round_ri, A4_round_ri_sat, A4_round_rr, A4_round_rr_sat, HEXAGON_A4...
    O << " = round("; 
    printOperand(MI, 1, O); 
    break;
  case 48:
    // A4_tlbmatch
    O << " = tlbmatch("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 49:
    // C2_all8, HEXAGON_C2_all8
    O << " = all8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 50:
    // C2_any8, HEXAGON_C2_any8
    O << " = any8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 51:
    // C2_bitsclr, C2_bitsclri, Hexagon_C2_bitsclr, Hexagon_C2_bitsclri
    O << " = bitsclr("; 
    printOperand(MI, 1, O); 
    break;
  case 52:
    // C2_bitsset, Hexagon_C2_bitsset
    O << " = bitsset("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 53:
    // C2_cmpgt, C2_cmpgti, C2_cmpgtp, HEXAGON_C2_cmpgt, HEXAGON_C2_cmpgti, H...
    O << " = cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 54:
    // C2_cmpgtu, C2_cmpgtui, C2_cmpgtup, HEXAGON_C2_cmpgtu, HEXAGON_C2_cmpgt...
    O << " = cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 55:
    // C2_mask, HEXAGON_C2_mask
    O << " = mask("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 56:
    // C2_mux, C2_muxii, C2_muxir, C2_muxri, HEXAGON_C2_mux, HEXAGON_C2_muxii...
    O << " = mux("; 
    printOperand(MI, 1, O); 
    break;
  case 57:
    // C2_vitpack, HEXAGON_C2_vitpack
    O << " = vitpack("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 58:
    // C4_addipc
    O << " = add(pc, #"; 
    printExtOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 59:
    // C4_cmplte, C4_cmpltei, CMPnotGT_rr, Hexagon_C4_cmplte, Hexagon_C4_cmpl...
    O << " = !cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 60:
    // C4_cmplteu, C4_cmplteui, CMPnotGTU_rr, Hexagon_C4_cmplteu
    O << " = !cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 61:
    // C4_fastcorner9, HEXAGON_C4_fastcorner9, Hexagon_C4_fastcorner9
    O << " = fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 62:
    // C4_fastcorner9_not, HEXAGON_C4_fastcorner9_not, Hexagon_C4_fastcorner9...
    O << " = !fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 63:
    // C4_nbitsclr, C4_nbitsclri
    O << " = !bitsclr("; 
    printOperand(MI, 1, O); 
    break;
  case 64:
    // C4_nbitsset
    O << " = !bitsset("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 65:
    // CALL, CALLRv3, EH_RETURN_JMPR, J2_call, J2_callr, J2_jump, J2_jump_ext...
    return;
    break;
  case 66:
    // CMPEQn1_f_Jumpnv_nt_V4, CMPEQn1_t_Jumpnv_nt_V4, CMPGTn1_f_Jumpnv_nt_V4...
    O << ".new, #-1)) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 67:
    // CMPEQn1_f_Jumpnv_t_V4, CMPEQn1_t_Jumpnv_t_V4, CMPGTn1_f_Jumpnv_t_V4, C...
    O << ".new, #-1)) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 68:
    // CMPEQri_f_Jumpnv_nt_V4, CMPEQri_f_Jumpnv_t_V4, CMPEQri_t_Jumpnv_nt_V4,...
    O << ".new, #"; 
    printImmOperand(MI, 1, O); 
    break;
  case 69:
    // CMPEQrr_f_Jumpnv_nt_V4, CMPEQrr_f_Jumpnv_t_V4, CMPEQrr_t_Jumpnv_nt_V4,...
    O << ".new, "; 
    printOperand(MI, 1, O); 
    break;
  case 70:
    // CMPLTUrr_f_Jumpnv_nt_V4, CMPLTUrr_f_Jumpnv_t_V4, CMPLTUrr_t_Jumpnv_nt_...
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 71:
    // CONST32, CONST32GP_set, CONST32_Float_Real, CONST32_Int_Real, CONST32_...
    O << " = CONST32(#"; 
    break;
  case 72:
    // CONST32_Label
    O << " = CONST32("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 73:
    // CONST64_Float_Real, CONST64_Int_Real
    O << " = CONST64(#"; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 74:
    // CONVERT_d2df, F2_conv_d2df, HEXAGON_F2_conv_d2df
    O << " = convert_d2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 75:
    // CONVERT_d2sf, F2_conv_d2sf, HEXAGON_F2_conv_d2sf
    O << " = convert_d2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 76:
    // CONVERT_df2d, CONVERT_df2d_nchop, F2_conv_df2d, F2_conv_df2d_chop, HEX...
    O << " = convert_df2d("; 
    printOperand(MI, 1, O); 
    break;
  case 77:
    // CONVERT_df2sf, F2_conv_df2sf, HEXAGON_F2_conv_df2sf
    O << " = convert_df2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 78:
    // CONVERT_df2ud, CONVERT_df2ud_nchop, F2_conv_df2ud, F2_conv_df2ud_chop,...
    O << " = convert_df2ud("; 
    printOperand(MI, 1, O); 
    break;
  case 79:
    // CONVERT_df2uw, CONVERT_df2uw_nchop, F2_conv_df2uw, F2_conv_df2uw_chop,...
    O << " = convert_df2uw("; 
    printOperand(MI, 1, O); 
    break;
  case 80:
    // CONVERT_df2w, CONVERT_df2w_nchop, F2_conv_df2w, F2_conv_df2w_chop, HEX...
    O << " = convert_df2w("; 
    printOperand(MI, 1, O); 
    break;
  case 81:
    // CONVERT_sf2d, CONVERT_sf2d_nchop, F2_conv_sf2d, F2_conv_sf2d_chop, HEX...
    O << " = convert_sf2d("; 
    printOperand(MI, 1, O); 
    break;
  case 82:
    // CONVERT_sf2df, F2_conv_sf2df, HEXAGON_F2_conv_sf2df
    O << " = convert_sf2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 83:
    // CONVERT_sf2ud, CONVERT_sf2ud_nchop, F2_conv_sf2ud, F2_conv_sf2ud_chop,...
    O << " = convert_sf2ud("; 
    printOperand(MI, 1, O); 
    break;
  case 84:
    // CONVERT_sf2uw, CONVERT_sf2uw_nchop, F2_conv_sf2uw, F2_conv_sf2uw_chop,...
    O << " = convert_sf2uw("; 
    printOperand(MI, 1, O); 
    break;
  case 85:
    // CONVERT_sf2w, CONVERT_sf2w_nchop, F2_conv_sf2w, F2_conv_sf2w_chop, HEX...
    O << " = convert_sf2w("; 
    printOperand(MI, 1, O); 
    break;
  case 86:
    // CONVERT_ud2df, F2_conv_ud2df, HEXAGON_F2_conv_ud2df
    O << " = convert_ud2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 87:
    // CONVERT_ud2sf, F2_conv_ud2sf, HEXAGON_F2_conv_ud2sf
    O << " = convert_ud2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 88:
    // CONVERT_uw2df, F2_conv_uw2df, HEXAGON_F2_conv_uw2df
    O << " = convert_uw2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 89:
    // CONVERT_uw2sf, F2_conv_uw2sf, HEXAGON_F2_conv_uw2sf
    O << " = convert_uw2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 90:
    // CONVERT_w2df, F2_conv_w2df, HEXAGON_F2_conv_w2df
    O << " = convert_w2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 91:
    // CONVERT_w2sf, F2_conv_w2sf, HEXAGON_F2_conv_w2sf
    O << " = convert_w2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 92:
    // CTLZ64_rr, HEXAGON_S2_cl0, HEXAGON_S2_cl0p, S2_cl0, S2_cl0p
    O << " = cl0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 93:
    // CTTZ64_rr, HEXAGON_S2_ct0, S2_ct0, S2_ct0p
    O << " = ct0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 94:
    // F2_dfclass, HEXAGON_F2_dfclass
    O << " = dfclass("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 95:
    // F2_dfcmpeq, FCMPOEQ64_rr, FCMPUEQ64_rr, HEXAGON_F2_dfcmpeq
    O << " = dfcmp.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 96:
    // F2_dfcmpge, FCMPOGE64_rr, FCMPUGE64_rr, HEXAGON_F2_dfcmpge
    O << " = dfcmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 97:
    // F2_dfcmpgt, FCMPOGT64_rr, FCMPUGT64_rr, HEXAGON_F2_dfcmpgt
    O << " = dfcmp.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 98:
    // F2_dfcmpuo, HEXAGON_F2_dfcmpuo
    O << " = dfcmp.uo("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 99:
    // F2_dfimm_n, F2_dfimm_p
    O << " = dfmake(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 100:
    // F2_sfadd, HEXAGON_F2_sfadd, fADD_rr
    O << " = sfadd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 101:
    // F2_sfclass, HEXAGON_F2_sfclass
    O << " = sfclass("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 102:
    // F2_sfcmpeq, FCMPOEQ32_rr, FCMPUEQ32_rr, HEXAGON_F2_sfcmpeq
    O << " = sfcmp.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 103:
    // F2_sfcmpge, FCMPOGE32_rr, FCMPUGE32_rr, HEXAGON_F2_sfcmpge
    O << " = sfcmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 104:
    // F2_sfcmpgt, FCMPOGT32_rr, FCMPUGT32_rr, HEXAGON_F2_sfcmpgt
    O << " = sfcmp.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 105:
    // F2_sfcmpuo, HEXAGON_F2_sfcmpuo
    O << " = sfcmp.uo("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 106:
    // F2_sffixupd, HEXAGON_F2_sffixupd
    O << " = sffixupd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 107:
    // F2_sffixupn, HEXAGON_F2_sffixupn
    O << " = sffixupn("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 108:
    // F2_sffixupr, HEXAGON_F2_sffixupr
    O << " = sffixupr("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 109:
    // F2_sffma, F2_sffma_lib, F2_sffma_sc, FMADD_sp, HEXAGON_F2_sffma, HEXAG...
    O << " += sfmpy("; 
    break;
  case 110:
    // F2_sffms, F2_sffms_lib, HEXAGON_F2_sffms, HEXAGON_F2_sffms_lib
    O << " -= sfmpy("; 
    break;
  case 111:
    // F2_sfimm_n, F2_sfimm_p
    O << " = sfmake(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 112:
    // F2_sfmax, FMAX_sp, HEXAGON_F2_sfmax
    O << " = sfmax("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 113:
    // F2_sfmin, FMIN_sp, HEXAGON_F2_sfmin
    O << " = sfmin("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 114:
    // F2_sfmpy, HEXAGON_F2_sfmpy, fMUL_rr
    O << " = sfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 115:
    // F2_sfsub, HEXAGON_F2_sfsub, fSUB_rr
    O << " = sfsub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 116:
    // HEXAGON_A2_subri, S4_subi_asl_ri, S4_subi_lsr_ri, SUB_ri
    O << " = sub(#"; 
    break;
  case 117:
    // HEXAGON_A2_svaddh, HEXAGON_A2_svaddhs, HEXAGON_A2_vaddh, HEXAGON_A2_va...
    O << " = vaddh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 118:
    // HEXAGON_A2_svadduhs, HEXAGON_A2_vadduhs
    O << " = vadduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 119:
    // HEXAGON_A2_svavgh, HEXAGON_A2_svavghs, HEXAGON_A2_vavgh, HEXAGON_A2_va...
    O << " = vavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 120:
    // HEXAGON_A2_svnavgh, HEXAGON_A2_vnavgh, HEXAGON_A2_vnavghcr, HEXAGON_A2...
    O << " = vnavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 121:
    // HEXAGON_A2_svsubh, HEXAGON_A2_svsubhs, HEXAGON_A2_vsubh, HEXAGON_A2_vs...
    O << " = vsubh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 122:
    // HEXAGON_A2_svsubuhs, HEXAGON_A2_vsubuhs
    O << " = vsubuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 123:
    // HEXAGON_A2_vabsh, HEXAGON_A2_vabshsat
    O << " = vabsh("; 
    printOperand(MI, 1, O); 
    break;
  case 124:
    // HEXAGON_A2_vabsw, HEXAGON_A2_vabswsat
    O << " = vabsw("; 
    printOperand(MI, 1, O); 
    break;
  case 125:
    // HEXAGON_A2_vaddub, HEXAGON_A2_vaddubs
    O << " = vaddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 126:
    // HEXAGON_A2_vaddw, HEXAGON_A2_vaddws
    O << " = vaddw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 127:
    // HEXAGON_A2_vavgub, HEXAGON_A2_vavgubr
    O << " = vavgub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 128:
    // HEXAGON_A2_vavguh, HEXAGON_A2_vavguhr
    O << " = vavguh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 129:
    // HEXAGON_A2_vavguw, HEXAGON_A2_vavguwr
    O << " = vavguw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 130:
    // HEXAGON_A2_vavgw, HEXAGON_A2_vavgwcr, HEXAGON_A2_vavgwr
    O << " = vavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 131:
    // HEXAGON_A2_vcmpbeq
    O << " = vcmpb.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 132:
    // HEXAGON_A2_vcmpbgtu
    O << " = vcmpb.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 133:
    // HEXAGON_A2_vcmpheq
    O << " = vcmph.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 134:
    // HEXAGON_A2_vcmphgt
    O << " = vcmph.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 135:
    // HEXAGON_A2_vcmphgtu
    O << " = vcmph.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 136:
    // HEXAGON_A2_vcmpweq
    O << " = vcmpw.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 137:
    // HEXAGON_A2_vcmpwgt
    O << " = vcmpw.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 138:
    // HEXAGON_A2_vcmpwgtu
    O << " = vcmpw.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 139:
    // HEXAGON_A2_vconj
    O << " = vconj("; 
    printOperand(MI, 1, O); 
    O << "):sat"; 
    return;
    break;
  case 140:
    // HEXAGON_A2_vmaxh
    O << " = vmaxh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 141:
    // HEXAGON_A2_vmaxub
    O << " = vmaxub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 142:
    // HEXAGON_A2_vmaxuh
    O << " = vmaxuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 143:
    // HEXAGON_A2_vmaxuw
    O << " = vmaxuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 144:
    // HEXAGON_A2_vmaxw
    O << " = vmaxw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 145:
    // HEXAGON_A2_vminh
    O << " = vminh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 146:
    // HEXAGON_A2_vminub
    O << " = vminub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 147:
    // HEXAGON_A2_vminuh
    O << " = vminuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 148:
    // HEXAGON_A2_vminuw
    O << " = vminuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 149:
    // HEXAGON_A2_vminw
    O << " = vminw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 150:
    // HEXAGON_A2_vnavgw, HEXAGON_A2_vnavgwcr, HEXAGON_A2_vnavgwr
    O << " = vnavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 151:
    // HEXAGON_A2_vraddub
    O << " = vraddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 152:
    // HEXAGON_A2_vraddub_acc
    O << " += vraddub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 153:
    // HEXAGON_A2_vrsadub
    O << " = vrsadub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 154:
    // HEXAGON_A2_vrsadub_acc
    O << " += vrsadub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 155:
    // HEXAGON_A2_vsubub, HEXAGON_A2_vsububs
    O << " = vsubub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 156:
    // HEXAGON_A2_vsubw, HEXAGON_A2_vsubws
    O << " = vsubw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 157:
    // HEXAGON_A5_vaddhubs
    O << " = vaddhub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 158:
    // HEXAGON_C2_cmpgei
    O << " = cmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 159:
    // HEXAGON_C2_cmpgeui
    O << " = cmp.geu("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 160:
    // HEXAGON_C2_cmplt
    O << " = cmp.lt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 161:
    // HEXAGON_C2_cmpltu
    O << " = cmp.ltu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 162:
    // HEXAGON_C2_vmux, VMUX_prr64
    O << " = vmux("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 163:
    // HEXAGON_F2_dfadd, fADD64_rr
    O << " = dfadd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 164:
    // HEXAGON_F2_dffixupd
    O << " = dffixupd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 165:
    // HEXAGON_F2_dffixupn
    O << " = dffixupn("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 166:
    // HEXAGON_F2_dffixupr
    O << " = dffixupr("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 167:
    // HEXAGON_F2_dffma, HEXAGON_F2_dffma_lib, HEXAGON_F2_dffma_sc
    O << " += dfmpy("; 
    break;
  case 168:
    // HEXAGON_F2_dffms, HEXAGON_F2_dffms_lib
    O << " -= dfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 169:
    // HEXAGON_F2_dfimm_n, HEXAGON_F2_dfimm_p
    O << " = dfmake#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 170:
    // HEXAGON_F2_dfmax
    O << " = dfmax("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 171:
    // HEXAGON_F2_dfmin
    O << " = dfmin("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 172:
    // HEXAGON_F2_dfmpy, fMUL64_rr
    O << " = dfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 173:
    // HEXAGON_F2_dfsub, fSUB64_rr
    O << " = dfsub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 174:
    // HEXAGON_F2_sfimm_n, HEXAGON_F2_sfimm_p
    O << " = sfmake#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 175:
    // HEXAGON_M2_acci, HEXAGON_M2_accii, M2_acci, M2_accii
    O << " += add("; 
    printOperand(MI, 2, O); 
    break;
  case 176:
    // HEXAGON_M2_cmaci_s0
    O << " += cmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 177:
    // HEXAGON_M2_cmacr_s0
    O << " += cmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 178:
    // HEXAGON_M2_cmacs_s0, HEXAGON_M2_cmacs_s1, HEXAGON_M2_cmacsc_s0, HEXAGO...
    O << " += cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 179:
    // HEXAGON_M2_cmpyi_s0
    O << " = cmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 180:
    // HEXAGON_M2_cmpyr_s0
    O << " = cmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 181:
    // HEXAGON_M2_cmpyrs_s0, HEXAGON_M2_cmpyrs_s1, HEXAGON_M2_cmpyrsc_s0, HEX...
    O << " = cmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 182:
    // HEXAGON_M2_cnacs_s0, HEXAGON_M2_cnacs_s1, HEXAGON_M2_cnacsc_s0, HEXAGO...
    O << " -= cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 183:
    // HEXAGON_M2_dpmpyss_acc_s0, HEXAGON_M2_mpy_acc_hh_s0, HEXAGON_M2_mpy_ac...
    O << " += mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 184:
    // HEXAGON_M2_dpmpyss_nac_s0, HEXAGON_M2_mpy_nac_hh_s0, HEXAGON_M2_mpy_na...
    O << " -= mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 185:
    // HEXAGON_M2_dpmpyss_rnd_s0, HEXAGON_M2_dpmpyss_s0, HEXAGON_M2_hmmpyh_rs...
    O << " = mpy("; 
    printOperand(MI, 1, O); 
    break;
  case 186:
    // HEXAGON_M2_dpmpyuu_acc_s0, HEXAGON_M2_mpyu_acc_hh_s0, HEXAGON_M2_mpyu_...
    O << " += mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 187:
    // HEXAGON_M2_dpmpyuu_nac_s0, HEXAGON_M2_mpyu_nac_hh_s0, HEXAGON_M2_mpyu_...
    O << " -= mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 188:
    // HEXAGON_M2_dpmpyuu_s0, HEXAGON_M2_mpyu_hh_s0, HEXAGON_M2_mpyu_hh_s1, H...
    O << " = mpyu("; 
    printOperand(MI, 1, O); 
    break;
  case 189:
    // HEXAGON_M2_maci, HEXAGON_M2_macsip, M2_maci, M2_macsip
    O << " += mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 190:
    // HEXAGON_M2_macsin, M2_macsin
    O << " -= mpyi("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    break;
  case 191:
    // HEXAGON_M2_mmachs_rs0, HEXAGON_M2_mmachs_rs1, HEXAGON_M2_mmachs_s0, HE...
    O << " += vmpywoh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 192:
    // HEXAGON_M2_mmacls_rs0, HEXAGON_M2_mmacls_rs1, HEXAGON_M2_mmacls_s0, HE...
    O << " += vmpyweh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 193:
    // HEXAGON_M2_mmacuhs_rs0, HEXAGON_M2_mmacuhs_rs1, HEXAGON_M2_mmacuhs_s0,...
    O << " += vmpywouh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 194:
    // HEXAGON_M2_mmaculs_rs0, HEXAGON_M2_mmaculs_rs1, HEXAGON_M2_mmaculs_s0,...
    O << " += vmpyweuh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 195:
    // HEXAGON_M2_mmpyh_rs0, HEXAGON_M2_mmpyh_rs1, HEXAGON_M2_mmpyh_s0, HEXAG...
    O << " = vmpywoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 196:
    // HEXAGON_M2_mmpyl_rs0, HEXAGON_M2_mmpyl_rs1, HEXAGON_M2_mmpyl_s0, HEXAG...
    O << " = vmpyweh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 197:
    // HEXAGON_M2_mmpyuh_rs0, HEXAGON_M2_mmpyuh_rs1, HEXAGON_M2_mmpyuh_s0, HE...
    O << " = vmpywouh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 198:
    // HEXAGON_M2_mmpyul_rs0, HEXAGON_M2_mmpyul_rs1, HEXAGON_M2_mmpyul_s0, HE...
    O << " = vmpyweuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 199:
    // HEXAGON_M2_mpyi, Hexagon_M2_mpysmi, M2_mpyi, M2_mpysmi
    O << " = mpyi("; 
    printOperand(MI, 1, O); 
    break;
  case 200:
    // HEXAGON_M2_mpyui, M2_mpyui
    O << " = mpyui("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 201:
    // HEXAGON_M2_nacci, HEXAGON_M2_naccii, M2_nacci, M2_naccii
    O << " -= add("; 
    printOperand(MI, 2, O); 
    break;
  case 202:
    // HEXAGON_M2_subacc, M2_subacc
    O << " += sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 203:
    // HEXAGON_M2_vabsdiffh
    O << " = vabsdiffh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 204:
    // HEXAGON_M2_vabsdiffw
    O << " = vabsdiffw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 205:
    // HEXAGON_M2_vcmac_s0_sat_i
    O << " += vcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 206:
    // HEXAGON_M2_vcmac_s0_sat_r
    O << " += vcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 207:
    // HEXAGON_M2_vcmpy_s0_sat_i, HEXAGON_M2_vcmpy_s1_sat_i
    O << " = vcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 208:
    // HEXAGON_M2_vcmpy_s0_sat_r, HEXAGON_M2_vcmpy_s1_sat_r
    O << " = vcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 209:
    // HEXAGON_M2_vdmacs_s0, HEXAGON_M2_vdmacs_s1
    O << " += vdmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 210:
    // HEXAGON_M2_vdmpyrs_s0, HEXAGON_M2_vdmpyrs_s1, HEXAGON_M2_vdmpys_s0, HE...
    O << " = vdmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 211:
    // HEXAGON_M2_vmac2, HEXAGON_M2_vmac2s_s0, HEXAGON_M2_vmac2s_s1
    O << " += vmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 212:
    // HEXAGON_M2_vmac2es, HEXAGON_M2_vmac2es_s0, HEXAGON_M2_vmac2es_s1
    O << " += vmpyeh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 213:
    // HEXAGON_M2_vmpy2es_s0, HEXAGON_M2_vmpy2es_s1
    O << " = vmpyeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 214:
    // HEXAGON_M2_vmpy2s_s0, HEXAGON_M2_vmpy2s_s0pack, HEXAGON_M2_vmpy2s_s1, ...
    O << " = vmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 215:
    // HEXAGON_M2_vrcmaci_s0, HEXAGON_M2_vrcmaci_s0c
    O << " += vrcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 216:
    // HEXAGON_M2_vrcmacr_s0, HEXAGON_M2_vrcmacr_s0c
    O << " += vrcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 217:
    // HEXAGON_M2_vrcmpyi_s0, HEXAGON_M2_vrcmpyi_s0c
    O << " = vrcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 218:
    // HEXAGON_M2_vrcmpyr_s0, HEXAGON_M2_vrcmpyr_s0c
    O << " = vrcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 219:
    // HEXAGON_M2_vrmac_s0
    O << " += vrmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 220:
    // HEXAGON_M2_vrmpy_s0
    O << " = vrmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 221:
    // HEXAGON_M2_xor_xacc, Hexagon_M4_xor_xacc, M2_xor_xacc, M4_xor_xacc
    O << " ^= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 222:
    // HEXAGON_M4_and_and, HEXAGON_M4_and_andn, M4_and_and, M4_and_andn
    O << " &= and("; 
    printOperand(MI, 2, O); 
    break;
  case 223:
    // HEXAGON_M4_and_or, M4_and_or
    O << " &= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 224:
    // HEXAGON_M4_and_xor, M4_and_xor
    O << " &= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 225:
    // HEXAGON_M4_or_and, HEXAGON_M4_or_andn, HEXAGON_S4_or_andi, M4_or_and, ...
    O << " |= and("; 
    printOperand(MI, 2, O); 
    break;
  case 226:
    // HEXAGON_M4_or_or, HEXAGON_S4_or_ori, M4_or_or, S4_or_ori
    O << " |= or("; 
    printOperand(MI, 2, O); 
    break;
  case 227:
    // HEXAGON_M4_or_xor, M4_or_xor
    O << " |= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 228:
    // HEXAGON_M4_xor_and, HEXAGON_M4_xor_andn, M4_xor_and, M4_xor_andn
    O << " ^= and("; 
    printOperand(MI, 2, O); 
    break;
  case 229:
    // HEXAGON_M4_xor_or, M4_xor_or
    O << " ^= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 230:
    // HEXAGON_M5_vdmacbsu
    O << " += vdmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 231:
    // HEXAGON_M5_vdmpybsu
    O << " = vdmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 232:
    // HEXAGON_M5_vmacbsu
    O << " += vmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 233:
    // HEXAGON_M5_vmacbuu
    O << " += vmpybu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 234:
    // HEXAGON_M5_vmpybsu
    O << " = vmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 235:
    // HEXAGON_M5_vmpybuu
    O << " = vmpybu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 236:
    // HEXAGON_M5_vrmacbsu
    O << " += vrmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 237:
    // HEXAGON_M5_vrmacbuu
    O << " += vrmpybu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 238:
    // HEXAGON_M5_vrmpybsu
    O << " = vrmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 239:
    // HEXAGON_M5_vrmpybuu
    O << " = vrmpybu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 240:
    // HEXAGON_S2_addasl_rrri, S2_addasl_rrri
    O << " = addasl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 241:
    // HEXAGON_S2_asl_i_p, HEXAGON_S2_asl_i_r, HEXAGON_S2_asl_i_r_sat, HEXAGO...
    O << " = asl("; 
    printOperand(MI, 1, O); 
    break;
  case 242:
    // HEXAGON_S2_asl_i_p_acc, HEXAGON_S2_asl_i_r_acc, HEXAGON_S2_asl_r_p_acc...
    O << " += asl("; 
    printOperand(MI, 2, O); 
    break;
  case 243:
    // HEXAGON_S2_asl_i_p_and, HEXAGON_S2_asl_i_r_and, HEXAGON_S2_asl_r_p_and...
    O << " &= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 244:
    // HEXAGON_S2_asl_i_p_nac, HEXAGON_S2_asl_i_r_nac, HEXAGON_S2_asl_r_p_nac...
    O << " -= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 245:
    // HEXAGON_S2_asl_i_p_or, HEXAGON_S2_asl_i_r_or, HEXAGON_S2_asl_r_p_or, H...
    O << " |= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 246:
    // HEXAGON_S2_asl_i_p_xacc, HEXAGON_S2_asl_i_r_xacc, S2_asl_i_p_xacc, S2_...
    O << " ^= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 247:
    // HEXAGON_S2_asl_i_vh, HEXAGON_S2_asl_r_vh
    O << " = vaslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 248:
    // HEXAGON_S2_asl_i_vw, HEXAGON_S2_asl_r_vw
    O << " = vaslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 249:
    // HEXAGON_S2_asr_i_p, HEXAGON_S2_asr_i_p_rnd, HEXAGON_S2_asr_i_r, HEXAGO...
    O << " = asr("; 
    printOperand(MI, 1, O); 
    break;
  case 250:
    // HEXAGON_S2_asr_i_p_acc, HEXAGON_S2_asr_i_r_acc, HEXAGON_S2_asr_r_p_acc...
    O << " += asr("; 
    printOperand(MI, 2, O); 
    break;
  case 251:
    // HEXAGON_S2_asr_i_p_and, HEXAGON_S2_asr_i_r_and, HEXAGON_S2_asr_r_p_and...
    O << " &= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 252:
    // HEXAGON_S2_asr_i_p_nac, HEXAGON_S2_asr_i_r_nac, HEXAGON_S2_asr_r_p_nac...
    O << " -= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 253:
    // HEXAGON_S2_asr_i_p_or, HEXAGON_S2_asr_i_r_or, HEXAGON_S2_asr_r_p_or, H...
    O << " |= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 254:
    // HEXAGON_S2_asr_i_p_rnd_goodsyntax, HEXAGON_S2_asr_i_r_rnd_goodsyntax
    O << " = asrrnd("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 255:
    // HEXAGON_S2_asr_i_svw_trun, HEXAGON_S2_asr_i_vw, HEXAGON_S2_asr_r_svw_t...
    O << " = vasrw("; 
    printOperand(MI, 1, O); 
    break;
  case 256:
    // HEXAGON_S2_asr_i_vh, HEXAGON_S2_asr_r_vh, HEXAGON_S5_vasrhrnd_goodsynt...
    O << " = vasrh("; 
    printOperand(MI, 1, O); 
    break;
  case 257:
    // HEXAGON_S2_cl1, HEXAGON_S2_cl1p, S2_cl1, S2_cl1p
    O << " = cl1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 258:
    // HEXAGON_S2_clb, HEXAGON_S2_clbp, S2_clb, S2_clbp
    O << " = clb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 259:
    // HEXAGON_S2_clbnorm, S2_clbnorm, S4_clbpnorm
    O << " = normamt("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 260:
    // HEXAGON_S2_clrbit_i, HEXAGON_S2_clrbit_r, S2_clrbit_i, S2_clrbit_r
    O << " = clrbit("; 
    printOperand(MI, 1, O); 
    break;
  case 261:
    // HEXAGON_S2_ct1, S2_ct1, S2_ct1p
    O << " = ct1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 262:
    // HEXAGON_S2_extractu, HEXAGON_S2_extractu_rp, HEXAGON_S2_extractup, HEX...
    O << " = extractu("; 
    printOperand(MI, 1, O); 
    break;
  case 263:
    // HEXAGON_S2_lsl_r_p, HEXAGON_S2_lsl_r_r, S2_lsl_r_p, S2_lsl_r_r
    O << " = lsl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 264:
    // HEXAGON_S2_lsl_r_p_acc, HEXAGON_S2_lsl_r_r_acc, S2_lsl_r_p_acc, S2_lsl...
    O << " += lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 265:
    // HEXAGON_S2_lsl_r_p_and, HEXAGON_S2_lsl_r_r_and, S2_lsl_r_p_and, S2_lsl...
    O << " &= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 266:
    // HEXAGON_S2_lsl_r_p_nac, HEXAGON_S2_lsl_r_r_nac, S2_lsl_r_p_nac, S2_lsl...
    O << " -= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 267:
    // HEXAGON_S2_lsl_r_p_or, HEXAGON_S2_lsl_r_r_or, S2_lsl_r_p_or, S2_lsl_r_...
    O << " |= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 268:
    // HEXAGON_S2_lsl_r_vh
    O << " = vlslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 269:
    // HEXAGON_S2_lsl_r_vw
    O << " = vlslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 270:
    // HEXAGON_S2_lsr_i_p, HEXAGON_S2_lsr_i_r, HEXAGON_S2_lsr_r_p, HEXAGON_S2...
    O << " = lsr("; 
    printOperand(MI, 1, O); 
    break;
  case 271:
    // HEXAGON_S2_lsr_i_p_acc, HEXAGON_S2_lsr_i_r_acc, HEXAGON_S2_lsr_r_p_acc...
    O << " += lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 272:
    // HEXAGON_S2_lsr_i_p_and, HEXAGON_S2_lsr_i_r_and, HEXAGON_S2_lsr_r_p_and...
    O << " &= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 273:
    // HEXAGON_S2_lsr_i_p_nac, HEXAGON_S2_lsr_i_r_nac, HEXAGON_S2_lsr_r_p_nac...
    O << " -= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 274:
    // HEXAGON_S2_lsr_i_p_or, HEXAGON_S2_lsr_i_r_or, HEXAGON_S2_lsr_r_p_or, H...
    O << " |= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 275:
    // HEXAGON_S2_lsr_i_p_xacc, HEXAGON_S2_lsr_i_r_xacc, S2_lsr_i_p_xacc, S2_...
    O << " ^= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 276:
    // HEXAGON_S2_lsr_i_vh, HEXAGON_S2_lsr_r_vh
    O << " = vlsrh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 277:
    // HEXAGON_S2_lsr_i_vw, HEXAGON_S2_lsr_r_vw
    O << " = vlsrw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 278:
    // HEXAGON_S2_packhl, S2_packhl
    O << " = packhl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 279:
    // HEXAGON_S2_parityp, S2_parityp, S4_parity
    O << " = parity("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 280:
    // HEXAGON_S2_setbit_i, HEXAGON_S2_setbit_r, S2_setbit_i, S2_setbit_r
    O << " = setbit("; 
    printOperand(MI, 1, O); 
    break;
  case 281:
    // HEXAGON_S2_shuffeb
    O << " = shuffeb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 282:
    // HEXAGON_S2_shuffeh
    O << " = shuffeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 283:
    // HEXAGON_S2_shuffob
    O << " = shuffob("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 284:
    // HEXAGON_S2_shuffoh
    O << " = shuffoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 285:
    // HEXAGON_S2_svsathb, HEXAGON_S2_vsathb, HEXAGON_S2_vsathb_nopack
    O << " = vsathb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 286:
    // HEXAGON_S2_svsathub, HEXAGON_S2_vsathub, HEXAGON_S2_vsathub_nopack
    O << " = vsathub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 287:
    // HEXAGON_S2_togglebit_i, HEXAGON_S2_togglebit_r, S2_togglebit_i, S2_tog...
    O << " = togglebit("; 
    printOperand(MI, 1, O); 
    break;
  case 288:
    // HEXAGON_S2_tstbit_i, HEXAGON_S2_tstbit_r, S2_tstbit_i, S2_tstbit_r
    O << " = tstbit("; 
    printOperand(MI, 1, O); 
    break;
  case 289:
    // HEXAGON_S2_valignib, HEXAGON_S2_valignrb, VALIGN_rrp
    O << " = valignb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 290:
    // HEXAGON_S2_vcrotate
    O << " = vcrotate("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 291:
    // HEXAGON_S2_vrndpackwh, HEXAGON_S2_vrndpackwhs
    O << " = vrndwh("; 
    printOperand(MI, 1, O); 
    break;
  case 292:
    // HEXAGON_S2_vsatwh, HEXAGON_S2_vsatwh_nopack
    O << " = vsatwh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 293:
    // HEXAGON_S2_vsatwuh, HEXAGON_S2_vsatwuh_nopack
    O << " = vsatwuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 294:
    // HEXAGON_S2_vsplatrb
    O << " = vsplatb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 295:
    // HEXAGON_S2_vsplatrh
    O << " = vsplath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 296:
    // HEXAGON_S2_vsxtbh
    O << " = vsxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 297:
    // HEXAGON_S2_vsxthw
    O << " = vsxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 298:
    // HEXAGON_S2_vtrunehb
    O << " = vtrunehb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 299:
    // HEXAGON_S2_vtrunewh
    O << " = vtrunewh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 300:
    // HEXAGON_S2_vtrunohb
    O << " = vtrunohb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 301:
    // HEXAGON_S2_vtrunowh
    O << " = vtrunowh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 302:
    // HEXAGON_S2_vzxtbh
    O << " = vzxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 303:
    // HEXAGON_S2_vzxthw
    O << " = vzxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 304:
    // HEXAGON_S5_asrhub_rnd_sat_goodsyntax, HEXAGON_S5_asrhub_sat
    O << " = vasrhub("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    break;
  case 305:
    // HEXAGON_S5_popcountp, S5_popcountp
    O << " = popcount("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 306:
    // HEXAGON_circ_ldd, L2_loadrd_io, L2_loadrd_pbr, L2_loadrd_pci, L2_loadr...
    O << " = memd("; 
    break;
  case 307:
    // HI, HI_jt, HI_label, HIi
    O << ".h = #HI("; 
    break;
  case 308:
    // Hexagon_M2_vradduh
    O << " = vradduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 309:
    // Hexagon_M2_vrcmpys_acc_s1
    O << " += vrcmpys("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):<<1:sat"; 
    return;
    break;
  case 310:
    // Hexagon_M2_vrcmpys_s1, Hexagon_M2_vrcmpys_s1rp
    O << " = vrcmpys("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 311:
    // Hexagon_S2_brev, S2_brevp
    O << " = brev("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 312:
    // Hexagon_S2_deinterleave, S2_deinterleave
    O << " = deinterleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 313:
    // Hexagon_S2_insert, Hexagon_S2_insert_rp, Hexagon_S2_insertp, Hexagon_S...
    O << " = insert("; 
    printOperand(MI, 2, O); 
    break;
  case 314:
    // Hexagon_S2_interleave, S2_interleave
    O << " = interleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 315:
    // Hexagon_S2_lfsp, S2_lfsp
    O << " = lfs("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 316:
    // Hexagon_S2_tableidxb_goodsyntax, S2_tableidxb
    O << " = tableidxb("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    break;
  case 317:
    // Hexagon_S2_tableidxd_goodsyntax, S2_tableidxd
    O << " = tableidxd("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    break;
  case 318:
    // Hexagon_S2_tableidxh_goodsyntax, S2_tableidxh
    O << " = tableidxh("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    break;
  case 319:
    // Hexagon_S2_tableidxw_goodsyntax, S2_tableidxw
    O << " = tableidxw("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    break;
  case 320:
    // Hexagon_S2_vspliceib, Hexagon_S2_vsplicerb, VSPLICE_rrp
    O << " = vspliceb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 321:
    // J2_callf, J2_callt
    O << ") call "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 322:
    // J2_callrf, J2_callrt
    O << ") callr "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 323:
    // J2_jump_extf, J2_jump_extt
    O << ") jump ##"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 324:
    // J2_jump_extfnew, J2_jump_exttnew
    O << ".new) jump:nt ##"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 325:
    // J2_jump_extfnewpt, J2_jump_exttnewpt
    O << ".new) jump:t ##"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 326:
    // J2_jump_noextf, J2_jump_noextt
    O << ") jump #"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 327:
    // J2_jump_noextfnew, J2_jump_noexttnew
    O << ".new) jump:nt #"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 328:
    // J2_jump_noextfnewpt, J2_jump_noexttnewpt
    O << ".new) jump:t #"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 329:
    // J2_jumpf, J2_jumpt
    O << ") jump "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 330:
    // J2_jumpfnew, J2_jumptnew
    O << ".new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 331:
    // J2_jumpfnewpt, J2_jumptnewpt
    O << ".new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 332:
    // J2_jumprf, J2_jumprt, JMPretf, JMPrett
    O << ") jumpr "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 333:
    // J2_jumprfnew, J2_jumprtnew, JMPretfnew, JMPrettnew
    O << ".new) jumpr:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 334:
    // J2_jumprfnewpt, J2_jumprtnewpt, JMPretfnewpt, JMPrettnewpt
    O << ".new) jumpr:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 335:
    // J2_loop0i, J2_loop1i, J2_ploop1si, J2_ploop2si, J2_ploop3si, J4_cmpeqi...
    O << ", #"; 
    printImmOperand(MI, 1, O); 
    break;
  case 336:
    // J4_cmpeqn1_fp0_jump_nt, J4_cmpgtn1_fp0_jump_nt
    O << ",#-1); if (!p0.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 337:
    // J4_cmpeqn1_fp0_jump_t, J4_cmpgtn1_fp0_jump_t
    O << ",#-1); if (!p0.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 338:
    // J4_cmpeqn1_fp1_jump_nt, J4_cmpgtn1_fp1_jump_nt
    O << ",#-1); if (!p1.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 339:
    // J4_cmpeqn1_fp1_jump_t, J4_cmpgtn1_fp1_jump_t
    O << ",#-1); if (!p1.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 340:
    // J4_cmpeqn1_tp0_jump_nt, J4_cmpgtn1_tp0_jump_nt
    O << ",#-1); if (p0.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 341:
    // J4_cmpeqn1_tp0_jump_t, J4_cmpgtn1_tp0_jump_t
    O << ",#-1); if (p0.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 342:
    // J4_cmpeqn1_tp1_jump_nt, J4_cmpgtn1_tp1_jump_nt
    O << ",#-1); if (p1.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 343:
    // J4_cmpeqn1_tp1_jump_t, J4_cmpgtn1_tp1_jump_t
    O << ",#-1); if (p1.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 344:
    // J4_tstbit0_fp0_jump_nt
    O << ", #0); if (!p0.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 345:
    // J4_tstbit0_fp0_jump_t
    O << ", #0); if (!p0.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 346:
    // J4_tstbit0_fp1_jump_nt
    O << ", #0); if (!p1.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 347:
    // J4_tstbit0_fp1_jump_t
    O << ", #0); if (!p1.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 348:
    // J4_tstbit0_tp0_jump_nt
    O << ", #0); if (p0.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 349:
    // J4_tstbit0_tp0_jump_t
    O << ", #0); if (p0.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 350:
    // J4_tstbit0_tp1_jump_nt
    O << ", #0); if (p1.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 351:
    // J4_tstbit0_tp1_jump_t
    O << ", #0); if (p1.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 352:
    // L2_loadrb_io, L2_loadrb_pbr, L2_loadrb_pci, L2_loadrb_pcr, L2_loadrb_p...
    O << " = memb("; 
    break;
  case 353:
    // L2_loadrbgp
    O << " = memb(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 354:
    // L2_loadrdgp
    O << " = memd(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 355:
    // L2_loadrh_io, L2_loadrh_pbr, L2_loadrh_pci, L2_loadrh_pcr, L2_loadrh_p...
    O << " = memh("; 
    break;
  case 356:
    // L2_loadrhgp
    O << " = memh(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 357:
    // L2_loadri_io, L2_loadri_pbr, L2_loadri_pci, L2_loadri_pcr, L2_loadri_p...
    O << " = memw("; 
    break;
  case 358:
    // L2_loadrigp
    O << " = memw(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 359:
    // L2_loadrub_io, L2_loadrub_pbr, L2_loadrub_pci, L2_loadrub_pcr, L2_load...
    O << " = memub("; 
    break;
  case 360:
    // L2_loadrubgp
    O << " = memub(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 361:
    // L2_loadruh_io, L2_loadruh_pbr, L2_loadruh_pci, L2_loadruh_pcr, L2_load...
    O << " = memuh("; 
    break;
  case 362:
    // L2_loadruhgp
    O << " = memuh(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 363:
    // L2_loadw_locked
    O << " = memw_locked("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 364:
    // L4_add_memopb_io, L4_add_memoph_io, L4_add_memopw_io, L4_and_memopb_io...
    O << "+#"; 
    break;
  case 365:
    // L4_loadd_locked
    O << " = memd_locked("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 366:
    // L4_loadrb_abs
    O << " = memb(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 367:
    // L4_loadrd_abs
    O << " = memd(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 368:
    // L4_loadrh_abs
    O << " = memh(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 369:
    // L4_loadri_abs
    O << " = memw(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 370:
    // L4_loadrub_abs
    O << " = memub(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 371:
    // L4_loadruh_abs
    O << " = memuh(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 372:
    // L4_return_f, L4_return_t
    O << ") dealloc_return"; 
    return;
    break;
  case 373:
    // L4_return_fnew_pnt, L4_return_tnew_pnt
    O << ".new) dealloc_return:nt"; 
    return;
    break;
  case 374:
    // L4_return_fnew_pt, L4_return_tnew_pt
    O << ".new) dealloc_return:t"; 
    return;
    break;
  case 375:
    // LDrid_ind_lo_V4
    O << "=memd("; 
    printOperand(MI, 1, O); 
    O << "<<#"; 
    printImmOperand(MI, 2, O); 
    O << "+##"; 
    printGlobalOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 376:
    // LO, LO_jt, LO_label, LOi
    O << ".l = #LO("; 
    break;
  case 377:
    // M2_mpysin
    O << " =- mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 378:
    // M2_mpysip
    O << " =+ mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 379:
    // M2_mpysu_up
    O << " = mpysu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 380:
    // M4_mpyri_addi, M4_mpyrr_addi, S4_addi_asl_ri, S4_addi_lsr_ri
    O << " = add(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 381:
    // NTSTBIT_ri, NTSTBIT_rr, S4_ntstbit_i, S4_ntstbit_r
    O << " = !tstbit("; 
    printOperand(MI, 1, O); 
    break;
  case 382:
    // S2_asr_r_p_xor
    O << " ^= asr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 383:
    // S2_lsl_r_p_xor
    O << " ^= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 384:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbnewf_io, S2_pstorerbnewf_...
    O << ") memb("; 
    break;
  case 385:
    // S2_pstorerbfnew_pi, S2_pstorerbnewfnew_pi, S2_pstorerbnewtnew_pi, S2_p...
    O << ".new) memb("; 
    break;
  case 386:
    // S2_pstorerdf_io, S2_pstorerdf_pi, S2_pstorerdt_io, S2_pstorerdt_pi, S4...
    O << ") memd("; 
    break;
  case 387:
    // S2_pstorerdfnew_pi, S2_pstorerdtnew_pi, S4_pstorerdfnew_io, S4_pstorer...
    O << ".new) memd("; 
    break;
  case 388:
    // S2_pstorerff_io, S2_pstorerff_pi, S2_pstorerft_io, S2_pstorerft_pi, S2...
    O << ") memh("; 
    break;
  case 389:
    // S2_pstorerffnew_pi, S2_pstorerftnew_pi, S2_pstorerhfnew_pi, S2_pstorer...
    O << ".new) memh("; 
    break;
  case 390:
    // S2_pstorerif_io, S2_pstorerif_pi, S2_pstorerinewf_io, S2_pstorerinewf_...
    O << ") memw("; 
    break;
  case 391:
    // S2_pstorerifnew_pi, S2_pstorerinewfnew_pi, S2_pstorerinewtnew_pi, S2_p...
    O << ".new) memw("; 
    break;
  case 392:
    // S2_storerb_pbr, S2_storerd_pbr, S2_storerf_pbr, S2_storerh_pbr, S2_sto...
    O << " ++ "; 
    printOperand(MI, 2, O); 
    O << ":brev) = "; 
    printOperand(MI, 3, O); 
    break;
  case 393:
    // S2_storerb_pci, S2_storerd_pci, S2_storerf_pci, S2_storerh_pci, S2_sto...
    O << " ++ #"; 
    printImmOperand(MI, 2, O); 
    O << ":circ("; 
    printOperand(MI, 3, O); 
    O << ")) = "; 
    printOperand(MI, 4, O); 
    break;
  case 394:
    // S2_storerb_pcr, S2_storerd_pcr, S2_storerf_pcr, S2_storerh_pcr, S2_sto...
    O << " ++ I:circ("; 
    printOperand(MI, 2, O); 
    O << ")) = "; 
    printOperand(MI, 3, O); 
    break;
  case 395:
    // S2_storerb_pi, S2_storerbnew_pi, S2_storerd_pi, S2_storerf_pi, S2_stor...
    O << "++#"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 396:
    // S2_storerb_pr, S2_storerbnew_pr, S2_storerd_pr, S2_storerf_pr, S2_stor...
    O << "++"; 
    printOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 397:
    // S2_storerbabs, S2_storerbgp, S2_storerbnewabs, S2_storerbnewgp, S2_sto...
    O << ") = "; 
    printOperand(MI, 1, O); 
    break;
  case 398:
    // S4_andi_asl_ri, S4_andi_lsr_ri
    O << " = and(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 399:
    // S4_clbaddi, S4_clbpaddi
    O << " = add(clb("; 
    printOperand(MI, 1, O); 
    O << "), #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 400:
    // S4_extract, S4_extract_rp, S4_extractp, S4_extractp_rp
    O << " = extract("; 
    printOperand(MI, 1, O); 
    break;
  case 401:
    // S4_lsli
    O << " = lsl(#"; 
    printImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 402:
    // S4_ori_asl_ri, S4_ori_lsr_ri
    O << " = or(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 403:
    // S4_pstorerbf_abs, S4_pstorerbnewf_abs, S4_pstorerbnewt_abs, S4_pstorer...
    O << ") memb(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 404:
    // S4_pstorerbfnew_abs, S4_pstorerbnewfnew_abs, S4_pstorerbnewtnew_abs, S...
    O << ".new) memb(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 405:
    // S4_pstorerdf_abs, S4_pstorerdt_abs
    O << ") memd(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 406:
    // S4_pstorerdfnew_abs, S4_pstorerdtnew_abs
    O << ".new) memd(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 407:
    // S4_pstorerff_abs, S4_pstorerft_abs, S4_pstorerhf_abs, S4_pstorerhnewf_...
    O << ") memh(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 408:
    // S4_pstorerffnew_abs, S4_pstorerftnew_abs, S4_pstorerhfnew_abs, S4_psto...
    O << ".new) memh(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 409:
    // S4_pstorerif_abs, S4_pstorerinewf_abs, S4_pstorerinewt_abs, S4_pstorer...
    O << ") memw(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 410:
    // S4_pstorerifnew_abs, S4_pstorerinewfnew_abs, S4_pstorerinewtnew_abs, S...
    O << ".new) memw(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 411:
    // S4_storerb_rr, S4_storerbnew_rr, S4_storerd_rr, S4_storerf_rr, S4_stor...
    O << " + "; 
    printOperand(MI, 1, O); 
    O << "<<#"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 412:
    // SAVE_REGISTERS_CALL_V4
    O << " // Save_calle_saved_registers"; 
    return;
    break;
  case 413:
    // STrib_abs_set_V4, STrid_abs_set_V4, STrih_abs_set_V4, STriw_abs_set_V4
    O << "=##"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 414:
    // STrib_shl_V4, STrib_shl_nv_V4, STrid_shl_V4, STrih_shl_V4, STrih_shl_n...
    O << "<<#"; 
    printImmOperand(MI, 1, O); 
    O << "+##"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 415:
    // TSTBIT0_f_Jumpnv_nt_V4, TSTBIT0_t_Jumpnv_nt_V4
    O << ".new, #0)) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 416:
    // TSTBIT0_f_Jumpnv_t_V4, TSTBIT0_t_Jumpnv_t_V4
    O << ".new, #0)) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 417:
    // Y2_dcfetchbo
    O << " + #"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 2 encoded into 7 bits for 88 unique commands.
  switch ((Bits >> 22) & 127) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_abs, A2_absp, A2_negp, CONVERT_df2d_nchop, CONVERT_df2ud_nchop, CON...
    O << ')'; 
    return;
    break;
  case 1:
    // A2_abssat, A2_negsat, HEXAGON_A2_abssat, HEXAGON_A2_negsat, HEXAGON_A2...
    O << "):sat"; 
    return;
    break;
  case 2:
    // A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_lh, A2_addh_h16_ll...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // A2_and, A2_andp, A2_combinew, A2_or, A2_orp, A4_bitsplit, A4_cmpbeq, A...
    O << ", "; 
    break;
  case 4:
    // A2_combine_hh, A2_combine_hl, M2_mpy_acc_hh_s0, M2_mpy_acc_hh_s1, M2_m...
    O << ".h, "; 
    break;
  case 5:
    // A2_combine_lh, A2_combine_ll, M2_mpy_acc_lh_s0, M2_mpy_acc_lh_s1, M2_m...
    O << ".l, "; 
    break;
  case 6:
    // A2_combineii, A2_tfrsi, A4_combineir, L4_add_memopb_io, L4_add_memoph_...
    printExtOperand(MI, 1, O); 
    break;
  case 7:
    // A2_paddf, A2_paddfnew, A2_paddt, A2_paddtnew, ADD_ri_cNotPt, ADD_ri_cP...
    O << " = add("; 
    printOperand(MI, 2, O); 
    break;
  case 8:
    // A2_pandf, A2_pandfnew, A2_pandt, A2_pandtnew
    O << " = and("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 9:
    // A2_porf, A2_porfnew, A2_port, A2_portnew
    O << " = or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 10:
    // A2_psubf, A2_psubfnew, A2_psubt, A2_psubtnew
    O << " = sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 11:
    // A2_pxorf, A2_pxorfnew, A2_pxort, A2_pxortnew
    O << " = xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // A2_tfr, A2_tfrcrr, A2_tfrp, A2_tfrrcr, ARGEXTEND, C2_tfrpr, C2_tfrrp, ...
    return;
    break;
  case 13:
    // A2_tfrf, A2_tfrfnew, A2_tfrpf, A2_tfrpfnew, A2_tfrpt, A2_tfrptnew, A2_...
    O << " = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 14:
    // A2_tfrpi, A4_combineii, HEXAGON_A2_combineii, HEXAGON_A2_subri, HEXAGO...
    printImmOperand(MI, 1, O); 
    break;
  case 15:
    // A4_addp_c, A4_subp_c, F2_sffma, F2_sffma_lib, F2_sffma_sc, F2_sffms, F...
    printOperand(MI, 2, O); 
    break;
  case 16:
    // A4_andn, A4_andnp, A4_orn, A4_ornp, HEXAGON_M4_and_andn, HEXAGON_M4_or...
    O << ", ~"; 
    break;
  case 17:
    // A4_bitspliti, A4_cmpbeqi, A4_cmpbgti, A4_cmpbgtui, A4_cmpheqi, A4_cmph...
    O << ", #"; 
    break;
  case 18:
    // A4_boundscheck_hi
    O << "):raw:hi"; 
    return;
    break;
  case 19:
    // A4_boundscheck_lo
    O << "):raw:lo"; 
    return;
    break;
  case 20:
    // A4_paslhf, A4_paslhfnew, A4_paslht, A4_paslhtnew
    O << " = aslh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 21:
    // A4_pasrhf, A4_pasrhfnew, A4_pasrht, A4_pasrhtnew
    O << " = asrh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 22:
    // A4_psxtbf, A4_psxtbfnew, A4_psxtbt, A4_psxtbtnew
    O << " = sxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 23:
    // A4_psxthf, A4_psxthfnew, A4_psxtht, A4_psxthtnew
    O << " = sxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 24:
    // A4_pzxtbf, A4_pzxtbfnew, A4_pzxtbt, A4_pzxtbtnew
    O << " = zxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 25:
    // A4_pzxthf, A4_pzxthfnew, A4_pzxtht, A4_pzxthtnew
    O << " = zxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 26:
    // C2_andn, C2_orn, HEXAGON_C2_andn, HEXAGON_C2_orn
    O << ", !"; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 27:
    // C2_ccombinewf, C2_ccombinewnewf, C2_ccombinewnewt, C2_ccombinewt
    O << " = combine("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 28:
    // C2_cmoveif, C2_cmoveit, C2_cmovenewif, C2_cmovenewit, TFRI_cNotPt_V4, ...
    O << " = #"; 
    break;
  case 29:
    // C4_and_and, C4_and_andn, C4_or_and, C4_or_andn, HEXAGON_S4_or_andix, H...
    O << ", and("; 
    printOperand(MI, 2, O); 
    break;
  case 30:
    // C4_and_or, C4_and_orn, C4_or_or, C4_or_orn, Hexagon_C4_and_or, Hexagon...
    O << ", or("; 
    printOperand(MI, 2, O); 
    break;
  case 31:
    // CMPEQri_f_Jumpnv_nt_V4, CMPEQri_t_Jumpnv_nt_V4, CMPEQrr_f_Jumpnv_nt_V4...
    O << ")) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 32:
    // CMPEQri_f_Jumpnv_t_V4, CMPEQri_t_Jumpnv_t_V4, CMPEQrr_f_Jumpnv_t_V4, C...
    O << ")) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 33:
    // CMPLTUrr_f_Jumpnv_nt_V4, CMPLTUrr_t_Jumpnv_nt_V4, CMPLTrr_f_Jumpnv_nt_...
    O << ".new)) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 34:
    // CMPLTUrr_f_Jumpnv_t_V4, CMPLTUrr_t_Jumpnv_t_V4, CMPLTrr_f_Jumpnv_t_V4,...
    O << ".new)) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 35:
    // CONST32, CONST32GP_set, CONST32_set, FCONST32_nsdata, HI, LO
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 36:
    // CONST32_set_jt, HI_jt, LO_jt
    printJumpTable(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 37:
    // CONVERT_df2d, CONVERT_df2ud, CONVERT_df2uw, CONVERT_df2w, CONVERT_sf2d...
    O << "):chop"; 
    return;
    break;
  case 38:
    // F2_dfimm_n, F2_sfimm_n, HEXAGON_F2_dfimm_n, HEXAGON_F2_sfimm_n
    O << "):neg"; 
    return;
    break;
  case 39:
    // F2_dfimm_p, F2_sfimm_p, HEXAGON_F2_dfimm_p, HEXAGON_F2_sfimm_p
    O << "):pos"; 
    return;
    break;
  case 40:
    // F2_sfrecipa
    O << " = sfrecipa("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 41:
    // HEXAGON_A2_combine_hh, HEXAGON_A2_combine_hl, HEXAGON_M2_mpy_acc_hh_s0...
    O << ".H, "; 
    break;
  case 42:
    // HEXAGON_A2_combine_lh, HEXAGON_A2_combine_ll, HEXAGON_M2_mpy_acc_lh_s0...
    O << ".L, "; 
    break;
  case 43:
    // HEXAGON_A2_svavghs, HEXAGON_A2_vavghr, HEXAGON_A2_vavgubr, HEXAGON_A2_...
    O << "):rnd"; 
    return;
    break;
  case 44:
    // HEXAGON_A2_vavghcr, HEXAGON_A2_vavgwcr
    O << "):crnd"; 
    return;
    break;
  case 45:
    // HEXAGON_A2_vnavghcr, HEXAGON_A2_vnavgwcr
    O << "):crnd:sat"; 
    return;
    break;
  case 46:
    // HEXAGON_A2_vnavghr, HEXAGON_A2_vnavgwr, HEXAGON_M2_cmpyrs_s0, HEXAGON_...
    O << "):rnd:sat"; 
    return;
    break;
  case 47:
    // HEXAGON_F2_dffms_lib
    O << "):lib"; 
    return;
    break;
  case 48:
    // HEXAGON_M2_cmacs_s1, HEXAGON_M2_cmpys_s1, HEXAGON_M2_cnacs_s1, HEXAGON...
    O << "):<<1:sat"; 
    return;
    break;
  case 49:
    // HEXAGON_M2_cmacsc_s0, HEXAGON_M2_cmpysc_s0, HEXAGON_M2_cnacsc_s0
    O << "*):sat"; 
    return;
    break;
  case 50:
    // HEXAGON_M2_cmacsc_s1, HEXAGON_M2_cmpysc_s1, HEXAGON_M2_cnacsc_s1
    O << "*):<<1:sat"; 
    return;
    break;
  case 51:
    // HEXAGON_M2_cmpyrs_s1, HEXAGON_M2_mmachs_rs1, HEXAGON_M2_mmacls_rs1, HE...
    O << "):<<1:rnd:sat"; 
    return;
    break;
  case 52:
    // HEXAGON_M2_cmpyrsc_s0
    O << "*):rnd:sat"; 
    return;
    break;
  case 53:
    // HEXAGON_M2_cmpyrsc_s1
    O << "*):<<1:rnd:sat"; 
    return;
    break;
  case 54:
    // HEXAGON_M2_macsin
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 55:
    // HEXAGON_M2_vrcmaci_s0c, HEXAGON_M2_vrcmacr_s0c, HEXAGON_M2_vrcmpyi_s0c...
    O << "*)"; 
    return;
    break;
  case 56:
    // J4_cmpeq_fp0_jump_nt, J4_cmpeqi_fp0_jump_nt, J4_cmpgt_fp0_jump_nt, J4_...
    O << "); if (!p0.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 57:
    // J4_cmpeq_fp0_jump_t, J4_cmpeqi_fp0_jump_t, J4_cmpgt_fp0_jump_t, J4_cmp...
    O << "); if (!p0.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 58:
    // J4_cmpeq_fp1_jump_nt, J4_cmpeqi_fp1_jump_nt, J4_cmpgt_fp1_jump_nt, J4_...
    O << "); if (!p1.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 59:
    // J4_cmpeq_fp1_jump_t, J4_cmpeqi_fp1_jump_t, J4_cmpgt_fp1_jump_t, J4_cmp...
    O << "); if (!p1.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 60:
    // J4_cmpeq_tp0_jump_nt, J4_cmpeqi_tp0_jump_nt, J4_cmpgt_tp0_jump_nt, J4_...
    O << "); if (p0.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 61:
    // J4_cmpeq_tp0_jump_t, J4_cmpeqi_tp0_jump_t, J4_cmpgt_tp0_jump_t, J4_cmp...
    O << "); if (p0.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 62:
    // J4_cmpeq_tp1_jump_nt, J4_cmpeqi_tp1_jump_nt, J4_cmpgt_tp1_jump_nt, J4_...
    O << "); if (p1.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 63:
    // J4_cmpeq_tp1_jump_t, J4_cmpeqi_tp1_jump_t, J4_cmpgt_tp1_jump_t, J4_cmp...
    O << "); if (p1.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 64:
    // J4_jumpsetr
    O << " ; jump "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 65:
    // L2_ploadrbf_io, L2_ploadrbf_pi, L2_ploadrbfnew_io, L2_ploadrbfnew_pi, ...
    O << " = memb("; 
    break;
  case 66:
    // L2_ploadrdf_io, L2_ploadrdf_pi, L2_ploadrdfnew_io, L2_ploadrdfnew_pi, ...
    O << " = memd("; 
    break;
  case 67:
    // L2_ploadrhf_io, L2_ploadrhf_pi, L2_ploadrhfnew_io, L2_ploadrhfnew_pi, ...
    O << " = memh("; 
    break;
  case 68:
    // L2_ploadrif_io, L2_ploadrif_pi, L2_ploadrifnew_io, L2_ploadrifnew_pi, ...
    O << " = memw("; 
    break;
  case 69:
    // L2_ploadrubf_io, L2_ploadrubf_pi, L2_ploadrubfnew_io, L2_ploadrubfnew_...
    O << " = memub("; 
    break;
  case 70:
    // L2_ploadruhf_io, L2_ploadruhf_pi, L2_ploadruhfnew_io, L2_ploadruhfnew_...
    O << " = memuh("; 
    break;
  case 71:
    // L4_ploadrbf_abs, L4_ploadrbfnew_abs, L4_ploadrbt_abs, L4_ploadrbtnew_a...
    O << " = memb(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 72:
    // L4_ploadrdf_abs, L4_ploadrdfnew_abs, L4_ploadrdt_abs, L4_ploadrdtnew_a...
    O << " = memd(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 73:
    // L4_ploadrhf_abs, L4_ploadrhfnew_abs, L4_ploadrht_abs, L4_ploadrhtnew_a...
    O << " = memh(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 74:
    // L4_ploadrif_abs, L4_ploadrifnew_abs, L4_ploadrit_abs, L4_ploadritnew_a...
    O << " = memw(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 75:
    // L4_ploadrubf_abs, L4_ploadrubfnew_abs, L4_ploadrubt_abs, L4_ploadrubtn...
    O << " = memub(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 76:
    // L4_ploadruhf_abs, L4_ploadruhfnew_abs, L4_ploadruht_abs, L4_ploadruhtn...
    O << " = memuh(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 77:
    // LDrid_f, LDriw_f
    printMEMriOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 78:
    // M2_macsin
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 79:
    // M4_mpyri_addi, M4_mpyrr_addi
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 80:
    // S2_storerbnew_pi, S2_storerbnew_pr, S2_storerbnewabs, S2_storerbnewgp,...
    O << ".new"; 
    return;
    break;
  case 81:
    // S2_storerf_pbr, S2_storerf_pci, S2_storerf_pcr, S2_storerf_pi, S2_stor...
    O << ".h"; 
    return;
    break;
  case 82:
    // S2_tableidxb, S2_tableidxd, S2_tableidxh, S2_tableidxw
    O << "):raw"; 
    return;
    break;
  case 83:
    // S4_addi_asl_ri, S4_andi_asl_ri, S4_ori_asl_ri
    O << ", asl("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 84:
    // S4_addi_lsr_ri, S4_andi_lsr_ri, S4_ori_lsr_ri
    O << ", lsr("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 85:
    // TFRI_cNotPt_f
    O << " =#"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 86:
    // TFR_FI
    printFrameIndexOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 87:
    // TFR_PdFalse
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 3 encoded into 6 bits for 44 unique commands.
  switch ((Bits >> 29) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addp, A2_addpsat, A2_addsat, A2_addsp, A2_addsph, A2_addspl...
    O << ", "; 
    break;
  case 1:
    // A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_sat_hh, A2_addh_h16_sat_hl...
    O << ".h, "; 
    printOperand(MI, 2, O); 
    break;
  case 2:
    // A2_addh_h16_lh, A2_addh_h16_ll, A2_addh_h16_sat_lh, A2_addh_h16_sat_ll...
    O << ".l, "; 
    printOperand(MI, 2, O); 
    break;
  case 3:
    // A2_and, A2_andp, A2_combine_hh, A2_combine_hl, A2_combine_lh, A2_combi...
    printOperand(MI, 2, O); 
    break;
  case 4:
    // A2_combineii, A4_combineii, ADD_ri, ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_...
    O << ", #"; 
    break;
  case 5:
    // A2_tfrpi, A2_tfrsi, HEXAGON_A2_tfrpi, HEXAGON_A2_tfrsi, TFRI64_V4, TFR...
    return;
    break;
  case 6:
    // A4_bitspliti, A4_cmpbeqi, A4_cmpbgti, A4_cround_ri, A4_round_ri, A4_ro...
    printImmOperand(MI, 2, O); 
    break;
  case 7:
    // A4_cmpbgtui, A4_cmpheqi, A4_cmphgti, A4_cmphgtui, A4_combineri, A4_rcm...
    printExtOperand(MI, 2, O); 
    break;
  case 8:
    // C4_and_andn, C4_and_orn, C4_or_andn, C4_or_orn, Hexagon_C4_and_andn, H...
    O << ", !"; 
    printOperand(MI, 3, O); 
    break;
  case 9:
    // CONST32_Float_Real, CONST32_Int_Real, HI_label, HIi, LO_label, LOi
    O << ')'; 
    return;
    break;
  case 10:
    // HEXAGON_A2_addh_h16_hh, HEXAGON_A2_addh_h16_hl, HEXAGON_A2_addh_h16_sa...
    O << ".H, "; 
    printOperand(MI, 2, O); 
    break;
  case 11:
    // HEXAGON_A2_addh_h16_lh, HEXAGON_A2_addh_h16_ll, HEXAGON_A2_addh_h16_sa...
    O << ".L, "; 
    printOperand(MI, 2, O); 
    break;
  case 12:
    // HEXAGON_M2_acci, HEXAGON_M2_dpmpyss_acc_s0, HEXAGON_M2_dpmpyss_nac_s0,...
    printOperand(MI, 3, O); 
    break;
  case 13:
    // HEXAGON_M2_accii, HEXAGON_M2_macsip, HEXAGON_M2_naccii, HEXAGON_S2_asl...
    printImmOperand(MI, 3, O); 
    break;
  case 14:
    // HEXAGON_circ_ldd, L2_loadrb_pi, L2_loadrd_pi, L2_loadrh_pi, L2_loadri_...
    O << "++#"; 
    break;
  case 15:
    // Hexagon_S4_addaddi, S4_addaddi
    O << ", add("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    break;
  case 16:
    // Hexagon_S4_subaddi, S4_subaddi
    O << ", sub(#"; 
    break;
  case 17:
    // J4_jumpseti
    O << " ; jump "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 18:
    // L2_loadrb_io, L2_loadrd_io, L2_loadrh_io, L2_loadri_io, L2_loadrub_io,...
    O << " + #"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 19:
    // L2_loadrb_pbr, L2_loadrd_pbr, L2_loadrh_pbr, L2_loadri_pbr, L2_loadrub...
    O << " ++ "; 
    printOperand(MI, 3, O); 
    O << ":brev)"; 
    return;
    break;
  case 20:
    // L2_loadrb_pci, L2_loadrd_pci, L2_loadrh_pci, L2_loadri_pci, L2_loadrub...
    O << " ++ #"; 
    printImmOperand(MI, 3, O); 
    O << ":circ("; 
    printOperand(MI, 4, O); 
    O << "))"; 
    return;
    break;
  case 21:
    // L2_loadrb_pcr, L2_loadrd_pcr, L2_loadrh_pcr, L2_loadri_pcr, L2_loadrub...
    O << " ++ I:circ("; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 22:
    // L2_loadrb_pr, L2_loadrd_pr, L2_loadrh_pr, L2_loadri_pr, L2_loadrub_pr,...
    O << "++"; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 23:
    // L4_add_memopb_io, L4_add_memoph_io, L4_add_memopw_io
    O << ") += "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 24:
    // L4_and_memopb_io, L4_and_memoph_io, L4_and_memopw_io
    O << ") &= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 25:
    // L4_iadd_memopb_io, L4_iadd_memoph_io, L4_iadd_memopw_io
    O << ") += #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 26:
    // L4_iand_memopb_io, L4_iand_memoph_io, L4_iand_memopw_io
    O << ") = clrbit(#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 27:
    // L4_ior_memopb_io, L4_ior_memoph_io, L4_ior_memopw_io
    O << ") = setbit(#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 28:
    // L4_isub_memopb_io, L4_isub_memoph_io, L4_isub_memopw_io
    O << ") -= #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 29:
    // L4_loadrb_rr, L4_loadrd_rr, L4_loadrh_rr, L4_loadri_rr, L4_loadrub_rr,...
    O << " + "; 
    printOperand(MI, 2, O); 
    O << "<<#"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 30:
    // L4_or_memopb_io, L4_or_memoph_io, L4_or_memopw_io
    O << ") |= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 31:
    // L4_sub_memopb_io, L4_sub_memoph_io, L4_sub_memopw_io
    O << ") -= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 32:
    // LDrib_abs_set_V4, LDrid_abs_set_V4, LDrih_abs_set_V4, LDriub_abs_set_V...
    O << "=##"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 33:
    // LDrib_ind_lo_V4, LDrih_ind_lo_V4, LDriub_ind_anyext_lo_V4, LDriub_ind_...
    O << "<<#"; 
    printImmOperand(MI, 2, O); 
    O << "+##"; 
    printGlobalOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 34:
    // LDrid_indexed_f, LDriw_indexed_f, S2_pstorerbf_io, S2_pstorerbnewf_io,...
    O << "+#"; 
    break;
  case 35:
    // M2_accii, M2_macsip, M2_naccii, S4_or_andi, S4_or_ori
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 36:
    // M4_mpyri_addr, M4_mpyrr_addr
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 37:
    // M4_mpyri_addr_u2
    O << ", mpyi(#"; 
    printImmOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 38:
    // S2_storerb_io, S2_storerbnew_io, S2_storerd_io, S2_storerf_io, S2_stor...
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 39:
    // S4_pstorerbf_rr, S4_pstorerbfnew_rr, S4_pstorerbnewf_rr, S4_pstorerbne...
    O << '+'; 
    printOperand(MI, 2, O); 
    O << "<<#"; 
    printImmOperand(MI, 3, O); 
    O << ") = "; 
    printOperand(MI, 4, O); 
    break;
  case 40:
    // S4_storeirb_io, S4_storeirh_io, S4_storeiri_io
    O << ")=#"; 
    printExtOperand(MI, 2, O); 
    return;
    break;
  case 41:
    // S4_subi_asl_ri
    O << ", asl("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 42:
    // S4_subi_lsr_ri
    O << ", lsr("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 43:
    // STrih_offset_ext_V4, STriw_offset_ext_V4
    O << ") = ##"; 
    printGlobalOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 6 bits for 60 unique commands.
  switch ((Bits >> 35) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addp, A2_addpsat, A2_addsat, A2_addsp, A2_addsph, A2_addspl...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // A2_addh_h16_hh, A2_addh_h16_lh, A2_subh_h16_hh, A2_subh_h16_lh
    O << ".h):<<16"; 
    return;
    break;
  case 2:
    // A2_addh_h16_hl, A2_addh_h16_ll, A2_subh_h16_hl, A2_subh_h16_ll
    O << ".l):<<16"; 
    return;
    break;
  case 3:
    // A2_addh_h16_sat_hh, A2_addh_h16_sat_lh, A2_subh_h16_sat_hh, A2_subh_h1...
    O << ".h):sat:<<16"; 
    return;
    break;
  case 4:
    // A2_addh_h16_sat_hl, A2_addh_h16_sat_ll, A2_subh_h16_sat_hl, A2_subh_h1...
    O << ".l):sat:<<16"; 
    return;
    break;
  case 5:
    // A2_addh_l16_hl, A2_combine_hh, A2_combine_lh, A2_subh_l16_hl, M2_mpy_a...
    O << ".h)"; 
    return;
    break;
  case 6:
    // A2_addh_l16_ll, A2_combine_hl, A2_combine_ll, A2_subh_l16_ll, M2_mpy_a...
    O << ".l)"; 
    return;
    break;
  case 7:
    // A2_addh_l16_sat_hl, A2_subh_l16_sat_hl, M2_mpy_acc_sat_hh_s0, M2_mpy_a...
    O << ".h):sat"; 
    return;
    break;
  case 8:
    // A2_addh_l16_sat_ll, A2_subh_l16_sat_ll, M2_mpy_acc_sat_hl_s0, M2_mpy_a...
    O << ".l):sat"; 
    return;
    break;
  case 9:
    // A2_and, A2_andp, A2_combinew, A2_or, A2_orp, A4_andn, A4_andnp, A4_bit...
    O << ')'; 
    return;
    break;
  case 10:
    // A2_combineii, ADJDYNALLOC, HEXAGON_A2_addi, HEXAGON_A2_combineii, Hexa...
    printImmOperand(MI, 2, O); 
    break;
  case 11:
    // A2_paddf, A2_paddfnew, A2_paddt, A2_paddtnew, A4_addp_c, A4_subp_c, C4...
    printOperand(MI, 3, O); 
    break;
  case 12:
    // A4_combineii, ADD_ri, S2_pstorerbf_io, S2_pstorerbnewf_io, S2_pstorerb...
    printExtOperand(MI, 2, O); 
    break;
  case 13:
    // A4_round_ri_sat, A4_round_rr_sat, HEXAGON_A4_round_ri_sat, HEXAGON_A4_...
    O << "):sat"; 
    return;
    break;
  case 14:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, S4_addaddi, ...
    printExtOperand(MI, 3, O); 
    break;
  case 15:
    // C2_cmoveif, C2_cmoveit, C2_cmovenewif, C2_cmovenewit, S2_storerb_io, S...
    return;
    break;
  case 16:
    // C2_mux, C2_muxri, HEXAGON_C2_mux, HEXAGON_C2_muxri, M4_mpyrr_addr
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 17:
    // C2_muxii, C2_muxir, HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_S2_ext...
    O << ", #"; 
    break;
  case 18:
    // C4_and_andn, C4_and_orn, C4_or_andn, C4_or_orn
    O << "))"; 
    return;
    break;
  case 19:
    // HEXAGON_A2_addh_h16_hh, HEXAGON_A2_addh_h16_lh, HEXAGON_A2_subh_h16_hh...
    O << ".H):<<16"; 
    return;
    break;
  case 20:
    // HEXAGON_A2_addh_h16_hl, HEXAGON_A2_addh_h16_ll, HEXAGON_A2_subh_h16_hl...
    O << ".L):<<16"; 
    return;
    break;
  case 21:
    // HEXAGON_A2_addh_h16_sat_hh, HEXAGON_A2_addh_h16_sat_lh, HEXAGON_A2_sub...
    O << ".H):sat:<<16"; 
    return;
    break;
  case 22:
    // HEXAGON_A2_addh_h16_sat_hl, HEXAGON_A2_addh_h16_sat_ll, HEXAGON_A2_sub...
    O << ".L):sat:<<16"; 
    return;
    break;
  case 23:
    // HEXAGON_A2_addh_l16_hl, HEXAGON_A2_combine_hh, HEXAGON_A2_combine_lh, ...
    O << ".H)"; 
    return;
    break;
  case 24:
    // HEXAGON_A2_addh_l16_ll, HEXAGON_A2_combine_hl, HEXAGON_A2_combine_ll, ...
    O << ".L)"; 
    return;
    break;
  case 25:
    // HEXAGON_A2_addh_l16_sat_hl, HEXAGON_A2_subh_l16_sat_hl, HEXAGON_M2_mpy...
    O << ".H):sat"; 
    return;
    break;
  case 26:
    // HEXAGON_A2_addh_l16_sat_ll, HEXAGON_A2_subh_l16_sat_ll, HEXAGON_M2_mpy...
    O << ".L):sat"; 
    return;
    break;
  case 27:
    // HEXAGON_M2_dpmpyss_rnd_s0, HEXAGON_S2_asr_i_r_rnd, HEXAGON_S5_vasrhrnd...
    O << "):rnd"; 
    return;
    break;
  case 28:
    // HEXAGON_M2_hmmpyh_rs1, HEXAGON_M2_mpy_sat_rnd_hh_s1, HEXAGON_M2_mpy_sa...
    O << ".H):<<1:rnd:sat"; 
    return;
    break;
  case 29:
    // HEXAGON_M2_hmmpyl_rs1, HEXAGON_M2_mpy_sat_rnd_hl_s1, HEXAGON_M2_mpy_sa...
    O << ".L):<<1:rnd:sat"; 
    return;
    break;
  case 30:
    // HEXAGON_M2_mpy_acc_hh_s1, HEXAGON_M2_mpy_acc_lh_s1, HEXAGON_M2_mpy_hh_...
    O << ".H):<<1"; 
    return;
    break;
  case 31:
    // HEXAGON_M2_mpy_acc_hl_s1, HEXAGON_M2_mpy_acc_ll_s1, HEXAGON_M2_mpy_hl_...
    O << ".L):<<1"; 
    return;
    break;
  case 32:
    // HEXAGON_M2_mpy_acc_sat_hh_s1, HEXAGON_M2_mpy_acc_sat_lh_s1, HEXAGON_M2...
    O << ".H):<<1:sat"; 
    return;
    break;
  case 33:
    // HEXAGON_M2_mpy_acc_sat_hl_s1, HEXAGON_M2_mpy_acc_sat_ll_s1, HEXAGON_M2...
    O << ".L):<<1:sat"; 
    return;
    break;
  case 34:
    // HEXAGON_M2_mpy_rnd_hh_s0, HEXAGON_M2_mpy_rnd_lh_s0, HEXAGON_M2_mpyd_rn...
    O << ".H):rnd"; 
    return;
    break;
  case 35:
    // HEXAGON_M2_mpy_rnd_hh_s1, HEXAGON_M2_mpy_rnd_lh_s1, HEXAGON_M2_mpyd_rn...
    O << ".H):<<1:rnd"; 
    return;
    break;
  case 36:
    // HEXAGON_M2_mpy_rnd_hl_s0, HEXAGON_M2_mpy_rnd_ll_s0, HEXAGON_M2_mpyd_rn...
    O << ".L):rnd"; 
    return;
    break;
  case 37:
    // HEXAGON_M2_mpy_rnd_hl_s1, HEXAGON_M2_mpy_rnd_ll_s1, HEXAGON_M2_mpyd_rn...
    O << ".L):<<1:rnd"; 
    return;
    break;
  case 38:
    // HEXAGON_M2_mpy_sat_rnd_hh_s0, HEXAGON_M2_mpy_sat_rnd_lh_s0
    O << ".H):rnd:sat"; 
    return;
    break;
  case 39:
    // HEXAGON_M2_mpy_sat_rnd_hl_s0, HEXAGON_M2_mpy_sat_rnd_ll_s0
    O << ".L):rnd:sat"; 
    return;
    break;
  case 40:
    // HEXAGON_S4_or_andix, Hexagon_S4_addaddi, L2_loadrb_pi, L2_loadrd_pi, L...
    printImmOperand(MI, 3, O); 
    break;
  case 41:
    // HEXAGON_circ_ldd
    printImmOperand(MI, 5, O); 
    O << ":circ("; 
    printOperand(MI, 4, O); 
    O << "))"; 
    return;
    break;
  case 42:
    // L2_ploadrbf_io, L2_ploadrbfnew_io, L2_ploadrbt_io, L2_ploadrbtnew_io, ...
    O << " + #"; 
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 43:
    // L2_ploadrbf_pi, L2_ploadrbfnew_pi, L2_ploadrbt_pi, L2_ploadrbtnew_pi, ...
    O << "++#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 44:
    // L4_ploadrbf_rr, L4_ploadrbfnew_rr, L4_ploadrbt_rr, L4_ploadrbtnew_rr, ...
    O << '+'; 
    printOperand(MI, 3, O); 
    O << "<<#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 45:
    // M2_hmmpyh_rs1, M2_mpy_sat_rnd_hh_s1, M2_mpy_sat_rnd_lh_s1
    O << ".h):<<1:rnd:sat"; 
    return;
    break;
  case 46:
    // M2_hmmpyh_s1, M2_mpy_acc_sat_hh_s1, M2_mpy_acc_sat_lh_s1, M2_mpy_nac_s...
    O << ".h):<<1:sat"; 
    return;
    break;
  case 47:
    // M2_hmmpyl_rs1, M2_mpy_sat_rnd_hl_s1, M2_mpy_sat_rnd_ll_s1
    O << ".l):<<1:rnd:sat"; 
    return;
    break;
  case 48:
    // M2_hmmpyl_s1, M2_mpy_acc_sat_hl_s1, M2_mpy_acc_sat_ll_s1, M2_mpy_nac_s...
    O << ".l):<<1:sat"; 
    return;
    break;
  case 49:
    // M2_mpy_acc_hh_s1, M2_mpy_acc_lh_s1, M2_mpy_hh_s1, M2_mpy_lh_s1, M2_mpy...
    O << ".h):<<1"; 
    return;
    break;
  case 50:
    // M2_mpy_acc_hl_s1, M2_mpy_acc_ll_s1, M2_mpy_hl_s1, M2_mpy_ll_s1, M2_mpy...
    O << ".l):<<1"; 
    return;
    break;
  case 51:
    // M2_mpy_rnd_hh_s0, M2_mpy_rnd_lh_s0, M2_mpyd_rnd_hh_s0, M2_mpyd_rnd_lh_...
    O << ".h):rnd"; 
    return;
    break;
  case 52:
    // M2_mpy_rnd_hh_s1, M2_mpy_rnd_lh_s1, M2_mpyd_rnd_hh_s1, M2_mpyd_rnd_lh_...
    O << ".h):<<1:rnd"; 
    return;
    break;
  case 53:
    // M2_mpy_rnd_hl_s0, M2_mpy_rnd_ll_s0, M2_mpyd_rnd_hl_s0, M2_mpyd_rnd_ll_...
    O << ".l):rnd"; 
    return;
    break;
  case 54:
    // M2_mpy_rnd_hl_s1, M2_mpy_rnd_ll_s1, M2_mpyd_rnd_hl_s1, M2_mpyd_rnd_ll_...
    O << ".l):<<1:rnd"; 
    return;
    break;
  case 55:
    // M2_mpy_sat_rnd_hh_s0, M2_mpy_sat_rnd_lh_s0
    O << ".h):rnd:sat"; 
    return;
    break;
  case 56:
    // M2_mpy_sat_rnd_hl_s0, M2_mpy_sat_rnd_ll_s0
    O << ".l):rnd:sat"; 
    return;
    break;
  case 57:
    // M2_mpy_up_s1_sat, M4_mac_up_s1_sat, M4_nac_up_s1_sat
    O << "):<<1:sat"; 
    return;
    break;
  case 58:
    // S2_storerbnew_io, S2_storerhnew_io, S2_storerinew_io, S4_pstorerbnewf_...
    O << ".new"; 
    return;
    break;
  case 59:
    // S2_storerf_io, S4_pstorerff_rr, S4_pstorerffnew_rr, S4_pstorerft_rr, S...
    O << ".h"; 
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 41) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addp, A2_addsp, A2_combineii, A2_paddf, A2_paddfnew, A2_pad...
    O << ')'; 
    return;
    break;
  case 1:
    // A2_addpsat, A2_addsat, A2_subsat, HEXAGON_A2_addsat, HEXAGON_A2_subsat
    O << "):sat"; 
    return;
    break;
  case 2:
    // A2_addsph
    O << "):raw:hi"; 
    return;
    break;
  case 3:
    // A2_addspl
    O << "):raw:lo"; 
    return;
    break;
  case 4:
    // A4_addp_c, A4_subp_c, F2_sffma_sc, HEXAGON_F2_dffma_sc, HEXAGON_F2_sff...
    O << ", "; 
    break;
  case 5:
    // C2_muxii, HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_S2_extractu, HEX...
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 6:
    // C2_muxir, M4_mpyri_addr
    printExtOperand(MI, 3, O); 
    break;
  case 7:
    // C4_and_and, C4_and_or, C4_or_and, C4_or_or, HEXAGON_S4_or_andix, M4_mp...
    O << "))"; 
    return;
    break;
  case 8:
    // F2_sffma_lib, F2_sffms_lib, HEXAGON_F2_dffma_lib, HEXAGON_F2_sffma_lib...
    O << "):lib"; 
    return;
    break;
  case 9:
    // Hexagon_S2_insert, Hexagon_S2_insertp, S2_insert, S2_insertp
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 10:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbnewf_...
    O << ") = "; 
    break;
  case 11:
    // S4_storeirbf_io, S4_storeirbfnew_io, S4_storeirbt_io, S4_storeirbtnew_...
    O << ")=#"; 
    printExtOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 45) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A4_addp_c, A4_subp_c, F2_sffma_sc, HEXAGON_F2_dffma_sc, HEXAGON_F2_sff...
    printOperand(MI, 4, O); 
    break;
  case 1:
    // C2_muxir
    O << ')'; 
    return;
    break;
  case 2:
    // Hexagon_S4_subaddi, S2_pstorerbf_io, S2_pstorerbnewf_io, S2_pstorerbne...
    printOperand(MI, 3, O); 
    break;
  case 3:
    // M4_mpyri_addr
    O << "))"; 
    return;
    break;
  }


  // Fragment 7 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 47) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A4_addp_c, A4_subp_c
    O << "):carry"; 
    return;
    break;
  case 1:
    // F2_sffma_sc, HEXAGON_F2_dffma_sc, HEXAGON_F2_sffma_sc
    O << "):scale"; 
    return;
    break;
  case 2:
    // Hexagon_S4_subaddi
    O << ')'; 
    return;
    break;
  case 3:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbt_io,...
    return;
    break;
  case 4:
    // S2_pstorerbnewf_io, S2_pstorerbnewf_pi, S2_pstorerbnewfnew_pi, S2_psto...
    O << ".new"; 
    return;
    break;
  case 5:
    // S2_pstorerff_io, S2_pstorerff_pi, S2_pstorerffnew_pi, S2_pstorerft_io,...
    O << ".h"; 
    return;
    break;
  case 6:
    // S4_subaddi
    O << "))"; 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *HexagonInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 78 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'c', '1', '1', ':', '1', '0', 0,
  /* 7 */ 'r', '1', '1', ':', '1', '0', 0,
  /* 14 */ 'r', '1', '0', 0,
  /* 18 */ 'r', '2', '1', ':', '2', '0', 0,
  /* 25 */ 'r', '2', '0', 0,
  /* 29 */ 'r', '3', '1', ':', '3', '0', 0,
  /* 36 */ 'r', '3', '0', 0,
  /* 40 */ 'c', '1', ':', '0', 0,
  /* 45 */ 'r', '1', ':', '0', 0,
  /* 50 */ 'p', '3', ':', '0', 0,
  /* 55 */ 's', 'a', '0', 0,
  /* 59 */ 'l', 'c', '0', 0,
  /* 63 */ 'm', '0', 0,
  /* 66 */ 'p', '0', 0,
  /* 69 */ 'r', '0', 0,
  /* 72 */ 'c', 's', '0', 0,
  /* 76 */ 'r', '1', '1', 0,
  /* 80 */ 'r', '2', '1', 0,
  /* 84 */ 'r', '3', '1', 0,
  /* 88 */ 's', 'a', '1', 0,
  /* 92 */ 'l', 'c', '1', 0,
  /* 96 */ 'm', '1', 0,
  /* 99 */ 'p', '1', 0,
  /* 102 */ 'r', '1', 0,
  /* 105 */ 'c', 's', '1', 0,
  /* 109 */ 'c', '1', '3', ':', '1', '2', 0,
  /* 116 */ 'r', '1', '3', ':', '1', '2', 0,
  /* 123 */ 'r', '1', '2', 0,
  /* 127 */ 'r', '2', '3', ':', '2', '2', 0,
  /* 134 */ 'r', '2', '2', 0,
  /* 138 */ 'c', '3', ':', '2', 0,
  /* 143 */ 'r', '3', ':', '2', 0,
  /* 148 */ 'p', '2', 0,
  /* 151 */ 'r', '2', 0,
  /* 154 */ 'r', '1', '3', 0,
  /* 158 */ 'r', '2', '3', 0,
  /* 162 */ 'p', '3', 0,
  /* 165 */ 'r', '3', 0,
  /* 168 */ 'c', '1', '5', ':', '1', '4', 0,
  /* 175 */ 'r', '1', '5', ':', '1', '4', 0,
  /* 182 */ 'r', '1', '4', 0,
  /* 186 */ 'r', '2', '5', ':', '2', '4', 0,
  /* 193 */ 'r', '2', '4', 0,
  /* 197 */ 'r', '5', ':', '4', 0,
  /* 202 */ 'r', '4', 0,
  /* 205 */ 'r', '1', '5', 0,
  /* 209 */ 'r', '2', '5', 0,
  /* 213 */ 'r', '5', 0,
  /* 216 */ 'r', '1', '7', ':', '1', '6', 0,
  /* 223 */ 'r', '1', '6', 0,
  /* 227 */ 'r', '2', '7', ':', '2', '6', 0,
  /* 234 */ 'r', '2', '6', 0,
  /* 238 */ 'c', '7', ':', '6', 0,
  /* 243 */ 'r', '7', ':', '6', 0,
  /* 248 */ 'c', '6', 0,
  /* 251 */ 'r', '6', 0,
  /* 254 */ 'r', '1', '7', 0,
  /* 258 */ 'r', '2', '7', 0,
  /* 262 */ 'c', '7', 0,
  /* 265 */ 'r', '7', 0,
  /* 268 */ 'r', '1', '9', ':', '1', '8', 0,
  /* 275 */ 'r', '1', '8', 0,
  /* 279 */ 'r', '2', '9', ':', '2', '8', 0,
  /* 286 */ 'r', '2', '8', 0,
  /* 290 */ 'c', '9', ':', '8', 0,
  /* 295 */ 'r', '9', ':', '8', 0,
  /* 300 */ 'r', '8', 0,
  /* 303 */ 'r', '1', '9', 0,
  /* 307 */ 'r', '2', '9', 0,
  /* 311 */ 'r', '9', 0,
  /* 314 */ 'p', 'c', 0,
  /* 317 */ 'u', 's', 'r', '.', 'o', 'v', 'f', 0,
  /* 325 */ 'u', 'p', 'c', 'y', 'c', 'l', 'e', 'h', 'i', 0,
  /* 335 */ 'u', 'p', 'c', 'y', 'c', 'l', 'e', 'l', 'o', 0,
  /* 345 */ 'u', 'g', 'p', 0,
  /* 349 */ 'u', 's', 'r', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    109, 346, 314, 345, 168, 325, 335, 349, 317, 248, 262, 72, 105, 45, 
    143, 197, 243, 295, 7, 116, 175, 216, 268, 18, 127, 186, 227, 279, 
    29, 59, 92, 63, 96, 66, 99, 148, 162, 69, 102, 151, 165, 202, 
    213, 251, 265, 300, 311, 14, 76, 123, 154, 182, 205, 223, 254, 275, 
    303, 25, 80, 134, 158, 193, 209, 234, 258, 286, 307, 36, 84, 55, 
    88, 40, 138, 238, 290, 0, 50, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool HexagonInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Hexagon::A2_tfrcrr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Hexagon::C6) {
      // (A2_tfrcrr IntRegs:$Rd, C6)
      AsmString = "$\x01 = m0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Hexagon::C7) {
      // (A2_tfrcrr IntRegs:$Rd, C7)
      AsmString = "$\x01 = m1";
      break;
    }
    return false;
  case Hexagon::A2_tfrrcr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Hexagon::C6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (A2_tfrrcr C6, IntRegs:$Rs)
      AsmString = "m0 = $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Hexagon::C7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (A2_tfrrcr C7, IntRegs:$Rs)
      AsmString = "m1 = $\x02";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void HexagonInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx, raw_ostream &OS) {
  llvm_unreachable("Unknown PrintMethod kind");
}

#endif // PRINT_ALIAS_INSTR
