/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    9269U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    9262U,	// BUNDLE
    9279U,	// LIFETIME_START
    9249U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// FRAME_ALLOC
    21610U,	// ABSQ_S_PH
    17993U,	// ABSQ_S_QB
    24723U,	// ABSQ_S_W
    67129096U,	// ADD
    18262U,	// ADDIUPC
    22418U,	// ADDIUR1SP_MM
    67125514U,	// ADDIUR2_MM
    4489515U,	// ADDIUS5_MM
    546766U,	// ADDIUSP_MM
    67130279U,	// ADDQH_PH
    67130396U,	// ADDQH_R_PH
    67133262U,	// ADDQH_R_W
    67132865U,	// ADDQH_W
    67130353U,	// ADDQ_PH
    67130452U,	// ADDQ_S_PH
    67133567U,	// ADDQ_S_W
    67127159U,	// ADDSC
    67125834U,	// ADDS_A_B
    67127284U,	// ADDS_A_D
    67129224U,	// ADDS_A_H
    67132573U,	// ADDS_A_W
    67126302U,	// ADDS_S_B
    67128373U,	// ADDS_S_D
    67129781U,	// ADDS_S_H
    67133617U,	// ADDS_S_W
    67126517U,	// ADDS_U_B
    67128840U,	// ADDS_U_D
    67130059U,	// ADDS_U_H
    67134035U,	// ADDS_U_W
    67125679U,	// ADDU16_MM
    67126725U,	// ADDUH_QB
    67126833U,	// ADDUH_R_QB
    67130551U,	// ADDU_PH
    67126938U,	// ADDU_QB
    67130496U,	// ADDU_S_PH
    67126879U,	// ADDU_S_QB
    1140867907U,	// ADDVI_B
    1140869628U,	// ADDVI_D
    1140871264U,	// ADDVI_H
    1140874822U,	// ADDVI_W
    67126595U,	// ADDV_B
    67128940U,	// ADDV_D
    67130137U,	// ADDV_H
    67134135U,	// ADDV_W
    67127198U,	// ADDWC
    67125816U,	// ADD_A_B
    67127265U,	// ADD_A_D
    67129206U,	// ADD_A_H
    67132554U,	// ADD_A_W
    67129096U,	// ADD_MM
    67130771U,	// ADDi
    67130771U,	// ADDi_MM
    67132316U,	// ADDiu
    67132316U,	// ADDiu_MM
    67132270U,	// ADDu
    67132270U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    67131192U,	// ALIGN
    18254U,	// ALUIPC
    67129118U,	// AND
    835898U,	// AND16_MM
    67129118U,	// AND64
    67125575U,	// ANDI16_MM
    1140867766U,	// ANDI_B
    67129118U,	// AND_MM
    67132398U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    2214614425U,	// ANDi
    2214614425U,	// ANDi64
    2214614425U,	// ANDi_MM
    2214612780U,	// APPEND
    67126196U,	// ASUB_S_B
    67128203U,	// ASUB_S_D
    67129613U,	// ASUB_S_H
    67133397U,	// ASUB_S_W
    67126411U,	// ASUB_U_B
    67128670U,	// ASUB_U_D
    67129901U,	// ASUB_U_H
    67133865U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    67130881U,	// AUI
    18247U,	// AUIPC
    67126282U,	// AVER_S_B
    67128353U,	// AVER_S_D
    67129751U,	// AVER_S_H
    67133597U,	// AVER_S_W
    67126497U,	// AVER_U_B
    67128820U,	// AVER_U_D
    67130039U,	// AVER_U_H
    67134015U,	// AVER_U_W
    67126224U,	// AVE_S_B
    67128285U,	// AVE_S_D
    67129683U,	// AVE_S_H
    67133479U,	// AVE_S_W
    67126439U,	// AVE_U_B
    67128752U,	// AVE_U_D
    67129971U,	// AVE_U_H
    67133947U,	// AVE_U_W
    23452U,	// AddiuRxImmX16
    1072028U,	// AddiuRxPcImmX16
    142629788U,	// AddiuRxRxImm16
    8412060U,	// AddiuRxRxImmX16
    12606364U,	// AddiuRxRyOffMemX16
    1336216U,	// AddiuSpImm16
    549784U,	// AddiuSpImmX16
    67132270U,	// AdduRxRyRz16
    8408862U,	// AndRxRxRy16
    0U,	// B
    67132269U,	// BADDu
    546343U,	// BAL
    542462U,	// BALC
    2214614839U,	// BALIGN
    0U,	// BAL_BR
    542441U,	// BC
    25606U,	// BC1EQZ
    20319U,	// BC1F
    22168U,	// BC1FL
    20319U,	// BC1F_MM
    25590U,	// BC1NEZ
    23346U,	// BC1T
    22276U,	// BC1TL
    23346U,	// BC1T_MM
    25614U,	// BC2EQZ
    25598U,	// BC2NEZ
    1140867835U,	// BCLRI_B
    1140869572U,	// BCLRI_D
    1140871208U,	// BCLRI_H
    1140874766U,	// BCLRI_W
    67126163U,	// BCLR_B
    67128127U,	// BCLR_D
    67129580U,	// BCLR_H
    67133313U,	// BCLR_W
    67131367U,	// BEQ
    67131367U,	// BEQ64
    67127148U,	// BEQC
    67131128U,	// BEQL
    16850U,	// BEQZ16_MM
    18214U,	// BEQZALC
    18362U,	// BEQZC
    18362U,	// BEQZC_MM
    67131367U,	// BEQ_MM
    67127021U,	// BGEC
    67127172U,	// BGEUC
    25373U,	// BGEZ
    25373U,	// BGEZ64
    22065U,	// BGEZAL
    18187U,	// BGEZALC
    22240U,	// BGEZALL
    23315U,	// BGEZALS_MM
    22065U,	// BGEZAL_MM
    18341U,	// BGEZC
    22299U,	// BGEZL
    25373U,	// BGEZ_MM
    25433U,	// BGTZ
    25433U,	// BGTZ64
    18223U,	// BGTZALC
    18369U,	// BGTZC
    22313U,	// BGTZL
    25433U,	// BGTZ_MM
    3296740064U,	// BINSLI_B
    3296741801U,	// BINSLI_D
    3296743437U,	// BINSLI_H
    3296746995U,	// BINSLI_W
    75514739U,	// BINSL_B
    75516529U,	// BINSL_D
    75518079U,	// BINSL_H
    75521681U,	// BINSL_W
    3296740125U,	// BINSRI_B
    3296741846U,	// BINSRI_D
    3296743482U,	// BINSRI_H
    3296747040U,	// BINSRI_W
    75514787U,	// BINSR_B
    75516785U,	// BINSR_D
    75518204U,	// BINSR_H
    75521971U,	// BINSR_W
    23606U,	// BITREV
    22375U,	// BITSWAP
    25379U,	// BLEZ
    25379U,	// BLEZ64
    18196U,	// BLEZALC
    18348U,	// BLEZC
    22306U,	// BLEZL
    25379U,	// BLEZ_MM
    67127166U,	// BLTC
    67127179U,	// BLTUC
    25439U,	// BLTZ
    25439U,	// BLTZ64
    22073U,	// BLTZAL
    18232U,	// BLTZALC
    22249U,	// BLTZALL
    23324U,	// BLTZALS_MM
    22073U,	// BLTZAL_MM
    18376U,	// BLTZC
    22320U,	// BLTZL
    25439U,	// BLTZ_MM
    3296740180U,	// BMNZI_B
    75521063U,	// BMNZ_V
    3296740172U,	// BMZI_B
    75521049U,	// BMZ_V
    67129162U,	// BNE
    67129162U,	// BNE64
    67127027U,	// BNEC
    1140867774U,	// BNEGI_B
    1140869520U,	// BNEGI_D
    1140871156U,	// BNEGI_H
    1140874714U,	// BNEGI_W
    67125918U,	// BNEG_B
    67127672U,	// BNEG_D
    67129308U,	// BNEG_H
    67132785U,	// BNEG_W
    67131026U,	// BNEL
    16842U,	// BNEZ16_MM
    18205U,	// BNEZALC
    18355U,	// BNEZC
    18355U,	// BNEZC_MM
    67129162U,	// BNE_MM
    67127186U,	// BNVC
    17771U,	// BNZ_B
    20201U,	// BNZ_D
    21313U,	// BNZ_H
    23584U,	// BNZ_V
    25336U,	// BNZ_W
    67127192U,	// BOVC
    540839U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    22030U,	// BREAK
    65877U,	// BREAK16_MM
    22030U,	// BREAK_MM
    3296740039U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    75521021U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    1140867889U,	// BSETI_B
    1140869610U,	// BSETI_D
    1140871246U,	// BSETI_H
    1140874804U,	// BSETI_W
    67126379U,	// BSET_B
    67128489U,	// BSET_D
    67129869U,	// BSET_H
    67133771U,	// BSET_W
    17765U,	// BZ_B
    20185U,	// BZ_D
    21307U,	// BZ_H
    23571U,	// BZ_V
    25330U,	// BZ_W
    201352004U,	// BeqzRxImm16
    25412U,	// BeqzRxImmX16
    1327678U,	// Bimm16
    541246U,	// BimmX16
    201351977U,	// BnezRxImm16
    25385U,	// BnezRxImmX16
    9241U,	// Break16
    1598290U,	// Bteqz16
    268457863U,	// BteqzT8CmpX16
    268457430U,	// BteqzT8CmpiX16
    268458814U,	// BteqzT8SltX16
    268457460U,	// BteqzT8SltiX16
    268458922U,	// BteqzT8SltiuX16
    268458958U,	// BteqzT8SltuX16
    549714U,	// BteqzX16
    1598263U,	// Btnez16
    335566727U,	// BtnezT8CmpX16
    335566294U,	// BtnezT8CmpiX16
    335567678U,	// BtnezT8SltX16
    335566324U,	// BtnezT8SltiX16
    335567786U,	// BtnezT8SltiuX16
    335567822U,	// BtnezT8SltuX16
    549687U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    85827U,	// CACHE
    85827U,	// CACHE_MM
    85827U,	// CACHE_R6
    18971U,	// CEIL_L_D64
    22922U,	// CEIL_L_S
    20147U,	// CEIL_W_D32
    20147U,	// CEIL_W_D64
    20147U,	// CEIL_W_MM
    23244U,	// CEIL_W_S
    23244U,	// CEIL_W_S_MM
    67125994U,	// CEQI_B
    67127731U,	// CEQI_D
    67129367U,	// CEQI_H
    67132925U,	// CEQI_W
    67126148U,	// CEQ_B
    67128034U,	// CEQ_D
    67129558U,	// CEQ_H
    67133201U,	// CEQ_W
    16437U,	// CFC1
    16437U,	// CFC1_MM
    16936U,	// CFCMSA
    2214618064U,	// CINS
    2214618020U,	// CINS32
    19607U,	// CLASS_D
    23096U,	// CLASS_S
    67126233U,	// CLEI_S_B
    67128294U,	// CLEI_S_D
    67129692U,	// CLEI_S_H
    67133488U,	// CLEI_S_W
    1140868272U,	// CLEI_U_B
    1140870585U,	// CLEI_U_D
    1140871804U,	// CLEI_U_H
    1140875780U,	// CLEI_U_W
    67126215U,	// CLE_S_B
    67128276U,	// CLE_S_D
    67129674U,	// CLE_S_H
    67133470U,	// CLE_S_W
    67126430U,	// CLE_U_B
    67128743U,	// CLE_U_D
    67129962U,	// CLE_U_H
    67133938U,	// CLE_U_W
    22350U,	// CLO
    22350U,	// CLO_MM
    22350U,	// CLO_R6
    67126253U,	// CLTI_S_B
    67128314U,	// CLTI_S_D
    67129712U,	// CLTI_S_H
    67133508U,	// CLTI_S_W
    1140868292U,	// CLTI_U_B
    1140870605U,	// CLTI_U_D
    1140871824U,	// CLTI_U_H
    1140875800U,	// CLTI_U_W
    67126321U,	// CLT_S_B
    67128392U,	// CLT_S_D
    67129800U,	// CLT_S_H
    67133636U,	// CLT_S_W
    67126548U,	// CLT_U_B
    67128871U,	// CLT_U_D
    67130090U,	// CLT_U_H
    67134066U,	// CLT_U_W
    25407U,	// CLZ
    25407U,	// CLZ_MM
    25407U,	// CLZ_R6
    67126771U,	// CMPGDU_EQ_QB
    67126676U,	// CMPGDU_LE_QB
    67126890U,	// CMPGDU_LT_QB
    67126785U,	// CMPGU_EQ_QB
    67126690U,	// CMPGU_LE_QB
    67126904U,	// CMPGU_LT_QB
    17934U,	// CMPU_EQ_QB
    17839U,	// CMPU_LE_QB
    18053U,	// CMPU_LT_QB
    67128023U,	// CMP_EQ_D
    21498U,	// CMP_EQ_PH
    67131891U,	// CMP_EQ_S
    67127593U,	// CMP_F_D
    67131702U,	// CMP_F_S
    67127437U,	// CMP_LE_D
    21394U,	// CMP_LE_PH
    67131623U,	// CMP_LE_S
    67128514U,	// CMP_LT_D
    21667U,	// CMP_LT_PH
    67131986U,	// CMP_LT_S
    67127611U,	// CMP_SAF_D
    67131712U,	// CMP_SAF_S
    67128050U,	// CMP_SEQ_D
    67131910U,	// CMP_SEQ_S
    67127474U,	// CMP_SLE_D
    67131652U,	// CMP_SLE_S
    67128541U,	// CMP_SLT_D
    67132005U,	// CMP_SLT_S
    67128098U,	// CMP_SUEQ_D
    67131941U,	// CMP_SUEQ_S
    67127522U,	// CMP_SULE_D
    67131683U,	// CMP_SULE_S
    67128589U,	// CMP_SULT_D
    67132036U,	// CMP_SULT_S
    67127980U,	// CMP_SUN_D
    67131864U,	// CMP_SUN_S
    67128078U,	// CMP_UEQ_D
    67131930U,	// CMP_UEQ_S
    67127502U,	// CMP_ULE_D
    67131672U,	// CMP_ULE_S
    67128569U,	// CMP_ULT_D
    67132025U,	// CMP_ULT_S
    67127962U,	// CMP_UN_D
    67131854U,	// CMP_UN_S
    9327U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    1476412504U,	// COPY_S_B
    1476414597U,	// COPY_S_D
    1476415994U,	// COPY_S_H
    1476419852U,	// COPY_S_W
    1476412719U,	// COPY_U_B
    1476415064U,	// COPY_U_D
    1476416261U,	// COPY_U_H
    1476420259U,	// COPY_U_W
    1867856U,	// CTC1
    1867856U,	// CTC1_MM
    16944U,	// CTCMSA
    22724U,	// CVT_D32_S
    23769U,	// CVT_D32_W
    23769U,	// CVT_D32_W_MM
    22037U,	// CVT_D64_L
    22724U,	// CVT_D64_S
    23769U,	// CVT_D64_W
    22724U,	// CVT_D_S_MM
    18992U,	// CVT_L_D64
    18992U,	// CVT_L_D64_MM
    22943U,	// CVT_L_S
    22943U,	// CVT_L_S_MM
    19330U,	// CVT_S_D32
    19330U,	// CVT_S_D32_MM
    19330U,	// CVT_S_D64
    22046U,	// CVT_S_L
    24524U,	// CVT_S_W
    24524U,	// CVT_S_W_MM
    20168U,	// CVT_W_D32
    20168U,	// CVT_W_D64
    20168U,	// CVT_W_MM
    23265U,	// CVT_W_S
    23265U,	// CVT_W_S_MM
    19151U,	// C_EQ_D32
    19151U,	// C_EQ_D64
    23019U,	// C_EQ_S
    18722U,	// C_F_D32
    18722U,	// C_F_D64
    22831U,	// C_F_S
    18565U,	// C_LE_D32
    18565U,	// C_LE_D64
    22751U,	// C_LE_S
    19642U,	// C_LT_D32
    19642U,	// C_LT_D64
    23114U,	// C_LT_S
    18556U,	// C_NGE_D32
    18556U,	// C_NGE_D64
    22742U,	// C_NGE_S
    18591U,	// C_NGLE_D32
    18591U,	// C_NGLE_D64
    22769U,	// C_NGLE_S
    19008U,	// C_NGL_D32
    19008U,	// C_NGL_D64
    22959U,	// C_NGL_S
    19633U,	// C_NGT_D32
    19633U,	// C_NGT_D64
    23105U,	// C_NGT_S
    18601U,	// C_OLE_D32
    18601U,	// C_OLE_D64
    22779U,	// C_OLE_S
    19668U,	// C_OLT_D32
    19668U,	// C_OLT_D64
    23132U,	// C_OLT_S
    19177U,	// C_SEQ_D32
    19177U,	// C_SEQ_D64
    23037U,	// C_SEQ_S
    18792U,	// C_SF_D32
    18792U,	// C_SF_D64
    22877U,	// C_SF_S
    19205U,	// C_UEQ_D32
    19205U,	// C_UEQ_D64
    23057U,	// C_UEQ_S
    18629U,	// C_ULE_D32
    18629U,	// C_ULE_D64
    22799U,	// C_ULE_S
    19696U,	// C_ULT_D32
    19696U,	// C_ULT_D64
    23152U,	// C_ULT_S
    19090U,	// C_UN_D32
    19090U,	// C_UN_D64
    22982U,	// C_UN_S
    22407U,	// CmpRxRy16
    469784022U,	// CmpiRxImm16
    21974U,	// CmpiRxImmX16
    549818U,	// Constant32
    67129095U,	// DADD
    67130770U,	// DADDi
    67132315U,	// DADDiu
    67132276U,	// DADDu
    4494769U,	// DAHI
    67131199U,	// DALIGN
    4494830U,	// DATI
    67130880U,	// DAUI
    22374U,	// DBITSWAP
    22349U,	// DCLO
    22349U,	// DCLO_R6
    25406U,	// DCLZ
    25406U,	// DCLZ_R6
    67132478U,	// DDIV
    67132386U,	// DDIVU
    9353U,	// DERET
    9353U,	// DERET_MM
    2214618082U,	// DEXT
    2214618057U,	// DEXTM
    2214618095U,	// DEXTU
    546197U,	// DI
    2214618070U,	// DINS
    2214618050U,	// DINSM
    2214618088U,	// DINSU
    67132479U,	// DIV
    67132387U,	// DIVU
    67126342U,	// DIV_S_B
    67128435U,	// DIV_S_D
    67129821U,	// DIV_S_H
    67133679U,	// DIV_S_W
    67126557U,	// DIV_U_B
    67128902U,	// DIV_U_D
    67130099U,	// DIV_U_H
    67134097U,	// DIV_U_W
    546197U,	// DI_MM
    67125794U,	// DLSA
    67125794U,	// DLSA_R6
    2214608905U,	// DMFC0
    16443U,	// DMFC1
    2214609124U,	// DMFC2
    67129140U,	// DMOD
    67132290U,	// DMODU
    2214608912U,	// DMTC0
    1867862U,	// DMTC1
    2214609131U,	// DMTC2
    67130757U,	// DMUH
    67132308U,	// DMUHU
    67131147U,	// DMUL
    23368U,	// DMULT
    23514U,	// DMULTu
    67132352U,	// DMULU
    67131147U,	// DMUL_R6
    67128343U,	// DOTP_S_D
    67129741U,	// DOTP_S_H
    67133547U,	// DOTP_S_W
    67128810U,	// DOTP_U_D
    67130029U,	// DOTP_U_H
    67134005U,	// DOTP_U_W
    75516864U,	// DPADD_S_D
    75518262U,	// DPADD_S_H
    75522058U,	// DPADD_S_W
    75517331U,	// DPADD_U_D
    75518550U,	// DPADD_U_H
    75522526U,	// DPADD_U_W
    67130610U,	// DPAQX_SA_W_PH
    67130693U,	// DPAQX_S_W_PH
    67133007U,	// DPAQ_SA_L_W
    67130652U,	// DPAQ_S_W_PH
    67130945U,	// DPAU_H_QBL
    67131382U,	// DPAU_H_QBR
    67130731U,	// DPAX_W_PH
    67130600U,	// DPA_W_PH
    22412U,	// DPOP
    67130625U,	// DPSQX_SA_W_PH
    67130707U,	// DPSQX_S_W_PH
    67133020U,	// DPSQ_SA_L_W
    67130680U,	// DPSQ_S_W_PH
    75516831U,	// DPSUB_S_D
    75518241U,	// DPSUB_S_H
    75522025U,	// DPSUB_S_W
    75517298U,	// DPSUB_U_D
    75518529U,	// DPSUB_U_H
    75522493U,	// DPSUB_U_W
    67130957U,	// DPSU_H_QBL
    67131394U,	// DPSU_H_QBR
    67130742U,	// DPSX_W_PH
    67130721U,	// DPS_W_PH
    2214615187U,	// DROTR
    2214609103U,	// DROTR32
    67132522U,	// DROTRV
    21320U,	// DSBH
    25483U,	// DSDIV
    20243U,	// DSHD
    2214614770U,	// DSLL
    2214609073U,	// DSLL32
    536893170U,	// DSLL64_32
    67132484U,	// DSLLV
    2214609436U,	// DSRA
    2214609055U,	// DSRA32
    67132463U,	// DSRAV
    2214614782U,	// DSRL
    2214609081U,	// DSRL32
    67132491U,	// DSRLV
    67127005U,	// DSUB
    67132255U,	// DSUBu
    25469U,	// DUDIV
    25484U,	// DivRxRy16
    25470U,	// DivuRxRy16
    9311U,	// EHB
    9311U,	// EHB_MM
    546209U,	// EI
    546209U,	// EI_MM
    9354U,	// ERET
    9354U,	// ERET_MM
    2214618083U,	// EXT
    2214614999U,	// EXTP
    2214614903U,	// EXTPDP
    67132506U,	// EXTPDPV
    67132515U,	// EXTPV
    67133740U,	// EXTRV_RS_W
    67133294U,	// EXTRV_R_W
    67129830U,	// EXTRV_S_H
    67134177U,	// EXTRV_W
    2214617377U,	// EXTR_RS_W
    2214616921U,	// EXTR_R_W
    2214613409U,	// EXTR_S_H
    2214617020U,	// EXTR_W
    2214618076U,	// EXTS
    2214618028U,	// EXTS32
    2214618083U,	// EXT_MM
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    19599U,	// FABS_D32
    19599U,	// FABS_D64
    19599U,	// FABS_MM
    23089U,	// FABS_S
    23089U,	// FABS_S_MM
    0U,	// FABS_W
    67127369U,	// FADD_D
    67127370U,	// FADD_D32
    67127370U,	// FADD_D64
    67127370U,	// FADD_MM
    67131599U,	// FADD_S
    67131599U,	// FADD_S_MM
    67132642U,	// FADD_W
    67127603U,	// FCAF_D
    67132761U,	// FCAF_W
    67128033U,	// FCEQ_D
    67133200U,	// FCEQ_W
    19606U,	// FCLASS_D
    24888U,	// FCLASS_W
    67127447U,	// FCLE_D
    67132684U,	// FCLE_W
    67128524U,	// FCLT_D
    67133779U,	// FCLT_W
    2204694U,	// FCMP_D32
    2204694U,	// FCMP_D32_MM
    2204694U,	// FCMP_D64
    2466838U,	// FCMP_S32
    2466838U,	// FCMP_S32_MM
    67127543U,	// FCNE_D
    67132718U,	// FCNE_W
    67128143U,	// FCOR_D
    67133329U,	// FCOR_W
    67128089U,	// FCUEQ_D
    67133216U,	// FCUEQ_W
    67127513U,	// FCULE_D
    67132700U,	// FCULE_W
    67128580U,	// FCULT_D
    67133795U,	// FCULT_W
    67127559U,	// FCUNE_D
    67132734U,	// FCUNE_W
    67127972U,	// FCUN_D
    67133106U,	// FCUN_W
    67128966U,	// FDIV_D
    67128967U,	// FDIV_D32
    67128967U,	// FDIV_D64
    67128967U,	// FDIV_MM
    67132072U,	// FDIV_S
    67132072U,	// FDIV_S_MM
    67134161U,	// FDIV_W
    67129488U,	// FEXDO_H
    67133122U,	// FEXDO_W
    67127256U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    67132545U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    19032U,	// FEXUPL_D
    24184U,	// FEXUPL_W
    19295U,	// FEXUPR_D
    24481U,	// FEXUPR_W
    19537U,	// FFINT_S_D
    24781U,	// FFINT_S_W
    20016U,	// FFINT_U_D
    25211U,	// FFINT_U_W
    19042U,	// FFQL_D
    24194U,	// FFQL_W
    19305U,	// FFQR_D
    24491U,	// FFQR_W
    17245U,	// FILL_B
    19017U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    20585U,	// FILL_H
    24169U,	// FILL_W
    18383U,	// FLOG2_D
    23672U,	// FLOG2_W
    18981U,	// FLOOR_L_D64
    22932U,	// FLOOR_L_S
    20157U,	// FLOOR_W_D32
    20157U,	// FLOOR_W_D64
    20157U,	// FLOOR_W_MM
    23254U,	// FLOOR_W_S
    23254U,	// FLOOR_W_S_MM
    75515985U,	// FMADD_D
    75521258U,	// FMADD_W
    67127294U,	// FMAX_A_D
    67132583U,	// FMAX_A_W
    67129041U,	// FMAX_D
    67134186U,	// FMAX_W
    67127274U,	// FMIN_A_D
    67132563U,	// FMIN_A_W
    67127946U,	// FMIN_D
    67133098U,	// FMIN_W
    20118U,	// FMOV_D32
    20118U,	// FMOV_D32_MM
    20118U,	// FMOV_D64
    23215U,	// FMOV_S
    23215U,	// FMOV_S_MM
    75515943U,	// FMSUB_D
    75521216U,	// FMSUB_W
    67127930U,	// FMUL_D
    67127931U,	// FMUL_D32
    67127931U,	// FMUL_D64
    67127931U,	// FMUL_MM
    67131832U,	// FMUL_S
    67131832U,	// FMUL_S_MM
    67133082U,	// FMUL_W
    18809U,	// FNEG_D32
    18809U,	// FNEG_D64
    18809U,	// FNEG_MM
    22893U,	// FNEG_S
    22893U,	// FNEG_S_MM
    19143U,	// FRCP_D
    24267U,	// FRCP_W
    19754U,	// FRINT_D
    24957U,	// FRINT_W
    19782U,	// FRSQRT_D
    24985U,	// FRSQRT_W
    67127622U,	// FSAF_D
    67132769U,	// FSAF_W
    67128061U,	// FSEQ_D
    67133208U,	// FSEQ_W
    67127485U,	// FSLE_D
    67132692U,	// FSLE_W
    67128552U,	// FSLT_D
    67133787U,	// FSLT_W
    67127551U,	// FSNE_D
    67132726U,	// FSNE_W
    67128151U,	// FSOR_D
    67133337U,	// FSOR_W
    19773U,	// FSQRT_D
    19774U,	// FSQRT_D32
    19774U,	// FSQRT_D64
    19774U,	// FSQRT_MM
    23192U,	// FSQRT_S
    23192U,	// FSQRT_S_MM
    24976U,	// FSQRT_W
    67127327U,	// FSUB_D
    67127328U,	// FSUB_D32
    67127328U,	// FSUB_D64
    67127328U,	// FSUB_MM
    67131581U,	// FSUB_S
    67131581U,	// FSUB_S_MM
    67132600U,	// FSUB_W
    67128110U,	// FSUEQ_D
    67133225U,	// FSUEQ_W
    67127534U,	// FSULE_D
    67132709U,	// FSULE_W
    67128601U,	// FSULT_D
    67133804U,	// FSULT_W
    67127568U,	// FSUNE_D
    67132743U,	// FSUNE_W
    67127991U,	// FSUN_D
    67133114U,	// FSUN_W
    19548U,	// FTINT_S_D
    24792U,	// FTINT_S_W
    20027U,	// FTINT_U_D
    25222U,	// FTINT_U_W
    67129565U,	// FTQ_H
    67133234U,	// FTQ_W
    19370U,	// FTRUNC_S_D
    24564U,	// FTRUNC_S_W
    19837U,	// FTRUNC_U_D
    25032U,	// FTRUNC_U_W
    612390349U,	// GotPrologue16
    67128246U,	// HADD_S_D
    67129644U,	// HADD_S_H
    67133440U,	// HADD_S_W
    67128713U,	// HADD_U_D
    67129932U,	// HADD_U_H
    67133908U,	// HADD_U_W
    67128213U,	// HSUB_S_D
    67129623U,	// HSUB_S_H
    67133407U,	// HSUB_S_W
    67128680U,	// HSUB_U_D
    67129911U,	// HSUB_U_H
    67133875U,	// HSUB_U_W
    67126612U,	// ILVEV_B
    67128957U,	// ILVEV_D
    67130154U,	// ILVEV_H
    67134152U,	// ILVEV_W
    67126140U,	// ILVL_B
    67127938U,	// ILVL_D
    67129480U,	// ILVL_H
    67133090U,	// ILVL_W
    67125892U,	// ILVOD_B
    67127411U,	// ILVOD_D
    67129282U,	// ILVOD_H
    67132675U,	// ILVOD_W
    67126188U,	// ILVR_B
    67128186U,	// ILVR_D
    67129605U,	// ILVR_H
    67133380U,	// ILVR_W
    2214618065U,	// INS
    19416187U,	// INSERT_B
    0U,	// INSERT_B_VIDX_PSEUDO
    19418419U,	// INSERT_D
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    19419677U,	// INSERT_H
    0U,	// INSERT_H_VIDX_PSEUDO
    19423622U,	// INSERT_W
    0U,	// INSERT_W_VIDX_PSEUDO
    8412274U,	// INSV
    23609997U,	// INSVE_B
    23611673U,	// INSVE_D
    23613387U,	// INSVE_H
    23616848U,	// INSVE_W
    2214618065U,	// INS_MM
    546315U,	// J
    546348U,	// JAL
    22659U,	// JALR
    546947U,	// JALR16_MM
    22659U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    541072U,	// JALRS16_MM
    23333U,	// JALRS_MM
    17790U,	// JALR_HB
    22659U,	// JALR_MM
    547597U,	// JALS_MM
    549644U,	// JALX
    546348U,	// JAL_MM
    18180U,	// JIALC
    18169U,	// JIC
    546943U,	// JR
    541059U,	// JR16_MM
    546943U,	// JR64
    546764U,	// JRADDIUSP
    542578U,	// JRC16_MM
    542071U,	// JR_HB
    542071U,	// JR_HB_R6
    546943U,	// JR_MM
    546315U,	// J_MM
    2905644U,	// Jal16
    3167788U,	// JalB16
    9303U,	// JrRa16
    9294U,	// JrcRa16
    549745U,	// JrcRx16
    540673U,	// JumpLinkReg16
    25183623U,	// LB
    25183623U,	// LB64
    25182624U,	// LBU16_MM
    679502610U,	// LBUX
    25183623U,	// LB_MM
    25189210U,	// LBu
    25189210U,	// LBu64
    25189210U,	// LBu_MM
    25186074U,	// LD
    25182249U,	// LDC1
    25182249U,	// LDC164
    25182249U,	// LDC1_MM
    25182424U,	// LDC2
    25182424U,	// LDC2_R6
    25182483U,	// LDC3
    17071U,	// LDI_B
    18825U,	// LDI_D
    20461U,	// LDI_H
    24019U,	// LDI_W
    25187976U,	// LDL
    18241U,	// LDPC
    25188413U,	// LDR
    679493737U,	// LDXC1
    679493737U,	// LDXC164
    25182837U,	// LD_B
    25184356U,	// LD_D
    25186227U,	// LD_H
    25189620U,	// LD_W
    12606364U,	// LEA_ADDiu
    12606363U,	// LEA_ADDiu64
    12606364U,	// LEA_ADDiu_MM
    25187161U,	// LH
    25187161U,	// LH64
    25182647U,	// LHU16_MM
    679502599U,	// LHX
    25187161U,	// LH_MM
    25189263U,	// LHu
    25189263U,	// LHu64
    25189263U,	// LHu_MM
    16719U,	// LI16_MM
    25188060U,	// LL
    25186073U,	// LLD
    25186073U,	// LLD_R6
    25188060U,	// LL_MM
    25188060U,	// LL_R6
    25182215U,	// LOAD_ACC128
    25182215U,	// LOAD_ACC64
    25182215U,	// LOAD_ACC64DSP
    25188253U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    67125795U,	// LSA
    67125795U,	// LSA_R6
    679493751U,	// LUXC1
    679493751U,	// LUXC164
    679493751U,	// LUXC1_MM
    29382150U,	// LUi
    29382150U,	// LUi64
    29382150U,	// LUi_MM
    25191167U,	// LW
    25182654U,	// LW16_MM
    25191167U,	// LW64
    25182301U,	// LWC1
    25182301U,	// LWC1_MM
    25182450U,	// LWC2
    25182450U,	// LWC2_R6
    25182495U,	// LWC3
    25188113U,	// LWL
    25188113U,	// LWL64
    25188113U,	// LWL_MM
    115052U,	// LWM16_MM
    114881U,	// LWM32_MM
    18278U,	// LWPC
    137181U,	// LWP_MM
    25188513U,	// LWR
    25188513U,	// LWR64
    25188513U,	// LWR_MM
    25191167U,	// LWSP_MM
    18271U,	// LWUPC
    25189353U,	// LWU_MM
    679502616U,	// LWX
    679493765U,	// LWXC1
    679493765U,	// LWXC1_MM
    679500588U,	// LWXS_MM
    25191167U,	// LW_MM
    25189353U,	// LWu
    25183623U,	// LbRxRyOffMemX16
    25189210U,	// LbuRxRyOffMemX16
    25187161U,	// LhRxRyOffMemX16
    25189263U,	// LhuRxRyOffMemX16
    469784013U,	// LiRxImm16
    21955U,	// LiRxImmAlignX16
    21965U,	// LiRxImmX16
    29376998U,	// LoadAddr32Imm
    25182694U,	// LoadAddr32Reg
    29382093U,	// LoadImm32Reg
    21969U,	// LoadImm64Reg
    3433215U,	// LwConstant32
    134243071U,	// LwRxPcTcp16
    25343U,	// LwRxPcTcpX16
    25191167U,	// LwRxRyOffMemX16
    746611455U,	// LwRxSpImmX16
    20237U,	// MADD
    75516247U,	// MADDF_D
    75520340U,	// MADDF_S
    75518145U,	// MADDR_Q_H
    75521787U,	// MADDR_Q_W
    23419U,	// MADDU
    67132283U,	// MADDU_DSP
    23419U,	// MADDU_MM
    75515202U,	// MADDV_B
    75517547U,	// MADDV_D
    75518744U,	// MADDV_H
    75522742U,	// MADDV_W
    67127378U,	// MADD_D32
    67127378U,	// MADD_D32_MM
    67127378U,	// MADD_D64
    67129101U,	// MADD_DSP
    20237U,	// MADD_MM
    75518115U,	// MADD_Q_H
    75521757U,	// MADD_Q_W
    67131598U,	// MADD_S
    67131598U,	// MADD_S_MM
    67131039U,	// MAQ_SA_W_PHL
    67131463U,	// MAQ_SA_W_PHR
    67131067U,	// MAQ_S_W_PHL
    67131491U,	// MAQ_S_W_PHR
    67127319U,	// MAXA_D
    67131571U,	// MAXA_S
    67126263U,	// MAXI_S_B
    67128324U,	// MAXI_S_D
    67129722U,	// MAXI_S_H
    67133518U,	// MAXI_S_W
    1140868302U,	// MAXI_U_B
    1140870615U,	// MAXI_U_D
    1140871834U,	// MAXI_U_H
    1140875810U,	// MAXI_U_W
    67125844U,	// MAX_A_B
    67127295U,	// MAX_A_D
    67129234U,	// MAX_A_H
    67132584U,	// MAX_A_W
    67129042U,	// MAX_D
    67132138U,	// MAX_S
    67126351U,	// MAX_S_B
    67128444U,	// MAX_S_D
    67129841U,	// MAX_S_H
    67133699U,	// MAX_S_W
    67126566U,	// MAX_U_B
    67128911U,	// MAX_U_D
    67130108U,	// MAX_U_H
    67134106U,	// MAX_U_W
    2214608906U,	// MFC0
    16444U,	// MFC1
    16444U,	// MFC1_MM
    2214609125U,	// MFC2
    16450U,	// MFHC1_D32
    16450U,	// MFHC1_D64
    16450U,	// MFHC1_MM
    546231U,	// MFHI
    546231U,	// MFHI16_MM
    546231U,	// MFHI64
    21943U,	// MFHI_DSP
    546231U,	// MFHI_MM
    546643U,	// MFLO
    546643U,	// MFLO16_MM
    546643U,	// MFLO64
    22355U,	// MFLO_DSP
    546643U,	// MFLO_MM
    67127304U,	// MINA_D
    67131563U,	// MINA_S
    67126243U,	// MINI_S_B
    67128304U,	// MINI_S_D
    67129702U,	// MINI_S_H
    67133498U,	// MINI_S_W
    1140868282U,	// MINI_U_B
    1140870595U,	// MINI_U_D
    1140871814U,	// MINI_U_H
    1140875790U,	// MINI_U_W
    67125825U,	// MIN_A_B
    67127275U,	// MIN_A_D
    67129215U,	// MIN_A_H
    67132564U,	// MIN_A_W
    67127947U,	// MIN_D
    67131839U,	// MIN_S
    67126273U,	// MIN_S_B
    67128334U,	// MIN_S_D
    67129732U,	// MIN_S_H
    67133538U,	// MIN_S_W
    67126488U,	// MIN_U_B
    67128801U,	// MIN_U_D
    67130020U,	// MIN_U_H
    67133996U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    67129141U,	// MOD
    67127003U,	// MODSUB
    67132291U,	// MODU
    67126206U,	// MOD_S_B
    67128267U,	// MOD_S_D
    67129665U,	// MOD_S_H
    67133461U,	// MOD_S_W
    67126421U,	// MOD_U_B
    67128734U,	// MOD_U_D
    67129953U,	// MOD_U_H
    67133929U,	// MOD_U_W
    20313U,	// MOVE16_MM
    23541U,	// MOVE_V
    67127664U,	// MOVF_D32
    67127664U,	// MOVF_D32_MM
    67127664U,	// MOVF_D64
    67129195U,	// MOVF_I
    67129195U,	// MOVF_I64
    67129195U,	// MOVF_I_MM
    67131749U,	// MOVF_S
    67131749U,	// MOVF_S_MM
    67127999U,	// MOVN_I64_D64
    67131207U,	// MOVN_I64_I
    67131207U,	// MOVN_I64_I64
    67131875U,	// MOVN_I64_S
    67127999U,	// MOVN_I_D32
    67127999U,	// MOVN_I_D32_MM
    67127999U,	// MOVN_I_D64
    67131207U,	// MOVN_I_I
    67131207U,	// MOVN_I_I64
    67131207U,	// MOVN_I_MM
    67131875U,	// MOVN_I_S
    67131875U,	// MOVN_I_S_MM
    67128662U,	// MOVT_D32
    67128662U,	// MOVT_D32_MM
    67128662U,	// MOVT_D64
    67132244U,	// MOVT_I
    67132244U,	// MOVT_I64
    67132244U,	// MOVT_I_MM
    67132064U,	// MOVT_S
    67132064U,	// MOVT_S_MM
    67129082U,	// MOVZ_I64_D64
    67134309U,	// MOVZ_I64_I
    67134309U,	// MOVZ_I64_I64
    67132165U,	// MOVZ_I64_S
    67129082U,	// MOVZ_I_D32
    67129082U,	// MOVZ_I_D32_MM
    67129082U,	// MOVZ_I_D64
    67134309U,	// MOVZ_I_I
    67134309U,	// MOVZ_I_I64
    67134309U,	// MOVZ_I_MM
    67132165U,	// MOVZ_I_S
    67132165U,	// MOVZ_I_S_MM
    18147U,	// MSUB
    75516238U,	// MSUBF_D
    75520331U,	// MSUBF_S
    75518134U,	// MSUBR_Q_H
    75521776U,	// MSUBR_Q_W
    23398U,	// MSUBU
    67132262U,	// MSUBU_DSP
    23398U,	// MSUBU_MM
    75515193U,	// MSUBV_B
    75517538U,	// MSUBV_D
    75518735U,	// MSUBV_H
    75522733U,	// MSUBV_W
    67127336U,	// MSUB_D32
    67127336U,	// MSUB_D32_MM
    67127336U,	// MSUB_D64
    67127011U,	// MSUB_DSP
    18147U,	// MSUB_MM
    75518105U,	// MSUB_Q_H
    75521747U,	// MSUB_Q_W
    67131580U,	// MSUB_S
    67131580U,	// MSUB_S_MM
    2214608913U,	// MTC0
    1867863U,	// MTC1
    1867863U,	// MTC1_MM
    2214609132U,	// MTC2
    1884233U,	// MTHC1_D32
    1884233U,	// MTHC1_D64
    1884233U,	// MTHC1_MM
    546237U,	// MTHI
    546237U,	// MTHI64
    1873341U,	// MTHI_DSP
    546237U,	// MTHI_MM
    1873791U,	// MTHLIP
    546656U,	// MTLO
    546656U,	// MTLO64
    1873760U,	// MTLO_DSP
    546656U,	// MTLO_MM
    540701U,	// MTM0
    540819U,	// MTM1
    540926U,	// MTM2
    540707U,	// MTP0
    540825U,	// MTP1
    540932U,	// MTP2
    67130758U,	// MUH
    67132309U,	// MUHU
    67131148U,	// MUL
    67131080U,	// MULEQ_S_W_PHL
    67131504U,	// MULEQ_S_W_PHR
    67130969U,	// MULEU_S_PH_QBL
    67131406U,	// MULEU_S_PH_QBR
    67130519U,	// MULQ_RS_PH
    67133718U,	// MULQ_RS_W
    67130463U,	// MULQ_S_PH
    67133577U,	// MULQ_S_W
    67129548U,	// MULR_Q_H
    67133190U,	// MULR_Q_W
    67130665U,	// MULSAQ_S_W_PH
    67130640U,	// MULSA_W_PH
    23369U,	// MULT
    67132379U,	// MULTU_DSP
    67132233U,	// MULT_DSP
    23369U,	// MULT_MM
    23515U,	// MULTu
    23515U,	// MULTu_MM
    67132346U,	// MULU
    67126621U,	// MULV_B
    67128974U,	// MULV_D
    67130163U,	// MULV_H
    67134169U,	// MULV_W
    67131148U,	// MUL_MM
    67130336U,	// MUL_PH
    67129517U,	// MUL_Q_H
    67133159U,	// MUL_Q_W
    67131148U,	// MUL_R6
    67130431U,	// MUL_S_PH
    546231U,	// Mfhi16
    546643U,	// Mflo16
    20313U,	// Move32R16
    20313U,	// MoveR3216
    23369U,	// MultRxRy16
    33856329U,	// MultRxRyRz16
    23515U,	// MultuRxRy16
    33856475U,	// MultuRxRyRz16
    16996U,	// NLOC_B
    18489U,	// NLOC_D
    20386U,	// NLOC_H
    23753U,	// NLOC_W
    17004U,	// NLZC_B
    18497U,	// NLZC_D
    20394U,	// NLZC_H
    23761U,	// NLZC_W
    67127386U,	// NMADD_D32
    67127386U,	// NMADD_D32_MM
    67127386U,	// NMADD_D64
    67131597U,	// NMADD_S
    67131597U,	// NMADD_S_MM
    67127344U,	// NMSUB_D32
    67127344U,	// NMSUB_D32_MM
    67127344U,	// NMSUB_D64
    67131579U,	// NMSUB_S
    67131579U,	// NMSUB_S_MM
    0U,	// NOP
    67131529U,	// NOR
    67131529U,	// NOR64
    1140867853U,	// NORI_B
    67131529U,	// NOR_MM
    67132421U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    16793U,	// NOT16_MM
    20337U,	// NegRxRy16
    23375U,	// NotRxRy16
    67131530U,	// OR
    835978U,	// OR16_MM
    67131530U,	// OR64
    1140867854U,	// ORI_B
    67131530U,	// OR_MM
    67132422U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    2214614505U,	// ORi
    2214614505U,	// ORi64
    2214614505U,	// ORi_MM
    8411274U,	// OrRxRxRy16
    67130325U,	// PACKRL_PH
    9315U,	// PAUSE
    9315U,	// PAUSE_MM
    67126603U,	// PCKEV_B
    67128948U,	// PCKEV_D
    67130145U,	// PCKEV_H
    67134143U,	// PCKEV_W
    67125883U,	// PCKOD_B
    67127402U,	// PCKOD_D
    67129273U,	// PCKOD_H
    67132666U,	// PCKOD_W
    17523U,	// PCNT_B
    19746U,	// PCNT_D
    21013U,	// PCNT_H
    24949U,	// PCNT_W
    67130289U,	// PICK_PH
    67126735U,	// PICK_QB
    22413U,	// POP
    22136U,	// PRECEQU_PH_QBL
    16874U,	// PRECEQU_PH_QBLA
    22573U,	// PRECEQU_PH_QBR
    16907U,	// PRECEQU_PH_QBRA
    22189U,	// PRECEQ_W_PHL
    22613U,	// PRECEQ_W_PHR
    22121U,	// PRECEU_PH_QBL
    16858U,	// PRECEU_PH_QBLA
    22558U,	// PRECEU_PH_QBR
    16891U,	// PRECEU_PH_QBRA
    67130241U,	// PRECRQU_S_QB_PH
    67132809U,	// PRECRQ_PH_W
    67130214U,	// PRECRQ_QB_PH
    67132840U,	// PRECRQ_RS_PH_W
    67130228U,	// PRECR_QB_PH
    2214616441U,	// PRECR_SRA_PH_W
    2214616470U,	// PRECR_SRA_R_PH_W
    85861U,	// PREF
    85861U,	// PREF_MM
    85861U,	// PREF_R6
    2214612771U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    16391U,	// PseudoCVT_D32_W
    16391U,	// PseudoCVT_D64_L
    16391U,	// PseudoCVT_D64_W
    16391U,	// PseudoCVT_S_L
    16391U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoUDIV
    18123U,	// RADDU_W_QB
    29382590U,	// RDDSP
    22682U,	// RDHWR
    22682U,	// RDHWR64
    22682U,	// RDHWR_MM
    21716U,	// REPLV_PH
    18103U,	// REPLV_QB
    29381571U,	// REPL_PH
    29378017U,	// REPL_QB
    19755U,	// RINT_D
    23184U,	// RINT_S
    2214615188U,	// ROTR
    67132523U,	// ROTRV
    67132523U,	// ROTRV_MM
    2214615188U,	// ROTR_MM
    18960U,	// ROUND_L_D64
    22911U,	// ROUND_L_S
    20136U,	// ROUND_W_D32
    20136U,	// ROUND_W_D64
    20136U,	// ROUND_W_MM
    23233U,	// ROUND_W_S
    23233U,	// ROUND_W_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    2214609960U,	// SAT_S_B
    2214612031U,	// SAT_S_D
    1140871615U,	// SAT_S_H
    2214617275U,	// SAT_S_W
    2214610187U,	// SAT_U_B
    2214612510U,	// SAT_U_D
    1140871905U,	// SAT_U_H
    2214617705U,	// SAT_U_W
    25183959U,	// SB
    25182516U,	// SB16_MM
    25183959U,	// SB64
    25183959U,	// SB_MM
    3704698U,	// SC
    3706626U,	// SCD
    3706626U,	// SCD_R6
    3704698U,	// SC_MM
    3704698U,	// SC_R6
    25186106U,	// SD
    546672U,	// SDBBP
    65914U,	// SDBBP16_MM
    546672U,	// SDBBP_MM
    546672U,	// SDBBP_R6
    25182255U,	// SDC1
    25182255U,	// SDC164
    25182255U,	// SDC1_MM
    25182430U,	// SDC2
    25182430U,	// SDC2_R6
    25182489U,	// SDC3
    25484U,	// SDIV
    25484U,	// SDIV_MM
    25187981U,	// SDL
    25188418U,	// SDR
    679493744U,	// SDXC1
    679493744U,	// SDXC164
    17778U,	// SEB
    17778U,	// SEB64
    17778U,	// SEB_MM
    21332U,	// SEH
    21332U,	// SEH64
    21332U,	// SEH_MM
    67134282U,	// SELEQZ
    67134282U,	// SELEQZ64
    67129072U,	// SELEQZ_D
    67132155U,	// SELEQZ_S
    67134255U,	// SELNEZ
    67134255U,	// SELNEZ64
    67129055U,	// SELNEZ_D
    67132145U,	// SELNEZ_S
    75516473U,	// SEL_D
    75520424U,	// SEL_S
    67131372U,	// SEQ
    67130844U,	// SEQi
    25187713U,	// SH
    25182529U,	// SH16_MM
    25187713U,	// SH64
    1140867735U,	// SHF_B
    1140871125U,	// SHF_H
    1140874602U,	// SHF_W
    22361U,	// SHILO
    23634U,	// SHILOV
    67130570U,	// SHLLV_PH
    67126957U,	// SHLLV_QB
    67130507U,	// SHLLV_S_PH
    67133688U,	// SHLLV_S_W
    2214613946U,	// SHLL_PH
    2214610392U,	// SHLL_QB
    2214614068U,	// SHLL_S_PH
    2214617176U,	// SHLL_S_W
    67130560U,	// SHRAV_PH
    67126947U,	// SHRAV_QB
    67130408U,	// SHRAV_R_PH
    67126845U,	// SHRAV_R_QB
    67133283U,	// SHRAV_R_W
    2214613853U,	// SHRA_PH
    2214610315U,	// SHRA_QB
    2214614021U,	// SHRA_R_PH
    2214610458U,	// SHRA_R_QB
    2214616889U,	// SHRA_R_W
    67130590U,	// SHRLV_PH
    67126977U,	// SHRLV_QB
    2214613964U,	// SHRL_PH
    2214610410U,	// SHRL_QB
    25187713U,	// SH_MM
    3632284334U,	// SLDI_B
    3632286088U,	// SLDI_D
    3632287724U,	// SLDI_H
    3632291282U,	// SLDI_W
    411058804U,	// SLD_B
    411060323U,	// SLD_D
    411062194U,	// SLD_H
    411065587U,	// SLD_W
    2214614771U,	// SLL
    67125598U,	// SLL16_MM
    805328627U,	// SLL64_32
    805328627U,	// SLL64_64
    1140867792U,	// SLLI_B
    1140869529U,	// SLLI_D
    1140871165U,	// SLLI_H
    1140874723U,	// SLLI_W
    67132485U,	// SLLV
    67132485U,	// SLLV_MM
    67126117U,	// SLL_B
    67127889U,	// SLL_D
    67129457U,	// SLL_H
    2214614771U,	// SLL_MM
    67133041U,	// SLL_W
    67132222U,	// SLT
    67132222U,	// SLT64
    67132222U,	// SLT_MM
    67130868U,	// SLTi
    67130868U,	// SLTi64
    67130868U,	// SLTi_MM
    67132330U,	// SLTiu
    67132330U,	// SLTiu64
    67132330U,	// SLTiu_MM
    67132366U,	// SLTu
    67132366U,	// SLTu64
    67132366U,	// SLTu_MM
    67129167U,	// SNE
    67130789U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    1476412199U,	// SPLATI_B
    1476413920U,	// SPLATI_D
    1476415556U,	// SPLATI_H
    1476419114U,	// SPLATI_W
    402670690U,	// SPLAT_B
    402672800U,	// SPLAT_D
    402674180U,	// SPLAT_H
    402678082U,	// SPLAT_W
    2214609437U,	// SRA
    1140867750U,	// SRAI_B
    1140869504U,	// SRAI_D
    1140871140U,	// SRAI_H
    1140874698U,	// SRAI_W
    2214609650U,	// SRARI_B
    2214611387U,	// SRARI_D
    1140871199U,	// SRARI_H
    2214616581U,	// SRARI_W
    67126155U,	// SRAR_B
    67128119U,	// SRAR_D
    67129572U,	// SRAR_H
    67133305U,	// SRAR_W
    67132464U,	// SRAV
    67132464U,	// SRAV_MM
    67125853U,	// SRA_B
    67127312U,	// SRA_D
    67129243U,	// SRA_H
    2214609437U,	// SRA_MM
    67132593U,	// SRA_W
    2214614783U,	// SRL
    67125605U,	// SRL16_MM
    1140867800U,	// SRLI_B
    1140869537U,	// SRLI_D
    1140871173U,	// SRLI_H
    1140874731U,	// SRLI_W
    2214609668U,	// SRLRI_B
    2214611405U,	// SRLRI_D
    1140871217U,	// SRLRI_H
    2214616599U,	// SRLRI_W
    67126171U,	// SRLR_B
    67128135U,	// SRLR_D
    67129588U,	// SRLR_H
    67133321U,	// SRLR_W
    67132492U,	// SRLV
    67132492U,	// SRLV_MM
    67126124U,	// SRL_B
    67127914U,	// SRL_D
    67129464U,	// SRL_H
    2214614783U,	// SRL_MM
    67133066U,	// SRL_W
    9336U,	// SSNOP
    9336U,	// SSNOP_MM
    25182215U,	// STORE_ACC128
    25182215U,	// STORE_ACC64
    25182215U,	// STORE_ACC64DSP
    25188269U,	// STORE_CCOND_DSP
    25183365U,	// ST_B
    25185616U,	// ST_D
    25186855U,	// ST_H
    25190819U,	// ST_W
    67127006U,	// SUB
    67130269U,	// SUBQH_PH
    67130384U,	// SUBQH_R_PH
    67133251U,	// SUBQH_R_W
    67132856U,	// SUBQH_W
    67130344U,	// SUBQ_PH
    67130441U,	// SUBQ_S_PH
    67133557U,	// SUBQ_S_W
    67126527U,	// SUBSUS_U_B
    67128850U,	// SUBSUS_U_D
    67130069U,	// SUBSUS_U_H
    67134045U,	// SUBSUS_U_W
    67126330U,	// SUBSUU_S_B
    67128423U,	// SUBSUU_S_D
    67129809U,	// SUBSUU_S_H
    67133667U,	// SUBSUU_S_W
    67126292U,	// SUBS_S_B
    67128363U,	// SUBS_S_D
    67129771U,	// SUBS_S_H
    67133607U,	// SUBS_S_W
    67126507U,	// SUBS_U_B
    67128830U,	// SUBS_U_D
    67130049U,	// SUBS_U_H
    67134025U,	// SUBS_U_W
    67125671U,	// SUBU16_MM
    67126715U,	// SUBUH_QB
    67126821U,	// SUBUH_R_QB
    67130542U,	// SUBU_PH
    67126929U,	// SUBU_QB
    67130485U,	// SUBU_S_PH
    67126868U,	// SUBU_S_QB
    1140867898U,	// SUBVI_B
    1140869619U,	// SUBVI_D
    1140871255U,	// SUBVI_H
    1140874813U,	// SUBVI_W
    67126586U,	// SUBV_B
    67128931U,	// SUBV_D
    67130128U,	// SUBV_H
    67134126U,	// SUBV_W
    67127006U,	// SUB_MM
    67132256U,	// SUBu
    67132256U,	// SUBu_MM
    679493758U,	// SUXC1
    679493758U,	// SUXC164
    679493758U,	// SUXC1_MM
    25191171U,	// SW
    25182660U,	// SW16_MM
    25191171U,	// SW64
    25182307U,	// SWC1
    25182307U,	// SWC1_MM
    25182456U,	// SWC2
    25182456U,	// SWC2_R6
    25182501U,	// SWC3
    25188118U,	// SWL
    25188118U,	// SWL64
    25188118U,	// SWL_MM
    115059U,	// SWM16_MM
    114888U,	// SWM32_MM
    137186U,	// SWP_MM
    25188518U,	// SWR
    25188518U,	// SWR64
    25188518U,	// SWR_MM
    25191171U,	// SWSP_MM
    679493772U,	// SWXC1
    679493772U,	// SWXC1_MM
    25191171U,	// SW_MM
    549812U,	// SYNC
    152971U,	// SYNCI
    549812U,	// SYNC_MM
    546519U,	// SYSCALL
    546519U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    25183959U,	// SbRxRyOffMemX16
    549739U,	// SebRx16
    549751U,	// SehRx16
    4105028U,	// SelBeqZ
    4105001U,	// SelBneZ
    910333831U,	// SelTBteqZCmp
    910333398U,	// SelTBteqZCmpi
    910334782U,	// SelTBteqZSlt
    910333428U,	// SelTBteqZSlti
    910334890U,	// SelTBteqZSltiu
    910334926U,	// SelTBteqZSltu
    977442695U,	// SelTBtneZCmp
    977442262U,	// SelTBtneZCmpi
    977443646U,	// SelTBtneZSlt
    977442292U,	// SelTBtneZSlti
    977443754U,	// SelTBtneZSltiu
    977443790U,	// SelTBtneZSltu
    25187713U,	// ShRxRyOffMemX16
    2214614771U,	// SllX16
    8412229U,	// SllvRxRy16
    42244926U,	// SltCCRxRy16
    23358U,	// SltRxRy16
    42243572U,	// SltiCCRxImmX16
    469784052U,	// SltiRxImm16
    22004U,	// SltiRxImmX16
    42245034U,	// SltiuCCRxImmX16
    469785514U,	// SltiuRxImm16
    23466U,	// SltiuRxImmX16
    42245070U,	// SltuCCRxRy16
    23502U,	// SltuRxRy16
    42245070U,	// SltuRxRyRz16
    2214609437U,	// SraX16
    8412208U,	// SravRxRy16
    2214614783U,	// SrlX16
    8412236U,	// SrlvRxRy16
    67132256U,	// SubuRxRyRz16
    25191171U,	// SwRxRyOffMemX16
    746611459U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    2214615025U,	// TEQ
    29382114U,	// TEQI
    29382114U,	// TEQI_MM
    2214615025U,	// TEQ_MM
    2214612798U,	// TGE
    29382047U,	// TGEI
    29383587U,	// TGEIU
    29383587U,	// TGEIU_MM
    29382047U,	// TGEI_MM
    2214615945U,	// TGEU
    2214615945U,	// TGEU_MM
    2214612798U,	// TGE_MM
    9331U,	// TLBP
    9331U,	// TLBP_MM
    9342U,	// TLBR
    9342U,	// TLBR_MM
    9321U,	// TLBWI
    9321U,	// TLBWI_MM
    9347U,	// TLBWR
    9347U,	// TLBWR_MM
    2214615875U,	// TLT
    29382138U,	// TLTI
    29383601U,	// TLTIU_MM
    29382138U,	// TLTI_MM
    2214616020U,	// TLTU
    2214616020U,	// TLTU_MM
    2214615875U,	// TLT_MM
    2214612820U,	// TNE
    29382059U,	// TNEI
    29382059U,	// TNEI_MM
    2214612820U,	// TNE_MM
    0U,	// TRAP
    18949U,	// TRUNC_L_D64
    22900U,	// TRUNC_L_S
    20125U,	// TRUNC_W_D32
    20125U,	// TRUNC_W_D64
    20125U,	// TRUNC_W_MM
    23222U,	// TRUNC_W_S
    23222U,	// TRUNC_W_S_MM
    29383601U,	// TTLTIU
    25470U,	// UDIV
    25470U,	// UDIV_MM
    67132344U,	// V3MULU
    67125271U,	// VMM0
    67132359U,	// VMULU
    75514518U,	// VSHF_B
    75516256U,	// VSHF_D
    75517908U,	// VSHF_H
    75521385U,	// VSHF_W
    9359U,	// WAIT
    547640U,	// WAIT_MM
    29382597U,	// WRDSP
    21326U,	// WSBH
    21326U,	// WSBH_MM
    67131534U,	// XOR
    835977U,	// XOR16_MM
    67131534U,	// XOR64
    1140867861U,	// XORI_B
    67131534U,	// XOR_MM
    67132428U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    2214614504U,	// XORi
    2214614504U,	// XORi64
    2214614504U,	// XORi_MM
    8411278U,	// XorRxRxRy16
    0U
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// FRAME_ALLOC
    0U,	// ABSQ_S_PH
    0U,	// ABSQ_S_QB
    0U,	// ABSQ_S_W
    0U,	// ADD
    0U,	// ADDIUPC
    0U,	// ADDIUR1SP_MM
    0U,	// ADDIUR2_MM
    0U,	// ADDIUS5_MM
    0U,	// ADDIUSP_MM
    0U,	// ADDQH_PH
    0U,	// ADDQH_R_PH
    0U,	// ADDQH_R_W
    0U,	// ADDQH_W
    0U,	// ADDQ_PH
    0U,	// ADDQ_S_PH
    0U,	// ADDQ_S_W
    0U,	// ADDSC
    0U,	// ADDS_A_B
    0U,	// ADDS_A_D
    0U,	// ADDS_A_H
    0U,	// ADDS_A_W
    0U,	// ADDS_S_B
    0U,	// ADDS_S_D
    0U,	// ADDS_S_H
    0U,	// ADDS_S_W
    0U,	// ADDS_U_B
    0U,	// ADDS_U_D
    0U,	// ADDS_U_H
    0U,	// ADDS_U_W
    0U,	// ADDU16_MM
    0U,	// ADDUH_QB
    0U,	// ADDUH_R_QB
    0U,	// ADDU_PH
    0U,	// ADDU_QB
    0U,	// ADDU_S_PH
    0U,	// ADDU_S_QB
    0U,	// ADDVI_B
    0U,	// ADDVI_D
    0U,	// ADDVI_H
    0U,	// ADDVI_W
    0U,	// ADDV_B
    0U,	// ADDV_D
    0U,	// ADDV_H
    0U,	// ADDV_W
    0U,	// ADDWC
    0U,	// ADD_A_B
    0U,	// ADD_A_D
    0U,	// ADD_A_H
    0U,	// ADD_A_W
    0U,	// ADD_MM
    0U,	// ADDi
    0U,	// ADDi_MM
    0U,	// ADDiu
    0U,	// ADDiu_MM
    0U,	// ADDu
    0U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    2U,	// ALIGN
    0U,	// ALUIPC
    0U,	// AND
    0U,	// AND16_MM
    0U,	// AND64
    0U,	// ANDI16_MM
    0U,	// ANDI_B
    0U,	// AND_MM
    0U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    0U,	// ANDi
    0U,	// ANDi64
    0U,	// ANDi_MM
    0U,	// APPEND
    0U,	// ASUB_S_B
    0U,	// ASUB_S_D
    0U,	// ASUB_S_H
    0U,	// ASUB_S_W
    0U,	// ASUB_U_B
    0U,	// ASUB_U_D
    0U,	// ASUB_U_H
    0U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// AUI
    0U,	// AUIPC
    0U,	// AVER_S_B
    0U,	// AVER_S_D
    0U,	// AVER_S_H
    0U,	// AVER_S_W
    0U,	// AVER_U_B
    0U,	// AVER_U_D
    0U,	// AVER_U_H
    0U,	// AVER_U_W
    0U,	// AVE_S_B
    0U,	// AVE_S_D
    0U,	// AVE_S_H
    0U,	// AVE_S_W
    0U,	// AVE_U_B
    0U,	// AVE_U_D
    0U,	// AVE_U_H
    0U,	// AVE_U_W
    0U,	// AddiuRxImmX16
    0U,	// AddiuRxPcImmX16
    0U,	// AddiuRxRxImm16
    0U,	// AddiuRxRxImmX16
    0U,	// AddiuRxRyOffMemX16
    0U,	// AddiuSpImm16
    0U,	// AddiuSpImmX16
    0U,	// AdduRxRyRz16
    0U,	// AndRxRxRy16
    0U,	// B
    0U,	// BADDu
    0U,	// BAL
    0U,	// BALC
    0U,	// BALIGN
    0U,	// BAL_BR
    0U,	// BC
    0U,	// BC1EQZ
    0U,	// BC1F
    0U,	// BC1FL
    0U,	// BC1F_MM
    0U,	// BC1NEZ
    0U,	// BC1T
    0U,	// BC1TL
    0U,	// BC1T_MM
    0U,	// BC2EQZ
    0U,	// BC2NEZ
    0U,	// BCLRI_B
    0U,	// BCLRI_D
    0U,	// BCLRI_H
    0U,	// BCLRI_W
    0U,	// BCLR_B
    0U,	// BCLR_D
    0U,	// BCLR_H
    0U,	// BCLR_W
    0U,	// BEQ
    0U,	// BEQ64
    0U,	// BEQC
    0U,	// BEQL
    0U,	// BEQZ16_MM
    0U,	// BEQZALC
    0U,	// BEQZC
    0U,	// BEQZC_MM
    0U,	// BEQ_MM
    0U,	// BGEC
    0U,	// BGEUC
    0U,	// BGEZ
    0U,	// BGEZ64
    0U,	// BGEZAL
    0U,	// BGEZALC
    0U,	// BGEZALL
    0U,	// BGEZALS_MM
    0U,	// BGEZAL_MM
    0U,	// BGEZC
    0U,	// BGEZL
    0U,	// BGEZ_MM
    0U,	// BGTZ
    0U,	// BGTZ64
    0U,	// BGTZALC
    0U,	// BGTZC
    0U,	// BGTZL
    0U,	// BGTZ_MM
    0U,	// BINSLI_B
    0U,	// BINSLI_D
    0U,	// BINSLI_H
    0U,	// BINSLI_W
    1U,	// BINSL_B
    1U,	// BINSL_D
    1U,	// BINSL_H
    1U,	// BINSL_W
    0U,	// BINSRI_B
    0U,	// BINSRI_D
    0U,	// BINSRI_H
    0U,	// BINSRI_W
    1U,	// BINSR_B
    1U,	// BINSR_D
    1U,	// BINSR_H
    1U,	// BINSR_W
    0U,	// BITREV
    0U,	// BITSWAP
    0U,	// BLEZ
    0U,	// BLEZ64
    0U,	// BLEZALC
    0U,	// BLEZC
    0U,	// BLEZL
    0U,	// BLEZ_MM
    0U,	// BLTC
    0U,	// BLTUC
    0U,	// BLTZ
    0U,	// BLTZ64
    0U,	// BLTZAL
    0U,	// BLTZALC
    0U,	// BLTZALL
    0U,	// BLTZALS_MM
    0U,	// BLTZAL_MM
    0U,	// BLTZC
    0U,	// BLTZL
    0U,	// BLTZ_MM
    0U,	// BMNZI_B
    1U,	// BMNZ_V
    0U,	// BMZI_B
    1U,	// BMZ_V
    0U,	// BNE
    0U,	// BNE64
    0U,	// BNEC
    0U,	// BNEGI_B
    0U,	// BNEGI_D
    0U,	// BNEGI_H
    0U,	// BNEGI_W
    0U,	// BNEG_B
    0U,	// BNEG_D
    0U,	// BNEG_H
    0U,	// BNEG_W
    0U,	// BNEL
    0U,	// BNEZ16_MM
    0U,	// BNEZALC
    0U,	// BNEZC
    0U,	// BNEZC_MM
    0U,	// BNE_MM
    0U,	// BNVC
    0U,	// BNZ_B
    0U,	// BNZ_D
    0U,	// BNZ_H
    0U,	// BNZ_V
    0U,	// BNZ_W
    0U,	// BOVC
    0U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    0U,	// BREAK
    0U,	// BREAK16_MM
    0U,	// BREAK_MM
    0U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    1U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    0U,	// BSETI_B
    0U,	// BSETI_D
    0U,	// BSETI_H
    0U,	// BSETI_W
    0U,	// BSET_B
    0U,	// BSET_D
    0U,	// BSET_H
    0U,	// BSET_W
    0U,	// BZ_B
    0U,	// BZ_D
    0U,	// BZ_H
    0U,	// BZ_V
    0U,	// BZ_W
    0U,	// BeqzRxImm16
    0U,	// BeqzRxImmX16
    0U,	// Bimm16
    0U,	// BimmX16
    0U,	// BnezRxImm16
    0U,	// BnezRxImmX16
    0U,	// Break16
    0U,	// Bteqz16
    0U,	// BteqzT8CmpX16
    0U,	// BteqzT8CmpiX16
    0U,	// BteqzT8SltX16
    0U,	// BteqzT8SltiX16
    0U,	// BteqzT8SltiuX16
    0U,	// BteqzT8SltuX16
    0U,	// BteqzX16
    0U,	// Btnez16
    0U,	// BtnezT8CmpX16
    0U,	// BtnezT8CmpiX16
    0U,	// BtnezT8SltX16
    0U,	// BtnezT8SltiX16
    0U,	// BtnezT8SltiuX16
    0U,	// BtnezT8SltuX16
    0U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    0U,	// CACHE
    0U,	// CACHE_MM
    0U,	// CACHE_R6
    0U,	// CEIL_L_D64
    0U,	// CEIL_L_S
    0U,	// CEIL_W_D32
    0U,	// CEIL_W_D64
    0U,	// CEIL_W_MM
    0U,	// CEIL_W_S
    0U,	// CEIL_W_S_MM
    0U,	// CEQI_B
    0U,	// CEQI_D
    0U,	// CEQI_H
    0U,	// CEQI_W
    0U,	// CEQ_B
    0U,	// CEQ_D
    0U,	// CEQ_H
    0U,	// CEQ_W
    0U,	// CFC1
    0U,	// CFC1_MM
    0U,	// CFCMSA
    2U,	// CINS
    2U,	// CINS32
    0U,	// CLASS_D
    0U,	// CLASS_S
    0U,	// CLEI_S_B
    0U,	// CLEI_S_D
    0U,	// CLEI_S_H
    0U,	// CLEI_S_W
    0U,	// CLEI_U_B
    0U,	// CLEI_U_D
    0U,	// CLEI_U_H
    0U,	// CLEI_U_W
    0U,	// CLE_S_B
    0U,	// CLE_S_D
    0U,	// CLE_S_H
    0U,	// CLE_S_W
    0U,	// CLE_U_B
    0U,	// CLE_U_D
    0U,	// CLE_U_H
    0U,	// CLE_U_W
    0U,	// CLO
    0U,	// CLO_MM
    0U,	// CLO_R6
    0U,	// CLTI_S_B
    0U,	// CLTI_S_D
    0U,	// CLTI_S_H
    0U,	// CLTI_S_W
    0U,	// CLTI_U_B
    0U,	// CLTI_U_D
    0U,	// CLTI_U_H
    0U,	// CLTI_U_W
    0U,	// CLT_S_B
    0U,	// CLT_S_D
    0U,	// CLT_S_H
    0U,	// CLT_S_W
    0U,	// CLT_U_B
    0U,	// CLT_U_D
    0U,	// CLT_U_H
    0U,	// CLT_U_W
    0U,	// CLZ
    0U,	// CLZ_MM
    0U,	// CLZ_R6
    0U,	// CMPGDU_EQ_QB
    0U,	// CMPGDU_LE_QB
    0U,	// CMPGDU_LT_QB
    0U,	// CMPGU_EQ_QB
    0U,	// CMPGU_LE_QB
    0U,	// CMPGU_LT_QB
    0U,	// CMPU_EQ_QB
    0U,	// CMPU_LE_QB
    0U,	// CMPU_LT_QB
    0U,	// CMP_EQ_D
    0U,	// CMP_EQ_PH
    0U,	// CMP_EQ_S
    0U,	// CMP_F_D
    0U,	// CMP_F_S
    0U,	// CMP_LE_D
    0U,	// CMP_LE_PH
    0U,	// CMP_LE_S
    0U,	// CMP_LT_D
    0U,	// CMP_LT_PH
    0U,	// CMP_LT_S
    0U,	// CMP_SAF_D
    0U,	// CMP_SAF_S
    0U,	// CMP_SEQ_D
    0U,	// CMP_SEQ_S
    0U,	// CMP_SLE_D
    0U,	// CMP_SLE_S
    0U,	// CMP_SLT_D
    0U,	// CMP_SLT_S
    0U,	// CMP_SUEQ_D
    0U,	// CMP_SUEQ_S
    0U,	// CMP_SULE_D
    0U,	// CMP_SULE_S
    0U,	// CMP_SULT_D
    0U,	// CMP_SULT_S
    0U,	// CMP_SUN_D
    0U,	// CMP_SUN_S
    0U,	// CMP_UEQ_D
    0U,	// CMP_UEQ_S
    0U,	// CMP_ULE_D
    0U,	// CMP_ULE_S
    0U,	// CMP_ULT_D
    0U,	// CMP_ULT_S
    0U,	// CMP_UN_D
    0U,	// CMP_UN_S
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    4U,	// COPY_S_B
    4U,	// COPY_S_D
    4U,	// COPY_S_H
    4U,	// COPY_S_W
    4U,	// COPY_U_B
    4U,	// COPY_U_D
    4U,	// COPY_U_H
    4U,	// COPY_U_W
    0U,	// CTC1
    0U,	// CTC1_MM
    0U,	// CTCMSA
    0U,	// CVT_D32_S
    0U,	// CVT_D32_W
    0U,	// CVT_D32_W_MM
    0U,	// CVT_D64_L
    0U,	// CVT_D64_S
    0U,	// CVT_D64_W
    0U,	// CVT_D_S_MM
    0U,	// CVT_L_D64
    0U,	// CVT_L_D64_MM
    0U,	// CVT_L_S
    0U,	// CVT_L_S_MM
    0U,	// CVT_S_D32
    0U,	// CVT_S_D32_MM
    0U,	// CVT_S_D64
    0U,	// CVT_S_L
    0U,	// CVT_S_W
    0U,	// CVT_S_W_MM
    0U,	// CVT_W_D32
    0U,	// CVT_W_D64
    0U,	// CVT_W_MM
    0U,	// CVT_W_S
    0U,	// CVT_W_S_MM
    0U,	// C_EQ_D32
    0U,	// C_EQ_D64
    0U,	// C_EQ_S
    0U,	// C_F_D32
    0U,	// C_F_D64
    0U,	// C_F_S
    0U,	// C_LE_D32
    0U,	// C_LE_D64
    0U,	// C_LE_S
    0U,	// C_LT_D32
    0U,	// C_LT_D64
    0U,	// C_LT_S
    0U,	// C_NGE_D32
    0U,	// C_NGE_D64
    0U,	// C_NGE_S
    0U,	// C_NGLE_D32
    0U,	// C_NGLE_D64
    0U,	// C_NGLE_S
    0U,	// C_NGL_D32
    0U,	// C_NGL_D64
    0U,	// C_NGL_S
    0U,	// C_NGT_D32
    0U,	// C_NGT_D64
    0U,	// C_NGT_S
    0U,	// C_OLE_D32
    0U,	// C_OLE_D64
    0U,	// C_OLE_S
    0U,	// C_OLT_D32
    0U,	// C_OLT_D64
    0U,	// C_OLT_S
    0U,	// C_SEQ_D32
    0U,	// C_SEQ_D64
    0U,	// C_SEQ_S
    0U,	// C_SF_D32
    0U,	// C_SF_D64
    0U,	// C_SF_S
    0U,	// C_UEQ_D32
    0U,	// C_UEQ_D64
    0U,	// C_UEQ_S
    0U,	// C_ULE_D32
    0U,	// C_ULE_D64
    0U,	// C_ULE_S
    0U,	// C_ULT_D32
    0U,	// C_ULT_D64
    0U,	// C_ULT_S
    0U,	// C_UN_D32
    0U,	// C_UN_D64
    0U,	// C_UN_S
    0U,	// CmpRxRy16
    0U,	// CmpiRxImm16
    0U,	// CmpiRxImmX16
    0U,	// Constant32
    0U,	// DADD
    0U,	// DADDi
    0U,	// DADDiu
    0U,	// DADDu
    0U,	// DAHI
    2U,	// DALIGN
    0U,	// DATI
    0U,	// DAUI
    0U,	// DBITSWAP
    0U,	// DCLO
    0U,	// DCLO_R6
    0U,	// DCLZ
    0U,	// DCLZ_R6
    0U,	// DDIV
    0U,	// DDIVU
    0U,	// DERET
    0U,	// DERET_MM
    10U,	// DEXT
    10U,	// DEXTM
    10U,	// DEXTU
    0U,	// DI
    10U,	// DINS
    10U,	// DINSM
    10U,	// DINSU
    0U,	// DIV
    0U,	// DIVU
    0U,	// DIV_S_B
    0U,	// DIV_S_D
    0U,	// DIV_S_H
    0U,	// DIV_S_W
    0U,	// DIV_U_B
    0U,	// DIV_U_D
    0U,	// DIV_U_H
    0U,	// DIV_U_W
    0U,	// DI_MM
    2U,	// DLSA
    2U,	// DLSA_R6
    0U,	// DMFC0
    0U,	// DMFC1
    0U,	// DMFC2
    0U,	// DMOD
    0U,	// DMODU
    0U,	// DMTC0
    0U,	// DMTC1
    0U,	// DMTC2
    0U,	// DMUH
    0U,	// DMUHU
    0U,	// DMUL
    0U,	// DMULT
    0U,	// DMULTu
    0U,	// DMULU
    0U,	// DMUL_R6
    0U,	// DOTP_S_D
    0U,	// DOTP_S_H
    0U,	// DOTP_S_W
    0U,	// DOTP_U_D
    0U,	// DOTP_U_H
    0U,	// DOTP_U_W
    1U,	// DPADD_S_D
    1U,	// DPADD_S_H
    1U,	// DPADD_S_W
    1U,	// DPADD_U_D
    1U,	// DPADD_U_H
    1U,	// DPADD_U_W
    0U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_S_W_PH
    0U,	// DPAQ_SA_L_W
    0U,	// DPAQ_S_W_PH
    0U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBR
    0U,	// DPAX_W_PH
    0U,	// DPA_W_PH
    0U,	// DPOP
    0U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_S_W_PH
    0U,	// DPSQ_SA_L_W
    0U,	// DPSQ_S_W_PH
    1U,	// DPSUB_S_D
    1U,	// DPSUB_S_H
    1U,	// DPSUB_S_W
    1U,	// DPSUB_U_D
    1U,	// DPSUB_U_H
    1U,	// DPSUB_U_W
    0U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBR
    0U,	// DPSX_W_PH
    0U,	// DPS_W_PH
    0U,	// DROTR
    0U,	// DROTR32
    0U,	// DROTRV
    0U,	// DSBH
    0U,	// DSDIV
    0U,	// DSHD
    0U,	// DSLL
    0U,	// DSLL32
    0U,	// DSLL64_32
    0U,	// DSLLV
    0U,	// DSRA
    0U,	// DSRA32
    0U,	// DSRAV
    0U,	// DSRL
    0U,	// DSRL32
    0U,	// DSRLV
    0U,	// DSUB
    0U,	// DSUBu
    0U,	// DUDIV
    0U,	// DivRxRy16
    0U,	// DivuRxRy16
    0U,	// EHB
    0U,	// EHB_MM
    0U,	// EI
    0U,	// EI_MM
    0U,	// ERET
    0U,	// ERET_MM
    10U,	// EXT
    0U,	// EXTP
    0U,	// EXTPDP
    0U,	// EXTPDPV
    0U,	// EXTPV
    0U,	// EXTRV_RS_W
    0U,	// EXTRV_R_W
    0U,	// EXTRV_S_H
    0U,	// EXTRV_W
    0U,	// EXTR_RS_W
    0U,	// EXTR_R_W
    0U,	// EXTR_S_H
    0U,	// EXTR_W
    2U,	// EXTS
    2U,	// EXTS32
    10U,	// EXT_MM
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_D32
    0U,	// FABS_D64
    0U,	// FABS_MM
    0U,	// FABS_S
    0U,	// FABS_S_MM
    0U,	// FABS_W
    0U,	// FADD_D
    0U,	// FADD_D32
    0U,	// FADD_D64
    0U,	// FADD_MM
    0U,	// FADD_S
    0U,	// FADD_S_MM
    0U,	// FADD_W
    0U,	// FCAF_D
    0U,	// FCAF_W
    0U,	// FCEQ_D
    0U,	// FCEQ_W
    0U,	// FCLASS_D
    0U,	// FCLASS_W
    0U,	// FCLE_D
    0U,	// FCLE_W
    0U,	// FCLT_D
    0U,	// FCLT_W
    0U,	// FCMP_D32
    0U,	// FCMP_D32_MM
    0U,	// FCMP_D64
    0U,	// FCMP_S32
    0U,	// FCMP_S32_MM
    0U,	// FCNE_D
    0U,	// FCNE_W
    0U,	// FCOR_D
    0U,	// FCOR_W
    0U,	// FCUEQ_D
    0U,	// FCUEQ_W
    0U,	// FCULE_D
    0U,	// FCULE_W
    0U,	// FCULT_D
    0U,	// FCULT_W
    0U,	// FCUNE_D
    0U,	// FCUNE_W
    0U,	// FCUN_D
    0U,	// FCUN_W
    0U,	// FDIV_D
    0U,	// FDIV_D32
    0U,	// FDIV_D64
    0U,	// FDIV_MM
    0U,	// FDIV_S
    0U,	// FDIV_S_MM
    0U,	// FDIV_W
    0U,	// FEXDO_H
    0U,	// FEXDO_W
    0U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FEXUPL_D
    0U,	// FEXUPL_W
    0U,	// FEXUPR_D
    0U,	// FEXUPR_W
    0U,	// FFINT_S_D
    0U,	// FFINT_S_W
    0U,	// FFINT_U_D
    0U,	// FFINT_U_W
    0U,	// FFQL_D
    0U,	// FFQL_W
    0U,	// FFQR_D
    0U,	// FFQR_W
    0U,	// FILL_B
    0U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    0U,	// FILL_H
    0U,	// FILL_W
    0U,	// FLOG2_D
    0U,	// FLOG2_W
    0U,	// FLOOR_L_D64
    0U,	// FLOOR_L_S
    0U,	// FLOOR_W_D32
    0U,	// FLOOR_W_D64
    0U,	// FLOOR_W_MM
    0U,	// FLOOR_W_S
    0U,	// FLOOR_W_S_MM
    1U,	// FMADD_D
    1U,	// FMADD_W
    0U,	// FMAX_A_D
    0U,	// FMAX_A_W
    0U,	// FMAX_D
    0U,	// FMAX_W
    0U,	// FMIN_A_D
    0U,	// FMIN_A_W
    0U,	// FMIN_D
    0U,	// FMIN_W
    0U,	// FMOV_D32
    0U,	// FMOV_D32_MM
    0U,	// FMOV_D64
    0U,	// FMOV_S
    0U,	// FMOV_S_MM
    1U,	// FMSUB_D
    1U,	// FMSUB_W
    0U,	// FMUL_D
    0U,	// FMUL_D32
    0U,	// FMUL_D64
    0U,	// FMUL_MM
    0U,	// FMUL_S
    0U,	// FMUL_S_MM
    0U,	// FMUL_W
    0U,	// FNEG_D32
    0U,	// FNEG_D64
    0U,	// FNEG_MM
    0U,	// FNEG_S
    0U,	// FNEG_S_MM
    0U,	// FRCP_D
    0U,	// FRCP_W
    0U,	// FRINT_D
    0U,	// FRINT_W
    0U,	// FRSQRT_D
    0U,	// FRSQRT_W
    0U,	// FSAF_D
    0U,	// FSAF_W
    0U,	// FSEQ_D
    0U,	// FSEQ_W
    0U,	// FSLE_D
    0U,	// FSLE_W
    0U,	// FSLT_D
    0U,	// FSLT_W
    0U,	// FSNE_D
    0U,	// FSNE_W
    0U,	// FSOR_D
    0U,	// FSOR_W
    0U,	// FSQRT_D
    0U,	// FSQRT_D32
    0U,	// FSQRT_D64
    0U,	// FSQRT_MM
    0U,	// FSQRT_S
    0U,	// FSQRT_S_MM
    0U,	// FSQRT_W
    0U,	// FSUB_D
    0U,	// FSUB_D32
    0U,	// FSUB_D64
    0U,	// FSUB_MM
    0U,	// FSUB_S
    0U,	// FSUB_S_MM
    0U,	// FSUB_W
    0U,	// FSUEQ_D
    0U,	// FSUEQ_W
    0U,	// FSULE_D
    0U,	// FSULE_W
    0U,	// FSULT_D
    0U,	// FSULT_W
    0U,	// FSUNE_D
    0U,	// FSUNE_W
    0U,	// FSUN_D
    0U,	// FSUN_W
    0U,	// FTINT_S_D
    0U,	// FTINT_S_W
    0U,	// FTINT_U_D
    0U,	// FTINT_U_W
    0U,	// FTQ_H
    0U,	// FTQ_W
    0U,	// FTRUNC_S_D
    0U,	// FTRUNC_S_W
    0U,	// FTRUNC_U_D
    0U,	// FTRUNC_U_W
    0U,	// GotPrologue16
    0U,	// HADD_S_D
    0U,	// HADD_S_H
    0U,	// HADD_S_W
    0U,	// HADD_U_D
    0U,	// HADD_U_H
    0U,	// HADD_U_W
    0U,	// HSUB_S_D
    0U,	// HSUB_S_H
    0U,	// HSUB_S_W
    0U,	// HSUB_U_D
    0U,	// HSUB_U_H
    0U,	// HSUB_U_W
    0U,	// ILVEV_B
    0U,	// ILVEV_D
    0U,	// ILVEV_H
    0U,	// ILVEV_W
    0U,	// ILVL_B
    0U,	// ILVL_D
    0U,	// ILVL_H
    0U,	// ILVL_W
    0U,	// ILVOD_B
    0U,	// ILVOD_D
    0U,	// ILVOD_H
    0U,	// ILVOD_W
    0U,	// ILVR_B
    0U,	// ILVR_D
    0U,	// ILVR_H
    0U,	// ILVR_W
    10U,	// INS
    0U,	// INSERT_B
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// INSV
    0U,	// INSVE_B
    0U,	// INSVE_D
    0U,	// INSVE_H
    0U,	// INSVE_W
    10U,	// INS_MM
    0U,	// J
    0U,	// JAL
    0U,	// JALR
    0U,	// JALR16_MM
    0U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    0U,	// JALRS16_MM
    0U,	// JALRS_MM
    0U,	// JALR_HB
    0U,	// JALR_MM
    0U,	// JALS_MM
    0U,	// JALX
    0U,	// JAL_MM
    0U,	// JIALC
    0U,	// JIC
    0U,	// JR
    0U,	// JR16_MM
    0U,	// JR64
    0U,	// JRADDIUSP
    0U,	// JRC16_MM
    0U,	// JR_HB
    0U,	// JR_HB_R6
    0U,	// JR_MM
    0U,	// J_MM
    0U,	// Jal16
    0U,	// JalB16
    0U,	// JrRa16
    0U,	// JrcRa16
    0U,	// JrcRx16
    0U,	// JumpLinkReg16
    0U,	// LB
    0U,	// LB64
    0U,	// LBU16_MM
    0U,	// LBUX
    0U,	// LB_MM
    0U,	// LBu
    0U,	// LBu64
    0U,	// LBu_MM
    0U,	// LD
    0U,	// LDC1
    0U,	// LDC164
    0U,	// LDC1_MM
    0U,	// LDC2
    0U,	// LDC2_R6
    0U,	// LDC3
    0U,	// LDI_B
    0U,	// LDI_D
    0U,	// LDI_H
    0U,	// LDI_W
    0U,	// LDL
    0U,	// LDPC
    0U,	// LDR
    0U,	// LDXC1
    0U,	// LDXC164
    0U,	// LD_B
    0U,	// LD_D
    0U,	// LD_H
    0U,	// LD_W
    0U,	// LEA_ADDiu
    0U,	// LEA_ADDiu64
    0U,	// LEA_ADDiu_MM
    0U,	// LH
    0U,	// LH64
    0U,	// LHU16_MM
    0U,	// LHX
    0U,	// LH_MM
    0U,	// LHu
    0U,	// LHu64
    0U,	// LHu_MM
    0U,	// LI16_MM
    0U,	// LL
    0U,	// LLD
    0U,	// LLD_R6
    0U,	// LL_MM
    0U,	// LL_R6
    0U,	// LOAD_ACC128
    0U,	// LOAD_ACC64
    0U,	// LOAD_ACC64DSP
    0U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    2U,	// LSA
    2U,	// LSA_R6
    0U,	// LUXC1
    0U,	// LUXC164
    0U,	// LUXC1_MM
    0U,	// LUi
    0U,	// LUi64
    0U,	// LUi_MM
    0U,	// LW
    0U,	// LW16_MM
    0U,	// LW64
    0U,	// LWC1
    0U,	// LWC1_MM
    0U,	// LWC2
    0U,	// LWC2_R6
    0U,	// LWC3
    0U,	// LWL
    0U,	// LWL64
    0U,	// LWL_MM
    0U,	// LWM16_MM
    0U,	// LWM32_MM
    0U,	// LWPC
    0U,	// LWP_MM
    0U,	// LWR
    0U,	// LWR64
    0U,	// LWR_MM
    0U,	// LWSP_MM
    0U,	// LWUPC
    0U,	// LWU_MM
    0U,	// LWX
    0U,	// LWXC1
    0U,	// LWXC1_MM
    0U,	// LWXS_MM
    0U,	// LW_MM
    0U,	// LWu
    0U,	// LbRxRyOffMemX16
    0U,	// LbuRxRyOffMemX16
    0U,	// LhRxRyOffMemX16
    0U,	// LhuRxRyOffMemX16
    0U,	// LiRxImm16
    0U,	// LiRxImmAlignX16
    0U,	// LiRxImmX16
    0U,	// LoadAddr32Imm
    0U,	// LoadAddr32Reg
    0U,	// LoadImm32Reg
    0U,	// LoadImm64Reg
    0U,	// LwConstant32
    0U,	// LwRxPcTcp16
    0U,	// LwRxPcTcpX16
    0U,	// LwRxRyOffMemX16
    0U,	// LwRxSpImmX16
    0U,	// MADD
    1U,	// MADDF_D
    1U,	// MADDF_S
    1U,	// MADDR_Q_H
    1U,	// MADDR_Q_W
    0U,	// MADDU
    0U,	// MADDU_DSP
    0U,	// MADDU_MM
    1U,	// MADDV_B
    1U,	// MADDV_D
    1U,	// MADDV_H
    1U,	// MADDV_W
    10U,	// MADD_D32
    10U,	// MADD_D32_MM
    10U,	// MADD_D64
    0U,	// MADD_DSP
    0U,	// MADD_MM
    1U,	// MADD_Q_H
    1U,	// MADD_Q_W
    10U,	// MADD_S
    10U,	// MADD_S_MM
    0U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHR
    0U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHR
    0U,	// MAXA_D
    0U,	// MAXA_S
    0U,	// MAXI_S_B
    0U,	// MAXI_S_D
    0U,	// MAXI_S_H
    0U,	// MAXI_S_W
    0U,	// MAXI_U_B
    0U,	// MAXI_U_D
    0U,	// MAXI_U_H
    0U,	// MAXI_U_W
    0U,	// MAX_A_B
    0U,	// MAX_A_D
    0U,	// MAX_A_H
    0U,	// MAX_A_W
    0U,	// MAX_D
    0U,	// MAX_S
    0U,	// MAX_S_B
    0U,	// MAX_S_D
    0U,	// MAX_S_H
    0U,	// MAX_S_W
    0U,	// MAX_U_B
    0U,	// MAX_U_D
    0U,	// MAX_U_H
    0U,	// MAX_U_W
    0U,	// MFC0
    0U,	// MFC1
    0U,	// MFC1_MM
    0U,	// MFC2
    0U,	// MFHC1_D32
    0U,	// MFHC1_D64
    0U,	// MFHC1_MM
    0U,	// MFHI
    0U,	// MFHI16_MM
    0U,	// MFHI64
    0U,	// MFHI_DSP
    0U,	// MFHI_MM
    0U,	// MFLO
    0U,	// MFLO16_MM
    0U,	// MFLO64
    0U,	// MFLO_DSP
    0U,	// MFLO_MM
    0U,	// MINA_D
    0U,	// MINA_S
    0U,	// MINI_S_B
    0U,	// MINI_S_D
    0U,	// MINI_S_H
    0U,	// MINI_S_W
    0U,	// MINI_U_B
    0U,	// MINI_U_D
    0U,	// MINI_U_H
    0U,	// MINI_U_W
    0U,	// MIN_A_B
    0U,	// MIN_A_D
    0U,	// MIN_A_H
    0U,	// MIN_A_W
    0U,	// MIN_D
    0U,	// MIN_S
    0U,	// MIN_S_B
    0U,	// MIN_S_D
    0U,	// MIN_S_H
    0U,	// MIN_S_W
    0U,	// MIN_U_B
    0U,	// MIN_U_D
    0U,	// MIN_U_H
    0U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MOD
    0U,	// MODSUB
    0U,	// MODU
    0U,	// MOD_S_B
    0U,	// MOD_S_D
    0U,	// MOD_S_H
    0U,	// MOD_S_W
    0U,	// MOD_U_B
    0U,	// MOD_U_D
    0U,	// MOD_U_H
    0U,	// MOD_U_W
    0U,	// MOVE16_MM
    0U,	// MOVE_V
    0U,	// MOVF_D32
    0U,	// MOVF_D32_MM
    0U,	// MOVF_D64
    0U,	// MOVF_I
    0U,	// MOVF_I64
    0U,	// MOVF_I_MM
    0U,	// MOVF_S
    0U,	// MOVF_S_MM
    0U,	// MOVN_I64_D64
    0U,	// MOVN_I64_I
    0U,	// MOVN_I64_I64
    0U,	// MOVN_I64_S
    0U,	// MOVN_I_D32
    0U,	// MOVN_I_D32_MM
    0U,	// MOVN_I_D64
    0U,	// MOVN_I_I
    0U,	// MOVN_I_I64
    0U,	// MOVN_I_MM
    0U,	// MOVN_I_S
    0U,	// MOVN_I_S_MM
    0U,	// MOVT_D32
    0U,	// MOVT_D32_MM
    0U,	// MOVT_D64
    0U,	// MOVT_I
    0U,	// MOVT_I64
    0U,	// MOVT_I_MM
    0U,	// MOVT_S
    0U,	// MOVT_S_MM
    0U,	// MOVZ_I64_D64
    0U,	// MOVZ_I64_I
    0U,	// MOVZ_I64_I64
    0U,	// MOVZ_I64_S
    0U,	// MOVZ_I_D32
    0U,	// MOVZ_I_D32_MM
    0U,	// MOVZ_I_D64
    0U,	// MOVZ_I_I
    0U,	// MOVZ_I_I64
    0U,	// MOVZ_I_MM
    0U,	// MOVZ_I_S
    0U,	// MOVZ_I_S_MM
    0U,	// MSUB
    1U,	// MSUBF_D
    1U,	// MSUBF_S
    1U,	// MSUBR_Q_H
    1U,	// MSUBR_Q_W
    0U,	// MSUBU
    0U,	// MSUBU_DSP
    0U,	// MSUBU_MM
    1U,	// MSUBV_B
    1U,	// MSUBV_D
    1U,	// MSUBV_H
    1U,	// MSUBV_W
    10U,	// MSUB_D32
    10U,	// MSUB_D32_MM
    10U,	// MSUB_D64
    0U,	// MSUB_DSP
    0U,	// MSUB_MM
    1U,	// MSUB_Q_H
    1U,	// MSUB_Q_W
    10U,	// MSUB_S
    10U,	// MSUB_S_MM
    0U,	// MTC0
    0U,	// MTC1
    0U,	// MTC1_MM
    0U,	// MTC2
    0U,	// MTHC1_D32
    0U,	// MTHC1_D64
    0U,	// MTHC1_MM
    0U,	// MTHI
    0U,	// MTHI64
    0U,	// MTHI_DSP
    0U,	// MTHI_MM
    0U,	// MTHLIP
    0U,	// MTLO
    0U,	// MTLO64
    0U,	// MTLO_DSP
    0U,	// MTLO_MM
    0U,	// MTM0
    0U,	// MTM1
    0U,	// MTM2
    0U,	// MTP0
    0U,	// MTP1
    0U,	// MTP2
    0U,	// MUH
    0U,	// MUHU
    0U,	// MUL
    0U,	// MULEQ_S_W_PHL
    0U,	// MULEQ_S_W_PHR
    0U,	// MULEU_S_PH_QBL
    0U,	// MULEU_S_PH_QBR
    0U,	// MULQ_RS_PH
    0U,	// MULQ_RS_W
    0U,	// MULQ_S_PH
    0U,	// MULQ_S_W
    0U,	// MULR_Q_H
    0U,	// MULR_Q_W
    0U,	// MULSAQ_S_W_PH
    0U,	// MULSA_W_PH
    0U,	// MULT
    0U,	// MULTU_DSP
    0U,	// MULT_DSP
    0U,	// MULT_MM
    0U,	// MULTu
    0U,	// MULTu_MM
    0U,	// MULU
    0U,	// MULV_B
    0U,	// MULV_D
    0U,	// MULV_H
    0U,	// MULV_W
    0U,	// MUL_MM
    0U,	// MUL_PH
    0U,	// MUL_Q_H
    0U,	// MUL_Q_W
    0U,	// MUL_R6
    0U,	// MUL_S_PH
    0U,	// Mfhi16
    0U,	// Mflo16
    0U,	// Move32R16
    0U,	// MoveR3216
    0U,	// MultRxRy16
    0U,	// MultRxRyRz16
    0U,	// MultuRxRy16
    0U,	// MultuRxRyRz16
    0U,	// NLOC_B
    0U,	// NLOC_D
    0U,	// NLOC_H
    0U,	// NLOC_W
    0U,	// NLZC_B
    0U,	// NLZC_D
    0U,	// NLZC_H
    0U,	// NLZC_W
    10U,	// NMADD_D32
    10U,	// NMADD_D32_MM
    10U,	// NMADD_D64
    10U,	// NMADD_S
    10U,	// NMADD_S_MM
    10U,	// NMSUB_D32
    10U,	// NMSUB_D32_MM
    10U,	// NMSUB_D64
    10U,	// NMSUB_S
    10U,	// NMSUB_S_MM
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR64
    0U,	// NORI_B
    0U,	// NOR_MM
    0U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// NOT16_MM
    0U,	// NegRxRy16
    0U,	// NotRxRy16
    0U,	// OR
    0U,	// OR16_MM
    0U,	// OR64
    0U,	// ORI_B
    0U,	// OR_MM
    0U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    0U,	// ORi
    0U,	// ORi64
    0U,	// ORi_MM
    0U,	// OrRxRxRy16
    0U,	// PACKRL_PH
    0U,	// PAUSE
    0U,	// PAUSE_MM
    0U,	// PCKEV_B
    0U,	// PCKEV_D
    0U,	// PCKEV_H
    0U,	// PCKEV_W
    0U,	// PCKOD_B
    0U,	// PCKOD_D
    0U,	// PCKOD_H
    0U,	// PCKOD_W
    0U,	// PCNT_B
    0U,	// PCNT_D
    0U,	// PCNT_H
    0U,	// PCNT_W
    0U,	// PICK_PH
    0U,	// PICK_QB
    0U,	// POP
    0U,	// PRECEQU_PH_QBL
    0U,	// PRECEQU_PH_QBLA
    0U,	// PRECEQU_PH_QBR
    0U,	// PRECEQU_PH_QBRA
    0U,	// PRECEQ_W_PHL
    0U,	// PRECEQ_W_PHR
    0U,	// PRECEU_PH_QBL
    0U,	// PRECEU_PH_QBLA
    0U,	// PRECEU_PH_QBR
    0U,	// PRECEU_PH_QBRA
    0U,	// PRECRQU_S_QB_PH
    0U,	// PRECRQ_PH_W
    0U,	// PRECRQ_QB_PH
    0U,	// PRECRQ_RS_PH_W
    0U,	// PRECR_QB_PH
    0U,	// PRECR_SRA_PH_W
    0U,	// PRECR_SRA_R_PH_W
    0U,	// PREF
    0U,	// PREF_MM
    0U,	// PREF_R6
    0U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoCVT_D32_W
    0U,	// PseudoCVT_D64_L
    0U,	// PseudoCVT_D64_W
    0U,	// PseudoCVT_S_L
    0U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoUDIV
    0U,	// RADDU_W_QB
    0U,	// RDDSP
    0U,	// RDHWR
    0U,	// RDHWR64
    0U,	// RDHWR_MM
    0U,	// REPLV_PH
    0U,	// REPLV_QB
    0U,	// REPL_PH
    0U,	// REPL_QB
    0U,	// RINT_D
    0U,	// RINT_S
    0U,	// ROTR
    0U,	// ROTRV
    0U,	// ROTRV_MM
    0U,	// ROTR_MM
    0U,	// ROUND_L_D64
    0U,	// ROUND_L_S
    0U,	// ROUND_W_D32
    0U,	// ROUND_W_D64
    0U,	// ROUND_W_MM
    0U,	// ROUND_W_S
    0U,	// ROUND_W_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    0U,	// SAT_S_B
    0U,	// SAT_S_D
    0U,	// SAT_S_H
    0U,	// SAT_S_W
    0U,	// SAT_U_B
    0U,	// SAT_U_D
    0U,	// SAT_U_H
    0U,	// SAT_U_W
    0U,	// SB
    0U,	// SB16_MM
    0U,	// SB64
    0U,	// SB_MM
    0U,	// SC
    0U,	// SCD
    0U,	// SCD_R6
    0U,	// SC_MM
    0U,	// SC_R6
    0U,	// SD
    0U,	// SDBBP
    0U,	// SDBBP16_MM
    0U,	// SDBBP_MM
    0U,	// SDBBP_R6
    0U,	// SDC1
    0U,	// SDC164
    0U,	// SDC1_MM
    0U,	// SDC2
    0U,	// SDC2_R6
    0U,	// SDC3
    0U,	// SDIV
    0U,	// SDIV_MM
    0U,	// SDL
    0U,	// SDR
    0U,	// SDXC1
    0U,	// SDXC164
    0U,	// SEB
    0U,	// SEB64
    0U,	// SEB_MM
    0U,	// SEH
    0U,	// SEH64
    0U,	// SEH_MM
    0U,	// SELEQZ
    0U,	// SELEQZ64
    0U,	// SELEQZ_D
    0U,	// SELEQZ_S
    0U,	// SELNEZ
    0U,	// SELNEZ64
    0U,	// SELNEZ_D
    0U,	// SELNEZ_S
    1U,	// SEL_D
    1U,	// SEL_S
    0U,	// SEQ
    0U,	// SEQi
    0U,	// SH
    0U,	// SH16_MM
    0U,	// SH64
    0U,	// SHF_B
    0U,	// SHF_H
    0U,	// SHF_W
    0U,	// SHILO
    0U,	// SHILOV
    0U,	// SHLLV_PH
    0U,	// SHLLV_QB
    0U,	// SHLLV_S_PH
    0U,	// SHLLV_S_W
    0U,	// SHLL_PH
    0U,	// SHLL_QB
    0U,	// SHLL_S_PH
    0U,	// SHLL_S_W
    0U,	// SHRAV_PH
    0U,	// SHRAV_QB
    0U,	// SHRAV_R_PH
    0U,	// SHRAV_R_QB
    0U,	// SHRAV_R_W
    0U,	// SHRA_PH
    0U,	// SHRA_QB
    0U,	// SHRA_R_PH
    0U,	// SHRA_R_QB
    0U,	// SHRA_R_W
    0U,	// SHRLV_PH
    0U,	// SHRLV_QB
    0U,	// SHRL_PH
    0U,	// SHRL_QB
    0U,	// SH_MM
    4U,	// SLDI_B
    4U,	// SLDI_D
    4U,	// SLDI_H
    4U,	// SLDI_W
    5U,	// SLD_B
    5U,	// SLD_D
    5U,	// SLD_H
    5U,	// SLD_W
    0U,	// SLL
    0U,	// SLL16_MM
    0U,	// SLL64_32
    0U,	// SLL64_64
    0U,	// SLLI_B
    0U,	// SLLI_D
    0U,	// SLLI_H
    0U,	// SLLI_W
    0U,	// SLLV
    0U,	// SLLV_MM
    0U,	// SLL_B
    0U,	// SLL_D
    0U,	// SLL_H
    0U,	// SLL_MM
    0U,	// SLL_W
    0U,	// SLT
    0U,	// SLT64
    0U,	// SLT_MM
    0U,	// SLTi
    0U,	// SLTi64
    0U,	// SLTi_MM
    0U,	// SLTiu
    0U,	// SLTiu64
    0U,	// SLTiu_MM
    0U,	// SLTu
    0U,	// SLTu64
    0U,	// SLTu_MM
    0U,	// SNE
    0U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    4U,	// SPLATI_B
    4U,	// SPLATI_D
    4U,	// SPLATI_H
    4U,	// SPLATI_W
    4U,	// SPLAT_B
    4U,	// SPLAT_D
    4U,	// SPLAT_H
    4U,	// SPLAT_W
    0U,	// SRA
    0U,	// SRAI_B
    0U,	// SRAI_D
    0U,	// SRAI_H
    0U,	// SRAI_W
    0U,	// SRARI_B
    0U,	// SRARI_D
    0U,	// SRARI_H
    0U,	// SRARI_W
    0U,	// SRAR_B
    0U,	// SRAR_D
    0U,	// SRAR_H
    0U,	// SRAR_W
    0U,	// SRAV
    0U,	// SRAV_MM
    0U,	// SRA_B
    0U,	// SRA_D
    0U,	// SRA_H
    0U,	// SRA_MM
    0U,	// SRA_W
    0U,	// SRL
    0U,	// SRL16_MM
    0U,	// SRLI_B
    0U,	// SRLI_D
    0U,	// SRLI_H
    0U,	// SRLI_W
    0U,	// SRLRI_B
    0U,	// SRLRI_D
    0U,	// SRLRI_H
    0U,	// SRLRI_W
    0U,	// SRLR_B
    0U,	// SRLR_D
    0U,	// SRLR_H
    0U,	// SRLR_W
    0U,	// SRLV
    0U,	// SRLV_MM
    0U,	// SRL_B
    0U,	// SRL_D
    0U,	// SRL_H
    0U,	// SRL_MM
    0U,	// SRL_W
    0U,	// SSNOP
    0U,	// SSNOP_MM
    0U,	// STORE_ACC128
    0U,	// STORE_ACC64
    0U,	// STORE_ACC64DSP
    0U,	// STORE_CCOND_DSP
    0U,	// ST_B
    0U,	// ST_D
    0U,	// ST_H
    0U,	// ST_W
    0U,	// SUB
    0U,	// SUBQH_PH
    0U,	// SUBQH_R_PH
    0U,	// SUBQH_R_W
    0U,	// SUBQH_W
    0U,	// SUBQ_PH
    0U,	// SUBQ_S_PH
    0U,	// SUBQ_S_W
    0U,	// SUBSUS_U_B
    0U,	// SUBSUS_U_D
    0U,	// SUBSUS_U_H
    0U,	// SUBSUS_U_W
    0U,	// SUBSUU_S_B
    0U,	// SUBSUU_S_D
    0U,	// SUBSUU_S_H
    0U,	// SUBSUU_S_W
    0U,	// SUBS_S_B
    0U,	// SUBS_S_D
    0U,	// SUBS_S_H
    0U,	// SUBS_S_W
    0U,	// SUBS_U_B
    0U,	// SUBS_U_D
    0U,	// SUBS_U_H
    0U,	// SUBS_U_W
    0U,	// SUBU16_MM
    0U,	// SUBUH_QB
    0U,	// SUBUH_R_QB
    0U,	// SUBU_PH
    0U,	// SUBU_QB
    0U,	// SUBU_S_PH
    0U,	// SUBU_S_QB
    0U,	// SUBVI_B
    0U,	// SUBVI_D
    0U,	// SUBVI_H
    0U,	// SUBVI_W
    0U,	// SUBV_B
    0U,	// SUBV_D
    0U,	// SUBV_H
    0U,	// SUBV_W
    0U,	// SUB_MM
    0U,	// SUBu
    0U,	// SUBu_MM
    0U,	// SUXC1
    0U,	// SUXC164
    0U,	// SUXC1_MM
    0U,	// SW
    0U,	// SW16_MM
    0U,	// SW64
    0U,	// SWC1
    0U,	// SWC1_MM
    0U,	// SWC2
    0U,	// SWC2_R6
    0U,	// SWC3
    0U,	// SWL
    0U,	// SWL64
    0U,	// SWL_MM
    0U,	// SWM16_MM
    0U,	// SWM32_MM
    0U,	// SWP_MM
    0U,	// SWR
    0U,	// SWR64
    0U,	// SWR_MM
    0U,	// SWSP_MM
    0U,	// SWXC1
    0U,	// SWXC1_MM
    0U,	// SW_MM
    0U,	// SYNC
    0U,	// SYNCI
    0U,	// SYNC_MM
    0U,	// SYSCALL
    0U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    0U,	// SbRxRyOffMemX16
    0U,	// SebRx16
    0U,	// SehRx16
    0U,	// SelBeqZ
    0U,	// SelBneZ
    0U,	// SelTBteqZCmp
    0U,	// SelTBteqZCmpi
    0U,	// SelTBteqZSlt
    0U,	// SelTBteqZSlti
    0U,	// SelTBteqZSltiu
    0U,	// SelTBteqZSltu
    0U,	// SelTBtneZCmp
    0U,	// SelTBtneZCmpi
    0U,	// SelTBtneZSlt
    0U,	// SelTBtneZSlti
    0U,	// SelTBtneZSltiu
    0U,	// SelTBtneZSltu
    0U,	// ShRxRyOffMemX16
    0U,	// SllX16
    0U,	// SllvRxRy16
    0U,	// SltCCRxRy16
    0U,	// SltRxRy16
    0U,	// SltiCCRxImmX16
    0U,	// SltiRxImm16
    0U,	// SltiRxImmX16
    0U,	// SltiuCCRxImmX16
    0U,	// SltiuRxImm16
    0U,	// SltiuRxImmX16
    0U,	// SltuCCRxRy16
    0U,	// SltuRxRy16
    0U,	// SltuRxRyRz16
    0U,	// SraX16
    0U,	// SravRxRy16
    0U,	// SrlX16
    0U,	// SrlvRxRy16
    0U,	// SubuRxRyRz16
    0U,	// SwRxRyOffMemX16
    0U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    0U,	// TEQ
    0U,	// TEQI
    0U,	// TEQI_MM
    0U,	// TEQ_MM
    0U,	// TGE
    0U,	// TGEI
    0U,	// TGEIU
    0U,	// TGEIU_MM
    0U,	// TGEI_MM
    0U,	// TGEU
    0U,	// TGEU_MM
    0U,	// TGE_MM
    0U,	// TLBP
    0U,	// TLBP_MM
    0U,	// TLBR
    0U,	// TLBR_MM
    0U,	// TLBWI
    0U,	// TLBWI_MM
    0U,	// TLBWR
    0U,	// TLBWR_MM
    0U,	// TLT
    0U,	// TLTI
    0U,	// TLTIU_MM
    0U,	// TLTI_MM
    0U,	// TLTU
    0U,	// TLTU_MM
    0U,	// TLT_MM
    0U,	// TNE
    0U,	// TNEI
    0U,	// TNEI_MM
    0U,	// TNE_MM
    0U,	// TRAP
    0U,	// TRUNC_L_D64
    0U,	// TRUNC_L_S
    0U,	// TRUNC_W_D32
    0U,	// TRUNC_W_D64
    0U,	// TRUNC_W_MM
    0U,	// TRUNC_W_S
    0U,	// TRUNC_W_S_MM
    0U,	// TTLTIU
    0U,	// UDIV
    0U,	// UDIV_MM
    0U,	// V3MULU
    0U,	// VMM0
    0U,	// VMULU
    1U,	// VSHF_B
    1U,	// VSHF_D
    1U,	// VSHF_H
    1U,	// VSHF_W
    0U,	// WAIT
    0U,	// WAIT_MM
    0U,	// WRDSP
    0U,	// WSBH
    0U,	// WSBH_MM
    0U,	// XOR
    0U,	// XOR16_MM
    0U,	// XOR64
    0U,	// XORI_B
    0U,	// XOR_MM
    0U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    0U,	// XORi
    0U,	// XORi64
    0U,	// XORi_MM
    0U,	// XorRxRxRy16
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 22 */ 'v', 'm', 'm', '0', 9, 0,
  /* 28 */ 'm', 't', 'm', '0', 9, 0,
  /* 34 */ 'm', 't', 'p', '0', 9, 0,
  /* 40 */ 'l', 'd', 'c', '1', 9, 0,
  /* 46 */ 's', 'd', 'c', '1', 9, 0,
  /* 52 */ 'c', 'f', 'c', '1', 9, 0,
  /* 58 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 65 */ 'm', 'f', 'h', 'c', '1', 9, 0,
  /* 72 */ 'm', 't', 'h', 'c', '1', 9, 0,
  /* 79 */ 'c', 't', 'c', '1', 9, 0,
  /* 85 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 92 */ 'l', 'w', 'c', '1', 9, 0,
  /* 98 */ 's', 'w', 'c', '1', 9, 0,
  /* 104 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 111 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 118 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 125 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 132 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 139 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 146 */ 'm', 't', 'm', '1', 9, 0,
  /* 152 */ 'm', 't', 'p', '1', 9, 0,
  /* 158 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 166 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 176 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 184 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 192 */ 'l', 'w', 'm', '3', '2', 9, 0,
  /* 199 */ 's', 'w', 'm', '3', '2', 9, 0,
  /* 206 */ 'd', 'r', 'o', 't', 'r', '3', '2', 9, 0,
  /* 215 */ 'l', 'd', 'c', '2', 9, 0,
  /* 221 */ 's', 'd', 'c', '2', 9, 0,
  /* 227 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 234 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 241 */ 'l', 'w', 'c', '2', 9, 0,
  /* 247 */ 's', 'w', 'c', '2', 9, 0,
  /* 253 */ 'm', 't', 'm', '2', 9, 0,
  /* 259 */ 'm', 't', 'p', '2', 9, 0,
  /* 265 */ 'a', 'd', 'd', 'i', 'u', 'r', '2', 9, 0,
  /* 274 */ 'l', 'd', 'c', '3', 9, 0,
  /* 280 */ 's', 'd', 'c', '3', 9, 0,
  /* 286 */ 'l', 'w', 'c', '3', 9, 0,
  /* 292 */ 's', 'w', 'c', '3', 9, 0,
  /* 298 */ 'a', 'd', 'd', 'i', 'u', 's', '5', 9, 0,
  /* 307 */ 's', 'b', '1', '6', 9, 0,
  /* 313 */ 'a', 'n', 'd', '1', '6', 9, 0,
  /* 320 */ 's', 'h', '1', '6', 9, 0,
  /* 326 */ 'a', 'n', 'd', 'i', '1', '6', 9, 0,
  /* 334 */ 'l', 'i', '1', '6', 9, 0,
  /* 340 */ 'b', 'r', 'e', 'a', 'k', '1', '6', 9, 0,
  /* 349 */ 's', 'l', 'l', '1', '6', 9, 0,
  /* 356 */ 's', 'r', 'l', '1', '6', 9, 0,
  /* 363 */ 'l', 'w', 'm', '1', '6', 9, 0,
  /* 370 */ 's', 'w', 'm', '1', '6', 9, 0,
  /* 377 */ 's', 'd', 'b', 'b', 'p', '1', '6', 9, 0,
  /* 386 */ 'j', 'r', '1', '6', 9, 0,
  /* 392 */ 'x', 'o', 'r', '1', '6', 9, 0,
  /* 399 */ 'j', 'a', 'l', 'r', 's', '1', '6', 9, 0,
  /* 408 */ 'n', 'o', 't', '1', '6', 9, 0,
  /* 415 */ 'l', 'b', 'u', '1', '6', 9, 0,
  /* 422 */ 's', 'u', 'b', 'u', '1', '6', 9, 0,
  /* 430 */ 'a', 'd', 'd', 'u', '1', '6', 9, 0,
  /* 438 */ 'l', 'h', 'u', '1', '6', 9, 0,
  /* 445 */ 'l', 'w', '1', '6', 9, 0,
  /* 451 */ 's', 'w', '1', '6', 9, 0,
  /* 457 */ 'b', 'n', 'e', 'z', '1', '6', 9, 0,
  /* 465 */ 'b', 'e', 'q', 'z', '1', '6', 9, 0,
  /* 473 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 489 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 506 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 522 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 539 */ 'd', 's', 'r', 'a', 9, 0,
  /* 545 */ 'd', 'l', 's', 'a', 9, 0,
  /* 551 */ 'c', 'f', 'c', 'm', 's', 'a', 9, 0,
  /* 559 */ 'c', 't', 'c', 'm', 's', 'a', 9, 0,
  /* 567 */ 'a', 'd', 'd', '_', 'a', '.', 'b', 9, 0,
  /* 576 */ 'm', 'i', 'n', '_', 'a', '.', 'b', 9, 0,
  /* 585 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'b', 9, 0,
  /* 595 */ 'm', 'a', 'x', '_', 'a', '.', 'b', 9, 0,
  /* 604 */ 's', 'r', 'a', '.', 'b', 9, 0,
  /* 611 */ 'n', 'l', 'o', 'c', '.', 'b', 9, 0,
  /* 619 */ 'n', 'l', 'z', 'c', '.', 'b', 9, 0,
  /* 627 */ 's', 'l', 'd', '.', 'b', 9, 0,
  /* 634 */ 'p', 'c', 'k', 'o', 'd', '.', 'b', 9, 0,
  /* 643 */ 'i', 'l', 'v', 'o', 'd', '.', 'b', 9, 0,
  /* 652 */ 'i', 'n', 's', 'v', 'e', '.', 'b', 9, 0,
  /* 661 */ 'v', 's', 'h', 'f', '.', 'b', 9, 0,
  /* 669 */ 'b', 'n', 'e', 'g', '.', 'b', 9, 0,
  /* 677 */ 's', 'r', 'a', 'i', '.', 'b', 9, 0,
  /* 685 */ 's', 'l', 'd', 'i', '.', 'b', 9, 0,
  /* 693 */ 'a', 'n', 'd', 'i', '.', 'b', 9, 0,
  /* 701 */ 'b', 'n', 'e', 'g', 'i', '.', 'b', 9, 0,
  /* 710 */ 'b', 's', 'e', 'l', 'i', '.', 'b', 9, 0,
  /* 719 */ 's', 'l', 'l', 'i', '.', 'b', 9, 0,
  /* 727 */ 's', 'r', 'l', 'i', '.', 'b', 9, 0,
  /* 735 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'b', 9, 0,
  /* 745 */ 'c', 'e', 'q', 'i', '.', 'b', 9, 0,
  /* 753 */ 's', 'r', 'a', 'r', 'i', '.', 'b', 9, 0,
  /* 762 */ 'b', 'c', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 771 */ 's', 'r', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 780 */ 'n', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 788 */ 'x', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 796 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'b', 9, 0,
  /* 806 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'b', 9, 0,
  /* 816 */ 'b', 's', 'e', 't', 'i', '.', 'b', 9, 0,
  /* 825 */ 's', 'u', 'b', 'v', 'i', '.', 'b', 9, 0,
  /* 834 */ 'a', 'd', 'd', 'v', 'i', '.', 'b', 9, 0,
  /* 843 */ 'b', 'm', 'z', 'i', '.', 'b', 9, 0,
  /* 851 */ 'b', 'm', 'n', 'z', 'i', '.', 'b', 9, 0,
  /* 860 */ 'f', 'i', 'l', 'l', '.', 'b', 9, 0,
  /* 868 */ 's', 'l', 'l', '.', 'b', 9, 0,
  /* 875 */ 's', 'r', 'l', '.', 'b', 9, 0,
  /* 882 */ 'b', 'i', 'n', 's', 'l', '.', 'b', 9, 0,
  /* 891 */ 'i', 'l', 'v', 'l', '.', 'b', 9, 0,
  /* 899 */ 'c', 'e', 'q', '.', 'b', 9, 0,
  /* 906 */ 's', 'r', 'a', 'r', '.', 'b', 9, 0,
  /* 914 */ 'b', 'c', 'l', 'r', '.', 'b', 9, 0,
  /* 922 */ 's', 'r', 'l', 'r', '.', 'b', 9, 0,
  /* 930 */ 'b', 'i', 'n', 's', 'r', '.', 'b', 9, 0,
  /* 939 */ 'i', 'l', 'v', 'r', '.', 'b', 9, 0,
  /* 947 */ 'a', 's', 'u', 'b', '_', 's', '.', 'b', 9, 0,
  /* 957 */ 'm', 'o', 'd', '_', 's', '.', 'b', 9, 0,
  /* 966 */ 'c', 'l', 'e', '_', 's', '.', 'b', 9, 0,
  /* 975 */ 'a', 'v', 'e', '_', 's', '.', 'b', 9, 0,
  /* 984 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'b', 9, 0,
  /* 994 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1004 */ 'c', 'l', 't', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1014 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1024 */ 'm', 'i', 'n', '_', 's', '.', 'b', 9, 0,
  /* 1033 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'b', 9, 0,
  /* 1043 */ 's', 'u', 'b', 's', '_', 's', '.', 'b', 9, 0,
  /* 1053 */ 'a', 'd', 'd', 's', '_', 's', '.', 'b', 9, 0,
  /* 1063 */ 's', 'a', 't', '_', 's', '.', 'b', 9, 0,
  /* 1072 */ 'c', 'l', 't', '_', 's', '.', 'b', 9, 0,
  /* 1081 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'b', 9, 0,
  /* 1093 */ 'd', 'i', 'v', '_', 's', '.', 'b', 9, 0,
  /* 1102 */ 'm', 'a', 'x', '_', 's', '.', 'b', 9, 0,
  /* 1111 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'b', 9, 0,
  /* 1121 */ 's', 'p', 'l', 'a', 't', '.', 'b', 9, 0,
  /* 1130 */ 'b', 's', 'e', 't', '.', 'b', 9, 0,
  /* 1138 */ 'p', 'c', 'n', 't', '.', 'b', 9, 0,
  /* 1146 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'b', 9, 0,
  /* 1156 */ 's', 't', '.', 'b', 9, 0,
  /* 1162 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'b', 9, 0,
  /* 1172 */ 'm', 'o', 'd', '_', 'u', '.', 'b', 9, 0,
  /* 1181 */ 'c', 'l', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1190 */ 'a', 'v', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1199 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1209 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1219 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1229 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1239 */ 'm', 'i', 'n', '_', 'u', '.', 'b', 9, 0,
  /* 1248 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'b', 9, 0,
  /* 1258 */ 's', 'u', 'b', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1268 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1278 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1290 */ 's', 'a', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1299 */ 'c', 'l', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1308 */ 'd', 'i', 'v', '_', 'u', '.', 'b', 9, 0,
  /* 1317 */ 'm', 'a', 'x', '_', 'u', '.', 'b', 9, 0,
  /* 1326 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'b', 9, 0,
  /* 1336 */ 'm', 's', 'u', 'b', 'v', '.', 'b', 9, 0,
  /* 1345 */ 'm', 'a', 'd', 'd', 'v', '.', 'b', 9, 0,
  /* 1354 */ 'p', 'c', 'k', 'e', 'v', '.', 'b', 9, 0,
  /* 1363 */ 'i', 'l', 'v', 'e', 'v', '.', 'b', 9, 0,
  /* 1372 */ 'm', 'u', 'l', 'v', '.', 'b', 9, 0,
  /* 1380 */ 'b', 'z', '.', 'b', 9, 0,
  /* 1386 */ 'b', 'n', 'z', '.', 'b', 9, 0,
  /* 1393 */ 's', 'e', 'b', 9, 0,
  /* 1398 */ 'j', 'r', '.', 'h', 'b', 9, 0,
  /* 1405 */ 'j', 'a', 'l', 'r', '.', 'h', 'b', 9, 0,
  /* 1414 */ 'l', 'b', 9, 0,
  /* 1418 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 1427 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1441 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1454 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1466 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1476 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1486 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 1495 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 1504 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 1513 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 1522 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1536 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1549 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1561 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1572 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1584 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1596 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1608 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1619 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1630 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1641 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1655 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1668 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1680 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1689 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1698 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1708 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1718 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1728 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1738 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1750 */ 's', 'b', 9, 0,
  /* 1754 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1762 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1768 */ 'b', 'c', 9, 0,
  /* 1772 */ 'b', 'g', 'e', 'c', 9, 0,
  /* 1778 */ 'b', 'n', 'e', 'c', 9, 0,
  /* 1784 */ 'j', 'i', 'c', 9, 0,
  /* 1789 */ 'b', 'a', 'l', 'c', 9, 0,
  /* 1795 */ 'j', 'i', 'a', 'l', 'c', 9, 0,
  /* 1802 */ 'b', 'g', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1811 */ 'b', 'l', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1820 */ 'b', 'n', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1829 */ 'b', 'e', 'q', 'z', 'a', 'l', 'c', 9, 0,
  /* 1838 */ 'b', 'g', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1847 */ 'b', 'l', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1856 */ 'l', 'd', 'p', 'c', 9, 0,
  /* 1862 */ 'a', 'u', 'i', 'p', 'c', 9, 0,
  /* 1869 */ 'a', 'l', 'u', 'i', 'p', 'c', 9, 0,
  /* 1877 */ 'a', 'd', 'd', 'i', 'u', 'p', 'c', 9, 0,
  /* 1886 */ 'l', 'w', 'u', 'p', 'c', 9, 0,
  /* 1893 */ 'l', 'w', 'p', 'c', 9, 0,
  /* 1899 */ 'b', 'e', 'q', 'c', 9, 0,
  /* 1905 */ 'j', 'r', 'c', 9, 0,
  /* 1910 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 1917 */ 'b', 'l', 't', 'c', 9, 0,
  /* 1923 */ 'b', 'g', 'e', 'u', 'c', 9, 0,
  /* 1930 */ 'b', 'l', 't', 'u', 'c', 9, 0,
  /* 1937 */ 'b', 'n', 'v', 'c', 9, 0,
  /* 1943 */ 'b', 'o', 'v', 'c', 9, 0,
  /* 1949 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 1956 */ 'b', 'g', 'e', 'z', 'c', 9, 0,
  /* 1963 */ 'b', 'l', 'e', 'z', 'c', 9, 0,
  /* 1970 */ 'b', 'n', 'e', 'z', 'c', 9, 0,
  /* 1977 */ 'b', 'e', 'q', 'z', 'c', 9, 0,
  /* 1984 */ 'b', 'g', 't', 'z', 'c', 9, 0,
  /* 1991 */ 'b', 'l', 't', 'z', 'c', 9, 0,
  /* 1998 */ 'f', 'l', 'o', 'g', '2', '.', 'd', 9, 0,
  /* 2007 */ 'f', 'e', 'x', 'p', '2', '.', 'd', 9, 0,
  /* 2016 */ 'a', 'd', 'd', '_', 'a', '.', 'd', 9, 0,
  /* 2025 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'd', 9, 0,
  /* 2035 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'd', 9, 0,
  /* 2045 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'd', 9, 0,
  /* 2055 */ 'm', 'i', 'n', 'a', '.', 'd', 9, 0,
  /* 2063 */ 's', 'r', 'a', '.', 'd', 9, 0,
  /* 2070 */ 'm', 'a', 'x', 'a', '.', 'd', 9, 0,
  /* 2078 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2086 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2095 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2104 */ 'n', 'l', 'o', 'c', '.', 'd', 9, 0,
  /* 2112 */ 'n', 'l', 'z', 'c', '.', 'd', 9, 0,
  /* 2120 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2128 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2137 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2146 */ 's', 'l', 'd', '.', 'd', 9, 0,
  /* 2153 */ 'p', 'c', 'k', 'o', 'd', '.', 'd', 9, 0,
  /* 2162 */ 'i', 'l', 'v', 'o', 'd', '.', 'd', 9, 0,
  /* 2171 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 2180 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2188 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2198 */ 'f', 'c', 'l', 'e', '.', 'd', 9, 0,
  /* 2206 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 2216 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 2225 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2236 */ 'f', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2244 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2253 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2264 */ 'f', 'c', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2273 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2285 */ 'f', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2294 */ 'f', 'c', 'n', 'e', '.', 'd', 9, 0,
  /* 2302 */ 'f', 's', 'n', 'e', '.', 'd', 9, 0,
  /* 2310 */ 'f', 'c', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2319 */ 'f', 's', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2328 */ 'i', 'n', 's', 'v', 'e', '.', 'd', 9, 0,
  /* 2337 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 2344 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 'd', 9, 0,
  /* 2354 */ 'f', 'c', 'a', 'f', '.', 'd', 9, 0,
  /* 2362 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2373 */ 'f', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2381 */ 'm', 's', 'u', 'b', 'f', '.', 'd', 9, 0,
  /* 2390 */ 'm', 'a', 'd', 'd', 'f', '.', 'd', 9, 0,
  /* 2399 */ 'v', 's', 'h', 'f', '.', 'd', 9, 0,
  /* 2407 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 2415 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 2423 */ 'b', 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 2431 */ 's', 'r', 'a', 'i', '.', 'd', 9, 0,
  /* 2439 */ 's', 'l', 'd', 'i', '.', 'd', 9, 0,
  /* 2447 */ 'b', 'n', 'e', 'g', 'i', '.', 'd', 9, 0,
  /* 2456 */ 's', 'l', 'l', 'i', '.', 'd', 9, 0,
  /* 2464 */ 's', 'r', 'l', 'i', '.', 'd', 9, 0,
  /* 2472 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'd', 9, 0,
  /* 2482 */ 'c', 'e', 'q', 'i', '.', 'd', 9, 0,
  /* 2490 */ 's', 'r', 'a', 'r', 'i', '.', 'd', 9, 0,
  /* 2499 */ 'b', 'c', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2508 */ 's', 'r', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2517 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'd', 9, 0,
  /* 2527 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'd', 9, 0,
  /* 2537 */ 'b', 's', 'e', 't', 'i', '.', 'd', 9, 0,
  /* 2546 */ 's', 'u', 'b', 'v', 'i', '.', 'd', 9, 0,
  /* 2555 */ 'a', 'd', 'd', 'v', 'i', '.', 'd', 9, 0,
  /* 2564 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 2575 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 2586 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 2596 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 2607 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 2616 */ 's', 'e', 'l', '.', 'd', 9, 0,
  /* 2623 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 2632 */ 'f', 'i', 'l', 'l', '.', 'd', 9, 0,
  /* 2640 */ 's', 'l', 'l', '.', 'd', 9, 0,
  /* 2647 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'd', 9, 0,
  /* 2657 */ 'f', 'f', 'q', 'l', '.', 'd', 9, 0,
  /* 2665 */ 's', 'r', 'l', '.', 'd', 9, 0,
  /* 2672 */ 'b', 'i', 'n', 's', 'l', '.', 'd', 9, 0,
  /* 2681 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2689 */ 'i', 'l', 'v', 'l', '.', 'd', 9, 0,
  /* 2697 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 2705 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2713 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2723 */ 'f', 'c', 'u', 'n', '.', 'd', 9, 0,
  /* 2731 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2742 */ 'f', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2750 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 2758 */ 'f', 'r', 'c', 'p', '.', 'd', 9, 0,
  /* 2766 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2774 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2784 */ 'f', 'c', 'e', 'q', '.', 'd', 9, 0,
  /* 2792 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2801 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2812 */ 'f', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2820 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2829 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2840 */ 'f', 'c', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2849 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2861 */ 'f', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2870 */ 's', 'r', 'a', 'r', '.', 'd', 9, 0,
  /* 2878 */ 'b', 'c', 'l', 'r', '.', 'd', 9, 0,
  /* 2886 */ 's', 'r', 'l', 'r', '.', 'd', 9, 0,
  /* 2894 */ 'f', 'c', 'o', 'r', '.', 'd', 9, 0,
  /* 2902 */ 'f', 's', 'o', 'r', '.', 'd', 9, 0,
  /* 2910 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'd', 9, 0,
  /* 2920 */ 'f', 'f', 'q', 'r', '.', 'd', 9, 0,
  /* 2928 */ 'b', 'i', 'n', 's', 'r', '.', 'd', 9, 0,
  /* 2937 */ 'i', 'l', 'v', 'r', '.', 'd', 9, 0,
  /* 2945 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 2954 */ 'a', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 2964 */ 'h', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 2974 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 2985 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'd', 9, 0,
  /* 2997 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3007 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3018 */ 'm', 'o', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3027 */ 'c', 'l', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3036 */ 'a', 'v', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3045 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3055 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3065 */ 'c', 'l', 't', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3075 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3085 */ 'm', 'i', 'n', '_', 's', '.', 'd', 9, 0,
  /* 3094 */ 'd', 'o', 't', 'p', '_', 's', '.', 'd', 9, 0,
  /* 3104 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'd', 9, 0,
  /* 3114 */ 's', 'u', 'b', 's', '_', 's', '.', 'd', 9, 0,
  /* 3124 */ 'a', 'd', 'd', 's', '_', 's', '.', 'd', 9, 0,
  /* 3134 */ 's', 'a', 't', '_', 's', '.', 'd', 9, 0,
  /* 3143 */ 'c', 'l', 't', '_', 's', '.', 'd', 9, 0,
  /* 3152 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3163 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3174 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'd', 9, 0,
  /* 3186 */ 'd', 'i', 'v', '_', 's', '.', 'd', 9, 0,
  /* 3195 */ 'm', 'a', 'x', '_', 's', '.', 'd', 9, 0,
  /* 3204 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'd', 9, 0,
  /* 3214 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 3221 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 3231 */ 's', 'p', 'l', 'a', 't', '.', 'd', 9, 0,
  /* 3240 */ 'b', 's', 'e', 't', '.', 'd', 9, 0,
  /* 3248 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 3257 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3265 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3275 */ 'f', 'c', 'l', 't', '.', 'd', 9, 0,
  /* 3283 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 3292 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3303 */ 'f', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3311 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3320 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3331 */ 'f', 'c', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3340 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3352 */ 'f', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3361 */ 'p', 'c', 'n', 't', '.', 'd', 9, 0,
  /* 3369 */ 'f', 'r', 'i', 'n', 't', '.', 'd', 9, 0,
  /* 3378 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'd', 9, 0,
  /* 3388 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3397 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3407 */ 's', 't', '.', 'd', 9, 0,
  /* 3413 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 3421 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3431 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3441 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3452 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'd', 9, 0,
  /* 3464 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3474 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3485 */ 'm', 'o', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3494 */ 'c', 'l', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3503 */ 'a', 'v', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3512 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3522 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3532 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3542 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3552 */ 'm', 'i', 'n', '_', 'u', '.', 'd', 9, 0,
  /* 3561 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'd', 9, 0,
  /* 3571 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'd', 9, 0,
  /* 3581 */ 's', 'u', 'b', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3591 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3601 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3613 */ 's', 'a', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3622 */ 'c', 'l', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3631 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3642 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3653 */ 'd', 'i', 'v', '_', 'u', '.', 'd', 9, 0,
  /* 3662 */ 'm', 'a', 'x', '_', 'u', '.', 'd', 9, 0,
  /* 3671 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'd', 9, 0,
  /* 3681 */ 'm', 's', 'u', 'b', 'v', '.', 'd', 9, 0,
  /* 3690 */ 'm', 'a', 'd', 'd', 'v', '.', 'd', 9, 0,
  /* 3699 */ 'p', 'c', 'k', 'e', 'v', '.', 'd', 9, 0,
  /* 3708 */ 'i', 'l', 'v', 'e', 'v', '.', 'd', 9, 0,
  /* 3717 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 3725 */ 'm', 'u', 'l', 'v', '.', 'd', 9, 0,
  /* 3733 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3740 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 3751 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 3762 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 3772 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 3783 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 3792 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 3800 */ 'b', 'z', '.', 'd', 9, 0,
  /* 3806 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 'd', 9, 0,
  /* 3816 */ 'b', 'n', 'z', '.', 'd', 9, 0,
  /* 3823 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 'd', 9, 0,
  /* 3833 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 3841 */ 's', 'c', 'd', 9, 0,
  /* 3846 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 3852 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 3858 */ 'd', 's', 'h', 'd', 9, 0,
  /* 3864 */ 'l', 'l', 'd', 9, 0,
  /* 3869 */ 'a', 'n', 'd', 9, 0,
  /* 3874 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 3883 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 3891 */ 'd', 'm', 'o', 'd', 9, 0,
  /* 3897 */ 's', 'd', 9, 0,
  /* 3901 */ 't', 'g', 'e', 9, 0,
  /* 3906 */ 'c', 'a', 'c', 'h', 'e', 9, 0,
  /* 3913 */ 'b', 'n', 'e', 9, 0,
  /* 3918 */ 's', 'n', 'e', 9, 0,
  /* 3923 */ 't', 'n', 'e', 9, 0,
  /* 3928 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 3934 */ 'b', 'c', '1', 'f', 9, 0,
  /* 3940 */ 'p', 'r', 'e', 'f', 9, 0,
  /* 3946 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 3952 */ 'n', 'e', 'g', 9, 0,
  /* 3957 */ 'a', 'd', 'd', '_', 'a', '.', 'h', 9, 0,
  /* 3966 */ 'm', 'i', 'n', '_', 'a', '.', 'h', 9, 0,
  /* 3975 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'h', 9, 0,
  /* 3985 */ 'm', 'a', 'x', '_', 'a', '.', 'h', 9, 0,
  /* 3994 */ 's', 'r', 'a', '.', 'h', 9, 0,
  /* 4001 */ 'n', 'l', 'o', 'c', '.', 'h', 9, 0,
  /* 4009 */ 'n', 'l', 'z', 'c', '.', 'h', 9, 0,
  /* 4017 */ 's', 'l', 'd', '.', 'h', 9, 0,
  /* 4024 */ 'p', 'c', 'k', 'o', 'd', '.', 'h', 9, 0,
  /* 4033 */ 'i', 'l', 'v', 'o', 'd', '.', 'h', 9, 0,
  /* 4042 */ 'i', 'n', 's', 'v', 'e', '.', 'h', 9, 0,
  /* 4051 */ 'v', 's', 'h', 'f', '.', 'h', 9, 0,
  /* 4059 */ 'b', 'n', 'e', 'g', '.', 'h', 9, 0,
  /* 4067 */ 's', 'r', 'a', 'i', '.', 'h', 9, 0,
  /* 4075 */ 's', 'l', 'd', 'i', '.', 'h', 9, 0,
  /* 4083 */ 'b', 'n', 'e', 'g', 'i', '.', 'h', 9, 0,
  /* 4092 */ 's', 'l', 'l', 'i', '.', 'h', 9, 0,
  /* 4100 */ 's', 'r', 'l', 'i', '.', 'h', 9, 0,
  /* 4108 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'h', 9, 0,
  /* 4118 */ 'c', 'e', 'q', 'i', '.', 'h', 9, 0,
  /* 4126 */ 's', 'r', 'a', 'r', 'i', '.', 'h', 9, 0,
  /* 4135 */ 'b', 'c', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4144 */ 's', 'r', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4153 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'h', 9, 0,
  /* 4163 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'h', 9, 0,
  /* 4173 */ 'b', 's', 'e', 't', 'i', '.', 'h', 9, 0,
  /* 4182 */ 's', 'u', 'b', 'v', 'i', '.', 'h', 9, 0,
  /* 4191 */ 'a', 'd', 'd', 'v', 'i', '.', 'h', 9, 0,
  /* 4200 */ 'f', 'i', 'l', 'l', '.', 'h', 9, 0,
  /* 4208 */ 's', 'l', 'l', '.', 'h', 9, 0,
  /* 4215 */ 's', 'r', 'l', '.', 'h', 9, 0,
  /* 4222 */ 'b', 'i', 'n', 's', 'l', '.', 'h', 9, 0,
  /* 4231 */ 'i', 'l', 'v', 'l', '.', 'h', 9, 0,
  /* 4239 */ 'f', 'e', 'x', 'd', 'o', '.', 'h', 9, 0,
  /* 4248 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'h', 9, 0,
  /* 4258 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'h', 9, 0,
  /* 4268 */ 'm', 'u', 'l', '_', 'q', '.', 'h', 9, 0,
  /* 4277 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4288 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4299 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4309 */ 'c', 'e', 'q', '.', 'h', 9, 0,
  /* 4316 */ 'f', 't', 'q', '.', 'h', 9, 0,
  /* 4323 */ 's', 'r', 'a', 'r', '.', 'h', 9, 0,
  /* 4331 */ 'b', 'c', 'l', 'r', '.', 'h', 9, 0,
  /* 4339 */ 's', 'r', 'l', 'r', '.', 'h', 9, 0,
  /* 4347 */ 'b', 'i', 'n', 's', 'r', '.', 'h', 9, 0,
  /* 4356 */ 'i', 'l', 'v', 'r', '.', 'h', 9, 0,
  /* 4364 */ 'a', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4374 */ 'h', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4384 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4395 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4405 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4416 */ 'm', 'o', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4425 */ 'c', 'l', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4434 */ 'a', 'v', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4443 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4453 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4463 */ 'c', 'l', 't', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4473 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4483 */ 'm', 'i', 'n', '_', 's', '.', 'h', 9, 0,
  /* 4492 */ 'd', 'o', 't', 'p', '_', 's', '.', 'h', 9, 0,
  /* 4502 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4512 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4522 */ 's', 'u', 'b', 's', '_', 's', '.', 'h', 9, 0,
  /* 4532 */ 'a', 'd', 'd', 's', '_', 's', '.', 'h', 9, 0,
  /* 4542 */ 's', 'a', 't', '_', 's', '.', 'h', 9, 0,
  /* 4551 */ 'c', 'l', 't', '_', 's', '.', 'h', 9, 0,
  /* 4560 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'h', 9, 0,
  /* 4572 */ 'd', 'i', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4581 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4592 */ 'm', 'a', 'x', '_', 's', '.', 'h', 9, 0,
  /* 4601 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'h', 9, 0,
  /* 4611 */ 's', 'p', 'l', 'a', 't', '.', 'h', 9, 0,
  /* 4620 */ 'b', 's', 'e', 't', '.', 'h', 9, 0,
  /* 4628 */ 'p', 'c', 'n', 't', '.', 'h', 9, 0,
  /* 4636 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'h', 9, 0,
  /* 4646 */ 's', 't', '.', 'h', 9, 0,
  /* 4652 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4662 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4672 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4683 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4693 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4704 */ 'm', 'o', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4713 */ 'c', 'l', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 4722 */ 'a', 'v', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 4731 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4741 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4751 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4761 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4771 */ 'm', 'i', 'n', '_', 'u', '.', 'h', 9, 0,
  /* 4780 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'h', 9, 0,
  /* 4790 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'h', 9, 0,
  /* 4800 */ 's', 'u', 'b', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4810 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4820 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4832 */ 's', 'a', 't', '_', 'u', '.', 'h', 9, 0,
  /* 4841 */ 'c', 'l', 't', '_', 'u', '.', 'h', 9, 0,
  /* 4850 */ 'd', 'i', 'v', '_', 'u', '.', 'h', 9, 0,
  /* 4859 */ 'm', 'a', 'x', '_', 'u', '.', 'h', 9, 0,
  /* 4868 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'h', 9, 0,
  /* 4878 */ 'm', 's', 'u', 'b', 'v', '.', 'h', 9, 0,
  /* 4887 */ 'm', 'a', 'd', 'd', 'v', '.', 'h', 9, 0,
  /* 4896 */ 'p', 'c', 'k', 'e', 'v', '.', 'h', 9, 0,
  /* 4905 */ 'i', 'l', 'v', 'e', 'v', '.', 'h', 9, 0,
  /* 4914 */ 'm', 'u', 'l', 'v', '.', 'h', 9, 0,
  /* 4922 */ 'b', 'z', '.', 'h', 9, 0,
  /* 4928 */ 'b', 'n', 'z', '.', 'h', 9, 0,
  /* 4935 */ 'd', 's', 'b', 'h', 9, 0,
  /* 4941 */ 'w', 's', 'b', 'h', 9, 0,
  /* 4947 */ 's', 'e', 'h', 9, 0,
  /* 4952 */ 'l', 'h', 9, 0,
  /* 4956 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 4965 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 4979 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 4992 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5009 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 5020 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5030 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5040 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 5049 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 5058 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 5067 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5076 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5087 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 5095 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 5104 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 5113 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 5124 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5135 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5147 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5159 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5171 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5182 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5192 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5203 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5214 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5225 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5236 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5247 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5258 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5270 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 5282 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 5293 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 5302 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 5311 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 5321 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5331 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5341 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5351 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5361 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5376 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5391 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5403 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5416 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5431 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5444 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5458 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5472 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5482 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5493 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5504 */ 's', 'h', 9, 0,
  /* 5508 */ 'd', 'm', 'u', 'h', 9, 0,
  /* 5514 */ 's', 'y', 'n', 'c', 'i', 9, 0,
  /* 5521 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 5528 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 5534 */ 't', 'g', 'e', 'i', 9, 0,
  /* 5540 */ 's', 'n', 'e', 'i', 9, 0,
  /* 5546 */ 't', 'n', 'e', 'i', 9, 0,
  /* 5552 */ 'd', 'a', 'h', 'i', 9, 0,
  /* 5558 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 5564 */ 'm', 't', 'h', 'i', 9, 0,
  /* 5570 */ '.', 'a', 'l', 'i', 'g', 'n', 32, '2', 10, 9, 'l', 'i', 9, 0,
  /* 5584 */ 'd', 'l', 'i', 9, 0,
  /* 5589 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 5595 */ 's', 'e', 'q', 'i', 9, 0,
  /* 5601 */ 't', 'e', 'q', 'i', 9, 0,
  /* 5607 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 5613 */ 'd', 'a', 't', 'i', 9, 0,
  /* 5619 */ 's', 'l', 't', 'i', 9, 0,
  /* 5625 */ 't', 'l', 't', 'i', 9, 0,
  /* 5631 */ 'd', 'a', 'u', 'i', 9, 0,
  /* 5637 */ 'l', 'u', 'i', 9, 0,
  /* 5642 */ 'j', 9, 0,
  /* 5645 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 5652 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 5661 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 5670 */ 'b', 'a', 'l', 9, 0,
  /* 5675 */ 'j', 'a', 'l', 9, 0,
  /* 5680 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 5688 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 5696 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5708 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5720 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5736 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5751 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5767 */ 'l', 'd', 'l', 9, 0,
  /* 5772 */ 's', 'd', 'l', 9, 0,
  /* 5777 */ 'b', 'n', 'e', 'l', 9, 0,
  /* 5783 */ 'b', 'c', '1', 'f', 'l', 9, 0,
  /* 5790 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5804 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5818 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5831 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5846 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 5855 */ 'b', 'g', 'e', 'z', 'a', 'l', 'l', 9, 0,
  /* 5864 */ 'b', 'l', 't', 'z', 'a', 'l', 'l', 9, 0,
  /* 5873 */ 'd', 's', 'l', 'l', 9, 0,
  /* 5879 */ 'b', 'e', 'q', 'l', 9, 0,
  /* 5885 */ 'd', 's', 'r', 'l', 9, 0,
  /* 5891 */ 'b', 'c', '1', 't', 'l', 9, 0,
  /* 5898 */ 'd', 'm', 'u', 'l', 9, 0,
  /* 5904 */ 'l', 'w', 'l', 9, 0,
  /* 5909 */ 's', 'w', 'l', 9, 0,
  /* 5914 */ 'b', 'g', 'e', 'z', 'l', 9, 0,
  /* 5921 */ 'b', 'l', 'e', 'z', 'l', 9, 0,
  /* 5928 */ 'b', 'g', 't', 'z', 'l', 9, 0,
  /* 5935 */ 'b', 'l', 't', 'z', 'l', 9, 0,
  /* 5942 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 5950 */ 'd', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 5958 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 5964 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 5970 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 5976 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 5983 */ 'm', 't', 'l', 'o', 9, 0,
  /* 5989 */ 'd', 'b', 'i', 't', 's', 'w', 'a', 'p', 9, 0,
  /* 5999 */ 's', 'd', 'b', 'b', 'p', 9, 0,
  /* 6006 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 6014 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 6022 */ 'c', 'm', 'p', 9, 0,
  /* 6027 */ 'd', 'p', 'o', 'p', 9, 0,
  /* 6033 */ 'a', 'd', 'd', 'i', 'u', 'r', '1', 's', 'p', 9, 0,
  /* 6044 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6060 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6077 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 6084 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 6091 */ 'j', 'r', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6102 */ 'e', 'x', 't', 'p', 9, 0,
  /* 6108 */ 'l', 'w', 'p', 9, 0,
  /* 6113 */ 's', 'w', 'p', 9, 0,
  /* 6118 */ 'b', 'e', 'q', 9, 0,
  /* 6123 */ 's', 'e', 'q', 9, 0,
  /* 6128 */ 't', 'e', 'q', 9, 0,
  /* 6133 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6145 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6157 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6173 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6188 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6204 */ 'l', 'd', 'r', 9, 0,
  /* 6209 */ 's', 'd', 'r', 9, 0,
  /* 6214 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6228 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6242 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6255 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6270 */ 'j', 'r', 9, 0,
  /* 6274 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 6280 */ 'n', 'o', 'r', 9, 0,
  /* 6285 */ 'x', 'o', 'r', 9, 0,
  /* 6290 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 6297 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 6304 */ 'l', 'w', 'r', 9, 0,
  /* 6309 */ 's', 'w', 'r', 9, 0,
  /* 6314 */ 'm', 'i', 'n', 'a', '.', 's', 9, 0,
  /* 6322 */ 'm', 'a', 'x', 'a', '.', 's', 9, 0,
  /* 6330 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 6339 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 6348 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 6357 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 6366 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6374 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6384 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 6394 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 6403 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 's', 9, 0,
  /* 6414 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6423 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6434 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6446 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 6453 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 's', 9, 0,
  /* 6463 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 's', 9, 0,
  /* 6474 */ 'm', 's', 'u', 'b', 'f', '.', 's', 9, 0,
  /* 6483 */ 'm', 'a', 'd', 'd', 'f', '.', 's', 9, 0,
  /* 6492 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 6500 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 6508 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 6515 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 6526 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 6537 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 6547 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 6558 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 6567 */ 's', 'e', 'l', '.', 's', 9, 0,
  /* 6574 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 6583 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 6590 */ 'm', 'i', 'n', '.', 's', 9, 0,
  /* 6597 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 6605 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 's', 9, 0,
  /* 6615 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 's', 9, 0,
  /* 6626 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 6634 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 6642 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 's', 9, 0,
  /* 6652 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 6661 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 6672 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6681 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6692 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6704 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 6711 */ 'c', 'l', 'a', 's', 's', '.', 's', 9, 0,
  /* 6720 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 6729 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 6737 */ 'c', 'm', 'p', '.', 'l', 't', '.', 's', 9, 0,
  /* 6747 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 6756 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 's', 9, 0,
  /* 6767 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6776 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6787 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6799 */ 'r', 'i', 'n', 't', '.', 's', 9, 0,
  /* 6807 */ 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 6815 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 6823 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 6830 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 6837 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 6848 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 6859 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 6869 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 6880 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 6889 */ 'm', 'a', 'x', '.', 's', 9, 0,
  /* 6896 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 's', 9, 0,
  /* 6906 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 's', 9, 0,
  /* 6916 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 6924 */ 'j', 'a', 'l', 's', 9, 0,
  /* 6930 */ 'b', 'g', 'e', 'z', 'a', 'l', 's', 9, 0,
  /* 6939 */ 'b', 'l', 't', 'z', 'a', 'l', 's', 9, 0,
  /* 6948 */ 'j', 'a', 'l', 'r', 's', 9, 0,
  /* 6955 */ 'l', 'w', 'x', 's', 9, 0,
  /* 6961 */ 'b', 'c', '1', 't', 9, 0,
  /* 6967 */ 'w', 'a', 'i', 't', 9, 0,
  /* 6973 */ 's', 'l', 't', 9, 0,
  /* 6978 */ 't', 'l', 't', 9, 0,
  /* 6983 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 6990 */ 'n', 'o', 't', 9, 0,
  /* 6995 */ 'm', 'o', 'v', 't', 9, 0,
  /* 7001 */ 'l', 'b', 'u', 9, 0,
  /* 7006 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 7013 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 7020 */ 'b', 'a', 'd', 'd', 'u', 9, 0,
  /* 7027 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 7034 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 7041 */ 'd', 'm', 'o', 'd', 'u', 9, 0,
  /* 7048 */ 't', 'g', 'e', 'u', 9, 0,
  /* 7054 */ 'l', 'h', 'u', 9, 0,
  /* 7059 */ 'd', 'm', 'u', 'h', 'u', 9, 0,
  /* 7066 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 7074 */ 't', 'g', 'e', 'i', 'u', 9, 0,
  /* 7081 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 7088 */ 't', 'l', 't', 'i', 'u', 9, 0,
  /* 7095 */ 'v', '3', 'm', 'u', 'l', 'u', 9, 0,
  /* 7103 */ 'd', 'm', 'u', 'l', 'u', 9, 0,
  /* 7110 */ 'v', 'm', 'u', 'l', 'u', 9, 0,
  /* 7117 */ 's', 'l', 't', 'u', 9, 0,
  /* 7123 */ 't', 'l', 't', 'u', 9, 0,
  /* 7129 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 7137 */ 'd', 'd', 'i', 'v', 'u', 9, 0,
  /* 7144 */ 'l', 'w', 'u', 9, 0,
  /* 7149 */ 'a', 'n', 'd', '.', 'v', 9, 0,
  /* 7156 */ 'm', 'o', 'v', 'e', '.', 'v', 9, 0,
  /* 7164 */ 'b', 's', 'e', 'l', '.', 'v', 9, 0,
  /* 7172 */ 'n', 'o', 'r', '.', 'v', 9, 0,
  /* 7179 */ 'x', 'o', 'r', '.', 'v', 9, 0,
  /* 7186 */ 'b', 'z', '.', 'v', 9, 0,
  /* 7192 */ 'b', 'm', 'z', '.', 'v', 9, 0,
  /* 7199 */ 'b', 'n', 'z', '.', 'v', 9, 0,
  /* 7206 */ 'b', 'm', 'n', 'z', '.', 'v', 9, 0,
  /* 7214 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 7221 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 7229 */ 'd', 'd', 'i', 'v', 9, 0,
  /* 7235 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 7242 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 7249 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 7257 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 7266 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 7273 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 7281 */ 'i', 'n', 's', 'v', 9, 0,
  /* 7287 */ 'f', 'l', 'o', 'g', '2', '.', 'w', 9, 0,
  /* 7296 */ 'f', 'e', 'x', 'p', '2', '.', 'w', 9, 0,
  /* 7305 */ 'a', 'd', 'd', '_', 'a', '.', 'w', 9, 0,
  /* 7314 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'w', 9, 0,
  /* 7324 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'w', 9, 0,
  /* 7334 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'w', 9, 0,
  /* 7344 */ 's', 'r', 'a', '.', 'w', 9, 0,
  /* 7351 */ 'f', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7359 */ 'f', 'm', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7368 */ 'n', 'l', 'o', 'c', '.', 'w', 9, 0,
  /* 7376 */ 'n', 'l', 'z', 'c', '.', 'w', 9, 0,
  /* 7384 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 7393 */ 'f', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7401 */ 'f', 'm', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7410 */ 's', 'l', 'd', '.', 'w', 9, 0,
  /* 7417 */ 'p', 'c', 'k', 'o', 'd', '.', 'w', 9, 0,
  /* 7426 */ 'i', 'l', 'v', 'o', 'd', '.', 'w', 9, 0,
  /* 7435 */ 'f', 'c', 'l', 'e', '.', 'w', 9, 0,
  /* 7443 */ 'f', 's', 'l', 'e', '.', 'w', 9, 0,
  /* 7451 */ 'f', 'c', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7460 */ 'f', 's', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7469 */ 'f', 'c', 'n', 'e', '.', 'w', 9, 0,
  /* 7477 */ 'f', 's', 'n', 'e', '.', 'w', 9, 0,
  /* 7485 */ 'f', 'c', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7494 */ 'f', 's', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7503 */ 'i', 'n', 's', 'v', 'e', '.', 'w', 9, 0,
  /* 7512 */ 'f', 'c', 'a', 'f', '.', 'w', 9, 0,
  /* 7520 */ 'f', 's', 'a', 'f', '.', 'w', 9, 0,
  /* 7528 */ 'v', 's', 'h', 'f', '.', 'w', 9, 0,
  /* 7536 */ 'b', 'n', 'e', 'g', '.', 'w', 9, 0,
  /* 7544 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7560 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7573 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7591 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7607 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 7616 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 7625 */ 's', 'r', 'a', 'i', '.', 'w', 9, 0,
  /* 7633 */ 's', 'l', 'd', 'i', '.', 'w', 9, 0,
  /* 7641 */ 'b', 'n', 'e', 'g', 'i', '.', 'w', 9, 0,
  /* 7650 */ 's', 'l', 'l', 'i', '.', 'w', 9, 0,
  /* 7658 */ 's', 'r', 'l', 'i', '.', 'w', 9, 0,
  /* 7666 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'w', 9, 0,
  /* 7676 */ 'c', 'e', 'q', 'i', '.', 'w', 9, 0,
  /* 7684 */ 's', 'r', 'a', 'r', 'i', '.', 'w', 9, 0,
  /* 7693 */ 'b', 'c', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 7702 */ 's', 'r', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 7711 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'w', 9, 0,
  /* 7721 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'w', 9, 0,
  /* 7731 */ 'b', 's', 'e', 't', 'i', '.', 'w', 9, 0,
  /* 7740 */ 's', 'u', 'b', 'v', 'i', '.', 'w', 9, 0,
  /* 7749 */ 'a', 'd', 'd', 'v', 'i', '.', 'w', 9, 0,
  /* 7758 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 7771 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 7784 */ 'f', 'i', 'l', 'l', '.', 'w', 9, 0,
  /* 7792 */ 's', 'l', 'l', '.', 'w', 9, 0,
  /* 7799 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'w', 9, 0,
  /* 7809 */ 'f', 'f', 'q', 'l', '.', 'w', 9, 0,
  /* 7817 */ 's', 'r', 'l', '.', 'w', 9, 0,
  /* 7824 */ 'b', 'i', 'n', 's', 'l', '.', 'w', 9, 0,
  /* 7833 */ 'f', 'm', 'u', 'l', '.', 'w', 9, 0,
  /* 7841 */ 'i', 'l', 'v', 'l', '.', 'w', 9, 0,
  /* 7849 */ 'f', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 7857 */ 'f', 'c', 'u', 'n', '.', 'w', 9, 0,
  /* 7865 */ 'f', 's', 'u', 'n', '.', 'w', 9, 0,
  /* 7873 */ 'f', 'e', 'x', 'd', 'o', '.', 'w', 9, 0,
  /* 7882 */ 'f', 'r', 'c', 'p', '.', 'w', 9, 0,
  /* 7890 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'w', 9, 0,
  /* 7900 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'w', 9, 0,
  /* 7910 */ 'm', 'u', 'l', '_', 'q', '.', 'w', 9, 0,
  /* 7919 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 7930 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 7941 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 7951 */ 'f', 'c', 'e', 'q', '.', 'w', 9, 0,
  /* 7959 */ 'f', 's', 'e', 'q', '.', 'w', 9, 0,
  /* 7967 */ 'f', 'c', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 7976 */ 'f', 's', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 7985 */ 'f', 't', 'q', '.', 'w', 9, 0,
  /* 7992 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 8002 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8013 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8024 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 8034 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8045 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8056 */ 's', 'r', 'a', 'r', '.', 'w', 9, 0,
  /* 8064 */ 'b', 'c', 'l', 'r', '.', 'w', 9, 0,
  /* 8072 */ 's', 'r', 'l', 'r', '.', 'w', 9, 0,
  /* 8080 */ 'f', 'c', 'o', 'r', '.', 'w', 9, 0,
  /* 8088 */ 'f', 's', 'o', 'r', '.', 'w', 9, 0,
  /* 8096 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'w', 9, 0,
  /* 8106 */ 'f', 'f', 'q', 'r', '.', 'w', 9, 0,
  /* 8114 */ 'b', 'i', 'n', 's', 'r', '.', 'w', 9, 0,
  /* 8123 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 8131 */ 'i', 'l', 'v', 'r', '.', 'w', 9, 0,
  /* 8139 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 8148 */ 'a', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8158 */ 'h', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8168 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8179 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'w', 9, 0,
  /* 8191 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8201 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8212 */ 'm', 'o', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8221 */ 'c', 'l', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8230 */ 'a', 'v', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8239 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8249 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8259 */ 'c', 'l', 't', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8269 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8279 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 8289 */ 'm', 'i', 'n', '_', 's', '.', 'w', 9, 0,
  /* 8298 */ 'd', 'o', 't', 'p', '_', 's', '.', 'w', 9, 0,
  /* 8308 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8318 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8328 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8338 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8348 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'w', 9, 0,
  /* 8358 */ 's', 'u', 'b', 's', '_', 's', '.', 'w', 9, 0,
  /* 8368 */ 'a', 'd', 'd', 's', '_', 's', '.', 'w', 9, 0,
  /* 8378 */ 's', 'a', 't', '_', 's', '.', 'w', 9, 0,
  /* 8387 */ 'c', 'l', 't', '_', 's', '.', 'w', 9, 0,
  /* 8396 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8407 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8418 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'w', 9, 0,
  /* 8430 */ 'd', 'i', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8439 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8450 */ 'm', 'a', 'x', '_', 's', '.', 'w', 9, 0,
  /* 8459 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'w', 9, 0,
  /* 8469 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8480 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8491 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8503 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'w', 9, 0,
  /* 8513 */ 's', 'p', 'l', 'a', 't', '.', 'w', 9, 0,
  /* 8522 */ 'b', 's', 'e', 't', '.', 'w', 9, 0,
  /* 8530 */ 'f', 'c', 'l', 't', '.', 'w', 9, 0,
  /* 8538 */ 'f', 's', 'l', 't', '.', 'w', 9, 0,
  /* 8546 */ 'f', 'c', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 8555 */ 'f', 's', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 8564 */ 'p', 'c', 'n', 't', '.', 'w', 9, 0,
  /* 8572 */ 'f', 'r', 'i', 'n', 't', '.', 'w', 9, 0,
  /* 8581 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'w', 9, 0,
  /* 8591 */ 'f', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 8600 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 8610 */ 's', 't', '.', 'w', 9, 0,
  /* 8616 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8626 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8636 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8647 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'w', 9, 0,
  /* 8659 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8669 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8680 */ 'm', 'o', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8689 */ 'c', 'l', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 8698 */ 'a', 'v', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 8707 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8717 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8727 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8737 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8747 */ 'm', 'i', 'n', '_', 'u', '.', 'w', 9, 0,
  /* 8756 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'w', 9, 0,
  /* 8766 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'w', 9, 0,
  /* 8776 */ 's', 'u', 'b', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8786 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8796 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8808 */ 's', 'a', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8817 */ 'c', 'l', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8826 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8837 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8848 */ 'd', 'i', 'v', '_', 'u', '.', 'w', 9, 0,
  /* 8857 */ 'm', 'a', 'x', '_', 'u', '.', 'w', 9, 0,
  /* 8866 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'w', 9, 0,
  /* 8876 */ 'm', 's', 'u', 'b', 'v', '.', 'w', 9, 0,
  /* 8885 */ 'm', 'a', 'd', 'd', 'v', '.', 'w', 9, 0,
  /* 8894 */ 'p', 'c', 'k', 'e', 'v', '.', 'w', 9, 0,
  /* 8903 */ 'i', 'l', 'v', 'e', 'v', '.', 'w', 9, 0,
  /* 8912 */ 'f', 'd', 'i', 'v', '.', 'w', 9, 0,
  /* 8920 */ 'm', 'u', 'l', 'v', '.', 'w', 9, 0,
  /* 8928 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 8937 */ 'f', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 8945 */ 'b', 'z', '.', 'w', 9, 0,
  /* 8951 */ 'b', 'n', 'z', '.', 'w', 9, 0,
  /* 8958 */ 'l', 'w', 9, 0,
  /* 8962 */ 's', 'w', 9, 0,
  /* 8966 */ 'l', 'h', 'x', 9, 0,
  /* 8971 */ 'j', 'a', 'l', 'x', 9, 0,
  /* 8977 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 8983 */ 'l', 'w', 'x', 9, 0,
  /* 8988 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 8994 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 9000 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 9006 */ 's', 'e', 'l', 'n', 'e', 'z', 9, 0,
  /* 9014 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 9021 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 9027 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 9033 */ 's', 'e', 'l', 'e', 'q', 'z', 9, 0,
  /* 9041 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 9048 */ 'b', 'g', 't', 'z', 9, 0,
  /* 9054 */ 'b', 'l', 't', 'z', 9, 0,
  /* 9060 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 9066 */ 's', 'e', 'b', 9, 32, 0,
  /* 9072 */ 'j', 'r', 'c', 9, 32, 0,
  /* 9078 */ 's', 'e', 'h', 9, 32, 0,
  /* 9084 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9098 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9111 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 9123 */ 'c', 'i', 'n', 's', '3', '2', 32, 0,
  /* 9131 */ 'e', 'x', 't', 's', '3', '2', 32, 0,
  /* 9139 */ 's', 'y', 'n', 'c', 32, 0,
  /* 9145 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 9153 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 9160 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 9167 */ 'c', 'i', 'n', 's', 32, 0,
  /* 9173 */ 'd', 'i', 'n', 's', 32, 0,
  /* 9179 */ 'e', 'x', 't', 's', 32, 0,
  /* 9185 */ 'd', 'e', 'x', 't', 32, 0,
  /* 9191 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 9198 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 9205 */ 'b', 'c', '1', 'n', 'e', 'z', 32, 0,
  /* 9213 */ 'b', 'c', '2', 'n', 'e', 'z', 32, 0,
  /* 9221 */ 'b', 'c', '1', 'e', 'q', 'z', 32, 0,
  /* 9229 */ 'b', 'c', '2', 'e', 'q', 'z', 32, 0,
  /* 9237 */ 'c', '.', 0,
  /* 9240 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 9248 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 9261 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 9268 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 9278 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 9293 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 9302 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 9310 */ 'e', 'h', 'b', 0,
  /* 9314 */ 'p', 'a', 'u', 's', 'e', 0,
  /* 9320 */ 't', 'l', 'b', 'w', 'i', 0,
  /* 9326 */ 'f', 'o', 'o', 0,
  /* 9330 */ 't', 'l', 'b', 'p', 0,
  /* 9335 */ 's', 's', 'n', 'o', 'p', 0,
  /* 9341 */ 't', 'l', 'b', 'r', 0,
  /* 9346 */ 't', 'l', 'b', 'w', 'r', 0,
  /* 9352 */ 'd', 'e', 'r', 'e', 't', 0,
  /* 9358 */ 'w', 'a', 'i', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 14) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, Break16, CONSTPOOL_EN...
    return;
    break;
  case 1:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUR1SP_MM, ADDIUR2_MM...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADDIUS5_MM, CTC1, CTC1_MM, DAHI, DATI, DMTC1, MTC1, MTC1_MM, MTHI_DSP,...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 3:
    // AND16_MM, MTHC1_D32, MTHC1_D64, MTHC1_MM, OR16_MM, XOR16_MM
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 4:
    // BREAK16_MM, SDBBP16_MM
    printUnsignedImm8(MI, 0, O); 
    return;
    break;
  case 5:
    // CACHE, CACHE_MM, CACHE_R6, PREF, PREF_MM, PREF_R6
    printUnsignedImm(MI, 2, O); 
    O << ", "; 
    printMemOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64, FCMP_S32, FCMP_S32_MM
    printFCCOperand(MI, 2, O); 
    break;
  case 7:
    // LWM16_MM, LWM32_MM, SWM16_MM, SWM32_MM
    printRegisterList(MI, 0, O); 
    O << ", "; 
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 8:
    // LWP_MM, SWP_MM
    printRegisterPair(MI, 0, O); 
    O << ", "; 
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 9:
    // SYNCI
    printMemOperand(MI, 0, O); 
    return;
    break;
  case 10:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 1 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 18) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUR1SP_MM, ADDIUR2_MM...
    O << ", "; 
    break;
  case 1:
    // ADDIUS5_MM, DAHI, DATI, MultRxRyRz16, MultuRxRyRz16, SltCCRxRy16, Slti...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADDIUSP_MM, AddiuSpImmX16, BAL, BALC, BC, BPOSGE32, BimmX16, BteqzX16,...
    return;
    break;
  case 3:
    // AND16_MM, OR16_MM, XOR16_MM
    printOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // AddiuRxPcImmX16
    O << ", $pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // AddiuSpImm16, Bimm16
    O << " # 16 bit inst"; 
    return;
    break;
  case 6:
    // Bteqz16, Btnez16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 7:
    // CTC1, CTC1_MM, DMTC1, MTC1, MTC1_MM, MTHC1_D32, MTHC1_D64, MTHC1_MM, M...
    printOperand(MI, 0, O); 
    return;
    break;
  case 8:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // FCMP_S32, FCMP_S32_MM
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INS...
    O << '['; 
    break;
  case 11:
    // Jal16
    O << "\n\tnop"; 
    return;
    break;
  case 12:
    // JalB16
    O << "\t# branch\n\tnop"; 
    return;
    break;
  case 13:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t"; 
    printOperand(MI, 1, O); 
    O << "\n2:"; 
    return;
    break;
  case 14:
    // SC, SCD, SCD_R6, SC_MM, SC_R6
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 15:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 22) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUR1SP_MM, ADDIUR2_MM...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADDIUS5_MM, DAHI, DATI
    return;
    break;
  case 2:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, BINSLI_B, BINSLI_D, BINS...
    printOperand(MI, 2, O); 
    break;
  case 3:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64, LEA_ADDiu_MM
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 4:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W
    printUnsignedImm(MI, 3, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // INSVE_B, INSVE_D, INSVE_H, INSVE_W
    printUnsignedImm(MI, 2, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printUnsignedImm(MI, 4, O); 
    O << ']'; 
    return;
    break;
  case 6:
    // LB, LB64, LBU16_MM, LB_MM, LBu, LBu64, LBu_MM, LD, LDC1, LDC164, LDC1_...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // LUi, LUi64, LUi_MM, LoadAddr32Imm, LoadImm32Reg, RDDSP, REPL_PH, REPL_...
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 8:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 9:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O); 
    break;
  case 10:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t"; 
    printOperand(MI, 0, O); 
    O << ", $t8"; 
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 26) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADDIUPC, ADDIUR1SP_MM, ALUIPC, AUIPC, ...
    return;
    break;
  case 1:
    // ADD, ADDIUR2_MM, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, AD...
    O << ", "; 
    break;
  case 2:
    // AddiuRxRxImm16, LwRxPcTcp16
    O << "\t# 16 bit inst"; 
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_D, COPY_U_H, ...
    O << '['; 
    break;
  case 7:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst"; 
    return;
    break;
  case 8:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 9:
    // GotPrologue16
    O << "\n\taddiu\t"; 
    printOperand(MI, 1, O); 
    O << ", $pc, "; 
    printOperand(MI, 3, O); 
    O << "\n "; 
    return;
    break;
  case 10:
    // LBUX, LDXC1, LDXC164, LHX, LUXC1, LUXC164, LUXC1_MM, LWX, LWXC1, LWXC1...
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 11:
    // LwRxSpImmX16, SwRxSpImmX16
    O << " ( "; 
    printOperand(MI, 1, O); 
    O << " ); "; 
    return;
    break;
  case 12:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  case 13:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 14:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 30) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, AD...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, ANDI_B, BCLRI_B, BCLRI_D, BCLRI_H,...
    printUnsignedImm8(MI, 2, O); 
    break;
  case 2:
    // ANDi, ANDi64, ANDi_MM, APPEND, BALIGN, CINS, CINS32, DEXT, DEXTM, DEXT...
    printUnsignedImm(MI, 2, O); 
    break;
  case 3:
    // BINSLI_B, BINSLI_D, BINSLI_H, BINSLI_W, BINSRI_B, BINSRI_D, BINSRI_H, ...
    printUnsignedImm8(MI, 3, O); 
    break;
  case 4:
    // BINSL_B, BINSL_D, BINSL_H, BINSL_W, BINSR_B, BINSR_D, BINSR_H, BINSR_W...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 5 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 33) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, AD...
    return;
    break;
  case 1:
    // ALIGN, CINS, CINS32, DALIGN, DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, D...
    O << ", "; 
    break;
  case 2:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_D, COPY_U_H, ...
    O << ']'; 
    return;
    break;
  }


  // Fragment 6 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 35) & 1) {
    // DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, EXT, EXT_MM, INS, INS_MM, MADD...
    printOperand(MI, 3, O); 
    return;
  } else {
    // ALIGN, CINS, CINS32, DALIGN, DLSA, DLSA_R6, EXTS, EXTS32, LSA, LSA_R6
    printUnsignedImm(MI, 3, O); 
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 386 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'm', 'p', 'l', '0', 0,
  /* 54 */ 'p', '0', 0,
  /* 57 */ 'w', '0', 0,
  /* 60 */ 'f', '1', '1', 0,
  /* 64 */ 'w', '1', '1', 0,
  /* 68 */ 'f', '2', '1', 0,
  /* 72 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 85 */ 'w', '2', '1', 0,
  /* 89 */ 'f', '3', '1', 0,
  /* 93 */ 'w', '3', '1', 0,
  /* 97 */ 'a', 'c', '1', 0,
  /* 101 */ 'f', 'c', 'c', '1', 0,
  /* 106 */ 'f', '1', 0,
  /* 109 */ 'm', 'p', 'l', '1', 0,
  /* 114 */ 'p', '1', 0,
  /* 117 */ 'w', '1', 0,
  /* 120 */ 'f', '1', '2', 0,
  /* 124 */ 'w', '1', '2', 0,
  /* 128 */ 'f', '2', '2', 0,
  /* 132 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 145 */ 'w', '2', '2', 0,
  /* 149 */ 'a', 'c', '2', 0,
  /* 153 */ 'f', 'c', 'c', '2', 0,
  /* 158 */ 'f', '2', 0,
  /* 161 */ 'm', 'p', 'l', '2', 0,
  /* 166 */ 'p', '2', 0,
  /* 169 */ 'w', '2', 0,
  /* 172 */ 'f', '1', '3', 0,
  /* 176 */ 'w', '1', '3', 0,
  /* 180 */ 'f', '2', '3', 0,
  /* 184 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 197 */ 'w', '2', '3', 0,
  /* 201 */ 'a', 'c', '3', 0,
  /* 205 */ 'f', 'c', 'c', '3', 0,
  /* 210 */ 'f', '3', 0,
  /* 213 */ 'w', '3', 0,
  /* 216 */ 'f', '1', '4', 0,
  /* 220 */ 'w', '1', '4', 0,
  /* 224 */ 'f', '2', '4', 0,
  /* 228 */ 'w', '2', '4', 0,
  /* 232 */ 'f', 'c', 'c', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'w', '4', 0,
  /* 243 */ 'f', '1', '5', 0,
  /* 247 */ 'w', '1', '5', 0,
  /* 251 */ 'f', '2', '5', 0,
  /* 255 */ 'w', '2', '5', 0,
  /* 259 */ 'f', 'c', 'c', '5', 0,
  /* 264 */ 'f', '5', 0,
  /* 267 */ 'w', '5', 0,
  /* 270 */ 'f', '1', '6', 0,
  /* 274 */ 'w', '1', '6', 0,
  /* 278 */ 'f', '2', '6', 0,
  /* 282 */ 'w', '2', '6', 0,
  /* 286 */ 'f', 'c', 'c', '6', 0,
  /* 291 */ 'f', '6', 0,
  /* 294 */ 'w', '6', 0,
  /* 297 */ 'f', '1', '7', 0,
  /* 301 */ 'w', '1', '7', 0,
  /* 305 */ 'f', '2', '7', 0,
  /* 309 */ 'w', '2', '7', 0,
  /* 313 */ 'f', 'c', 'c', '7', 0,
  /* 318 */ 'f', '7', 0,
  /* 321 */ 'w', '7', 0,
  /* 324 */ 'f', '1', '8', 0,
  /* 328 */ 'w', '1', '8', 0,
  /* 332 */ 'f', '2', '8', 0,
  /* 336 */ 'w', '2', '8', 0,
  /* 340 */ 'f', '8', 0,
  /* 343 */ 'w', '8', 0,
  /* 346 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 362 */ 'f', '1', '9', 0,
  /* 366 */ 'w', '1', '9', 0,
  /* 370 */ 'f', '2', '9', 0,
  /* 374 */ 'w', '2', '9', 0,
  /* 378 */ 'f', '9', 0,
  /* 381 */ 'w', '9', 0,
  /* 384 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 391 */ 'r', 'a', 0,
  /* 394 */ 'h', 'w', 'r', '_', 'c', 'c', 0,
  /* 401 */ 'p', 'c', 0,
  /* 404 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 413 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 424 */ 'h', 'i', 0,
  /* 427 */ 'h', 'w', 'r', '_', 'c', 'p', 'u', 'n', 'u', 'm', 0,
  /* 438 */ 'l', 'o', 0,
  /* 441 */ 'z', 'e', 'r', 'o', 0,
  /* 446 */ 'h', 'w', 'r', '_', 's', 'y', 'n', 'c', 'i', '_', 's', 't', 'e', 'p', 0,
  /* 461 */ 'f', 'p', 0,
  /* 464 */ 'g', 'p', 0,
  /* 467 */ 's', 'p', 0,
  /* 470 */ 'h', 'w', 'r', '_', 'c', 'c', 'r', 'e', 's', 0,
  /* 480 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 487 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 497 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    62, 404, 497, 384, 413, 480, 487, 461, 464, 122, 62, 2, 272, 218, 
    245, 174, 299, 401, 391, 467, 441, 218, 245, 272, 299, 37, 97, 149, 
    201, 62, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 
    122, 174, 218, 245, 272, 299, 326, 360, 1, 61, 121, 173, 217, 244, 
    271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 
    30, 90, 1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 
    129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 46, 158, 237, 291, 
    340, 0, 120, 216, 270, 324, 8, 128, 224, 278, 332, 29, 12, 72, 
    132, 184, 46, 106, 158, 210, 237, 264, 291, 318, 340, 378, 0, 60, 
    120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 128, 180, 224, 251, 
    278, 305, 332, 370, 29, 89, 41, 101, 153, 205, 232, 259, 286, 313, 
    2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 1, 61, 121, 173, 
    217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 
    333, 371, 30, 90, 461, 46, 106, 158, 210, 237, 264, 291, 318, 340, 
    378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 128, 
    180, 224, 251, 278, 305, 332, 370, 29, 89, 464, 37, 97, 149, 201, 
    427, 446, 394, 470, 218, 245, 272, 299, 326, 360, 1, 61, 121, 173, 
    217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 
    333, 371, 30, 90, 279, 306, 37, 97, 149, 201, 49, 109, 161, 54, 
    114, 166, 391, 271, 298, 325, 359, 9, 69, 129, 181, 467, 326, 360, 
    1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 57, 117, 169, 213, 
    240, 267, 294, 321, 343, 381, 4, 64, 124, 176, 220, 247, 274, 301, 
    328, 366, 25, 85, 145, 197, 228, 255, 282, 309, 336, 374, 33, 93, 
    441, 218, 245, 272, 299, 37, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 346, 424, 279, 306, 
    438, 271, 298, 325, 359, 9, 69, 129, 181, 326, 360, 1, 61, 121, 
    173, 217, 244, 225, 252, 122, 174, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::BC1F:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1FL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1FL FCC0, brtarget:$offset)
      AsmString = "bc1fl $\x02";
      break;
    }
    return false;
  case Mips::BC1T:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BC1TL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1TL FCC0, brtarget:$offset)
      AsmString = "bc1tl $\x02";
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK uimm10:$imm, 0)
      AsmString = "break $\x01";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR ZERO, GPR32Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 ZERO_64, GPR64Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR_HB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR_HB RA, GPR32Opnd:$rs)
      AsmString = "jalr.hb $\x02";
      break;
    }
    return false;
  case Mips::MOVE16_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO) {
      // (MOVE16_MM ZERO, ZERO)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SDBBP:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_R6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_R6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MM ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::TEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::WAIT_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT_MM 0)
      AsmString = "wait";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void MipsInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx, raw_ostream &OS) {
  llvm_unreachable("Unknown PrintMethod kind");
}

#endif // PRINT_ALIAS_INSTR
