/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Enum Values                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace PPC {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    CFI_INSTRUCTION	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    STACKMAP	= 17,
    PATCHPOINT	= 18,
    LOAD_STACK_GUARD	= 19,
    STATEPOINT	= 20,
    FRAME_ALLOC	= 21,
    ADD4	= 22,
    ADD4TLS	= 23,
    ADD4o	= 24,
    ADD8	= 25,
    ADD8TLS	= 26,
    ADD8TLS_	= 27,
    ADD8o	= 28,
    ADDC	= 29,
    ADDC8	= 30,
    ADDC8o	= 31,
    ADDCo	= 32,
    ADDE	= 33,
    ADDE8	= 34,
    ADDE8o	= 35,
    ADDEo	= 36,
    ADDI	= 37,
    ADDI8	= 38,
    ADDIC	= 39,
    ADDIC8	= 40,
    ADDICo	= 41,
    ADDIS	= 42,
    ADDIS8	= 43,
    ADDISdtprelHA	= 44,
    ADDISdtprelHA32	= 45,
    ADDISgotTprelHA	= 46,
    ADDIStlsgdHA	= 47,
    ADDIStlsldHA	= 48,
    ADDIStocHA	= 49,
    ADDIdtprelL	= 50,
    ADDIdtprelL32	= 51,
    ADDItlsgdL	= 52,
    ADDItlsgdL32	= 53,
    ADDItlsldL	= 54,
    ADDItlsldL32	= 55,
    ADDItocL	= 56,
    ADDME	= 57,
    ADDME8	= 58,
    ADDME8o	= 59,
    ADDMEo	= 60,
    ADDZE	= 61,
    ADDZE8	= 62,
    ADDZE8o	= 63,
    ADDZEo	= 64,
    ADJCALLSTACKDOWN	= 65,
    ADJCALLSTACKUP	= 66,
    AND	= 67,
    AND8	= 68,
    AND8o	= 69,
    ANDC	= 70,
    ANDC8	= 71,
    ANDC8o	= 72,
    ANDCo	= 73,
    ANDISo	= 74,
    ANDISo8	= 75,
    ANDIo	= 76,
    ANDIo8	= 77,
    ANDIo_1_EQ_BIT	= 78,
    ANDIo_1_EQ_BIT8	= 79,
    ANDIo_1_GT_BIT	= 80,
    ANDIo_1_GT_BIT8	= 81,
    ANDo	= 82,
    ATOMIC_CMP_SWAP_I16	= 83,
    ATOMIC_CMP_SWAP_I32	= 84,
    ATOMIC_CMP_SWAP_I64	= 85,
    ATOMIC_CMP_SWAP_I8	= 86,
    ATOMIC_LOAD_ADD_I16	= 87,
    ATOMIC_LOAD_ADD_I32	= 88,
    ATOMIC_LOAD_ADD_I64	= 89,
    ATOMIC_LOAD_ADD_I8	= 90,
    ATOMIC_LOAD_AND_I16	= 91,
    ATOMIC_LOAD_AND_I32	= 92,
    ATOMIC_LOAD_AND_I64	= 93,
    ATOMIC_LOAD_AND_I8	= 94,
    ATOMIC_LOAD_NAND_I16	= 95,
    ATOMIC_LOAD_NAND_I32	= 96,
    ATOMIC_LOAD_NAND_I64	= 97,
    ATOMIC_LOAD_NAND_I8	= 98,
    ATOMIC_LOAD_OR_I16	= 99,
    ATOMIC_LOAD_OR_I32	= 100,
    ATOMIC_LOAD_OR_I64	= 101,
    ATOMIC_LOAD_OR_I8	= 102,
    ATOMIC_LOAD_SUB_I16	= 103,
    ATOMIC_LOAD_SUB_I32	= 104,
    ATOMIC_LOAD_SUB_I64	= 105,
    ATOMIC_LOAD_SUB_I8	= 106,
    ATOMIC_LOAD_XOR_I16	= 107,
    ATOMIC_LOAD_XOR_I32	= 108,
    ATOMIC_LOAD_XOR_I64	= 109,
    ATOMIC_LOAD_XOR_I8	= 110,
    ATOMIC_SWAP_I16	= 111,
    ATOMIC_SWAP_I32	= 112,
    ATOMIC_SWAP_I64	= 113,
    ATOMIC_SWAP_I8	= 114,
    ATTN	= 115,
    B	= 116,
    BA	= 117,
    BC	= 118,
    BCC	= 119,
    BCCA	= 120,
    BCCCTR	= 121,
    BCCCTR8	= 122,
    BCCCTRL	= 123,
    BCCCTRL8	= 124,
    BCCL	= 125,
    BCCLA	= 126,
    BCCLR	= 127,
    BCCLRL	= 128,
    BCCTR	= 129,
    BCCTR8	= 130,
    BCCTR8n	= 131,
    BCCTRL	= 132,
    BCCTRL8	= 133,
    BCCTRL8n	= 134,
    BCCTRLn	= 135,
    BCCTRn	= 136,
    BCL	= 137,
    BCLR	= 138,
    BCLRL	= 139,
    BCLRLn	= 140,
    BCLRn	= 141,
    BCLalways	= 142,
    BCLn	= 143,
    BCTR	= 144,
    BCTR8	= 145,
    BCTRL	= 146,
    BCTRL8	= 147,
    BCTRL8_LDinto_toc	= 148,
    BCn	= 149,
    BDNZ	= 150,
    BDNZ8	= 151,
    BDNZA	= 152,
    BDNZAm	= 153,
    BDNZAp	= 154,
    BDNZL	= 155,
    BDNZLA	= 156,
    BDNZLAm	= 157,
    BDNZLAp	= 158,
    BDNZLR	= 159,
    BDNZLR8	= 160,
    BDNZLRL	= 161,
    BDNZLRLm	= 162,
    BDNZLRLp	= 163,
    BDNZLRm	= 164,
    BDNZLRp	= 165,
    BDNZLm	= 166,
    BDNZLp	= 167,
    BDNZm	= 168,
    BDNZp	= 169,
    BDZ	= 170,
    BDZ8	= 171,
    BDZA	= 172,
    BDZAm	= 173,
    BDZAp	= 174,
    BDZL	= 175,
    BDZLA	= 176,
    BDZLAm	= 177,
    BDZLAp	= 178,
    BDZLR	= 179,
    BDZLR8	= 180,
    BDZLRL	= 181,
    BDZLRLm	= 182,
    BDZLRLp	= 183,
    BDZLRm	= 184,
    BDZLRp	= 185,
    BDZLm	= 186,
    BDZLp	= 187,
    BDZm	= 188,
    BDZp	= 189,
    BL	= 190,
    BL8	= 191,
    BL8_NOP	= 192,
    BL8_NOP_TLS	= 193,
    BL8_TLS	= 194,
    BL8_TLS_	= 195,
    BLA	= 196,
    BLA8	= 197,
    BLA8_NOP	= 198,
    BLR	= 199,
    BLR8	= 200,
    BLRL	= 201,
    BL_TLS	= 202,
    BRINC	= 203,
    CLRLSLDI	= 204,
    CLRLSLDIo	= 205,
    CLRLSLWI	= 206,
    CLRLSLWIo	= 207,
    CLRRDI	= 208,
    CLRRDIo	= 209,
    CLRRWI	= 210,
    CLRRWIo	= 211,
    CMPB	= 212,
    CMPB8	= 213,
    CMPD	= 214,
    CMPDI	= 215,
    CMPLD	= 216,
    CMPLDI	= 217,
    CMPLW	= 218,
    CMPLWI	= 219,
    CMPW	= 220,
    CMPWI	= 221,
    CNTLZD	= 222,
    CNTLZDo	= 223,
    CNTLZW	= 224,
    CNTLZW8	= 225,
    CNTLZW8o	= 226,
    CNTLZWo	= 227,
    CR6SET	= 228,
    CR6UNSET	= 229,
    CRAND	= 230,
    CRANDC	= 231,
    CREQV	= 232,
    CRNAND	= 233,
    CRNOR	= 234,
    CROR	= 235,
    CRORC	= 236,
    CRSET	= 237,
    CRUNSET	= 238,
    CRXOR	= 239,
    DCBA	= 240,
    DCBF	= 241,
    DCBI	= 242,
    DCBST	= 243,
    DCBT	= 244,
    DCBTST	= 245,
    DCBZ	= 246,
    DCBZL	= 247,
    DCCCI	= 248,
    DIVD	= 249,
    DIVDU	= 250,
    DIVDUo	= 251,
    DIVDo	= 252,
    DIVW	= 253,
    DIVWU	= 254,
    DIVWUo	= 255,
    DIVWo	= 256,
    DSS	= 257,
    DSSALL	= 258,
    DST	= 259,
    DST64	= 260,
    DSTST	= 261,
    DSTST64	= 262,
    DSTSTT	= 263,
    DSTSTT64	= 264,
    DSTT	= 265,
    DSTT64	= 266,
    DYNALLOC	= 267,
    DYNALLOC8	= 268,
    EH_SjLj_LongJmp32	= 269,
    EH_SjLj_LongJmp64	= 270,
    EH_SjLj_SetJmp32	= 271,
    EH_SjLj_SetJmp64	= 272,
    EH_SjLj_Setup	= 273,
    EQV	= 274,
    EQV8	= 275,
    EQV8o	= 276,
    EQVo	= 277,
    EVABS	= 278,
    EVADDIW	= 279,
    EVADDSMIAAW	= 280,
    EVADDSSIAAW	= 281,
    EVADDUMIAAW	= 282,
    EVADDUSIAAW	= 283,
    EVADDW	= 284,
    EVAND	= 285,
    EVANDC	= 286,
    EVCMPEQ	= 287,
    EVCMPGTS	= 288,
    EVCMPGTU	= 289,
    EVCMPLTS	= 290,
    EVCMPLTU	= 291,
    EVCNTLSW	= 292,
    EVCNTLZW	= 293,
    EVDIVWS	= 294,
    EVDIVWU	= 295,
    EVEQV	= 296,
    EVEXTSB	= 297,
    EVEXTSH	= 298,
    EVLDD	= 299,
    EVLDDX	= 300,
    EVLDH	= 301,
    EVLDHX	= 302,
    EVLDW	= 303,
    EVLDWX	= 304,
    EVLHHESPLAT	= 305,
    EVLHHESPLATX	= 306,
    EVLHHOSSPLAT	= 307,
    EVLHHOSSPLATX	= 308,
    EVLHHOUSPLAT	= 309,
    EVLHHOUSPLATX	= 310,
    EVLWHE	= 311,
    EVLWHEX	= 312,
    EVLWHOS	= 313,
    EVLWHOSX	= 314,
    EVLWHOU	= 315,
    EVLWHOUX	= 316,
    EVLWHSPLAT	= 317,
    EVLWHSPLATX	= 318,
    EVLWWSPLAT	= 319,
    EVLWWSPLATX	= 320,
    EVMERGEHI	= 321,
    EVMERGEHILO	= 322,
    EVMERGELO	= 323,
    EVMERGELOHI	= 324,
    EVMHEGSMFAA	= 325,
    EVMHEGSMFAN	= 326,
    EVMHEGSMIAA	= 327,
    EVMHEGSMIAN	= 328,
    EVMHEGUMIAA	= 329,
    EVMHEGUMIAN	= 330,
    EVMHESMF	= 331,
    EVMHESMFA	= 332,
    EVMHESMFAAW	= 333,
    EVMHESMFANW	= 334,
    EVMHESMI	= 335,
    EVMHESMIA	= 336,
    EVMHESMIAAW	= 337,
    EVMHESMIANW	= 338,
    EVMHESSF	= 339,
    EVMHESSFA	= 340,
    EVMHESSFAAW	= 341,
    EVMHESSFANW	= 342,
    EVMHESSIAAW	= 343,
    EVMHESSIANW	= 344,
    EVMHEUMI	= 345,
    EVMHEUMIA	= 346,
    EVMHEUMIAAW	= 347,
    EVMHEUMIANW	= 348,
    EVMHEUSIAAW	= 349,
    EVMHEUSIANW	= 350,
    EVMHOGSMFAA	= 351,
    EVMHOGSMFAN	= 352,
    EVMHOGSMIAA	= 353,
    EVMHOGSMIAN	= 354,
    EVMHOGUMIAA	= 355,
    EVMHOGUMIAN	= 356,
    EVMHOSMF	= 357,
    EVMHOSMFA	= 358,
    EVMHOSMFAAW	= 359,
    EVMHOSMFANW	= 360,
    EVMHOSMI	= 361,
    EVMHOSMIA	= 362,
    EVMHOSMIAAW	= 363,
    EVMHOSMIANW	= 364,
    EVMHOSSF	= 365,
    EVMHOSSFA	= 366,
    EVMHOSSFAAW	= 367,
    EVMHOSSFANW	= 368,
    EVMHOSSIAAW	= 369,
    EVMHOSSIANW	= 370,
    EVMHOUMI	= 371,
    EVMHOUMIA	= 372,
    EVMHOUMIAAW	= 373,
    EVMHOUMIANW	= 374,
    EVMHOUSIAAW	= 375,
    EVMHOUSIANW	= 376,
    EVMRA	= 377,
    EVMWHSMF	= 378,
    EVMWHSMFA	= 379,
    EVMWHSMI	= 380,
    EVMWHSMIA	= 381,
    EVMWHSSF	= 382,
    EVMWHSSFA	= 383,
    EVMWHUMI	= 384,
    EVMWHUMIA	= 385,
    EVMWLSMIAAW	= 386,
    EVMWLSMIANW	= 387,
    EVMWLSSIAAW	= 388,
    EVMWLSSIANW	= 389,
    EVMWLUMI	= 390,
    EVMWLUMIA	= 391,
    EVMWLUMIAAW	= 392,
    EVMWLUMIANW	= 393,
    EVMWLUSIAAW	= 394,
    EVMWLUSIANW	= 395,
    EVMWSMF	= 396,
    EVMWSMFA	= 397,
    EVMWSMFAA	= 398,
    EVMWSMFAN	= 399,
    EVMWSMI	= 400,
    EVMWSMIA	= 401,
    EVMWSMIAA	= 402,
    EVMWSMIAN	= 403,
    EVMWSSF	= 404,
    EVMWSSFA	= 405,
    EVMWSSFAA	= 406,
    EVMWSSFAN	= 407,
    EVMWUMI	= 408,
    EVMWUMIA	= 409,
    EVMWUMIAA	= 410,
    EVMWUMIAN	= 411,
    EVNAND	= 412,
    EVNEG	= 413,
    EVNOR	= 414,
    EVOR	= 415,
    EVORC	= 416,
    EVRLW	= 417,
    EVRLWI	= 418,
    EVRNDW	= 419,
    EVSLW	= 420,
    EVSLWI	= 421,
    EVSPLATFI	= 422,
    EVSPLATI	= 423,
    EVSRWIS	= 424,
    EVSRWIU	= 425,
    EVSRWS	= 426,
    EVSRWU	= 427,
    EVSTDD	= 428,
    EVSTDDX	= 429,
    EVSTDH	= 430,
    EVSTDHX	= 431,
    EVSTDW	= 432,
    EVSTDWX	= 433,
    EVSTWHE	= 434,
    EVSTWHEX	= 435,
    EVSTWHO	= 436,
    EVSTWHOX	= 437,
    EVSTWWE	= 438,
    EVSTWWEX	= 439,
    EVSTWWO	= 440,
    EVSTWWOX	= 441,
    EVSUBFSMIAAW	= 442,
    EVSUBFSSIAAW	= 443,
    EVSUBFUMIAAW	= 444,
    EVSUBFUSIAAW	= 445,
    EVSUBFW	= 446,
    EVSUBIFW	= 447,
    EVXOR	= 448,
    EXTLDI	= 449,
    EXTLDIo	= 450,
    EXTLWI	= 451,
    EXTLWIo	= 452,
    EXTRDI	= 453,
    EXTRDIo	= 454,
    EXTRWI	= 455,
    EXTRWIo	= 456,
    EXTSB	= 457,
    EXTSB8	= 458,
    EXTSB8_32_64	= 459,
    EXTSB8o	= 460,
    EXTSBo	= 461,
    EXTSH	= 462,
    EXTSH8	= 463,
    EXTSH8_32_64	= 464,
    EXTSH8o	= 465,
    EXTSHo	= 466,
    EXTSW	= 467,
    EXTSW_32_64	= 468,
    EXTSW_32_64o	= 469,
    EXTSWo	= 470,
    EnforceIEIO	= 471,
    FABSD	= 472,
    FABSDo	= 473,
    FABSS	= 474,
    FABSSo	= 475,
    FADD	= 476,
    FADDS	= 477,
    FADDSo	= 478,
    FADDo	= 479,
    FADDrtz	= 480,
    FCFID	= 481,
    FCFIDS	= 482,
    FCFIDSo	= 483,
    FCFIDU	= 484,
    FCFIDUS	= 485,
    FCFIDUSo	= 486,
    FCFIDUo	= 487,
    FCFIDo	= 488,
    FCMPUD	= 489,
    FCMPUS	= 490,
    FCPSGND	= 491,
    FCPSGNDo	= 492,
    FCPSGNS	= 493,
    FCPSGNSo	= 494,
    FCTID	= 495,
    FCTIDUZ	= 496,
    FCTIDUZo	= 497,
    FCTIDZ	= 498,
    FCTIDZo	= 499,
    FCTIDo	= 500,
    FCTIW	= 501,
    FCTIWUZ	= 502,
    FCTIWUZo	= 503,
    FCTIWZ	= 504,
    FCTIWZo	= 505,
    FCTIWo	= 506,
    FDIV	= 507,
    FDIVS	= 508,
    FDIVSo	= 509,
    FDIVo	= 510,
    FMADD	= 511,
    FMADDS	= 512,
    FMADDSo	= 513,
    FMADDo	= 514,
    FMR	= 515,
    FMRo	= 516,
    FMSUB	= 517,
    FMSUBS	= 518,
    FMSUBSo	= 519,
    FMSUBo	= 520,
    FMUL	= 521,
    FMULS	= 522,
    FMULSo	= 523,
    FMULo	= 524,
    FNABSD	= 525,
    FNABSDo	= 526,
    FNABSS	= 527,
    FNABSSo	= 528,
    FNEGD	= 529,
    FNEGDo	= 530,
    FNEGS	= 531,
    FNEGSo	= 532,
    FNMADD	= 533,
    FNMADDS	= 534,
    FNMADDSo	= 535,
    FNMADDo	= 536,
    FNMSUB	= 537,
    FNMSUBS	= 538,
    FNMSUBSo	= 539,
    FNMSUBo	= 540,
    FRE	= 541,
    FRES	= 542,
    FRESo	= 543,
    FREo	= 544,
    FRIMD	= 545,
    FRIMDo	= 546,
    FRIMS	= 547,
    FRIMSo	= 548,
    FRIND	= 549,
    FRINDo	= 550,
    FRINS	= 551,
    FRINSo	= 552,
    FRIPD	= 553,
    FRIPDo	= 554,
    FRIPS	= 555,
    FRIPSo	= 556,
    FRIZD	= 557,
    FRIZDo	= 558,
    FRIZS	= 559,
    FRIZSo	= 560,
    FRSP	= 561,
    FRSPo	= 562,
    FRSQRTE	= 563,
    FRSQRTES	= 564,
    FRSQRTESo	= 565,
    FRSQRTEo	= 566,
    FSELD	= 567,
    FSELDo	= 568,
    FSELS	= 569,
    FSELSo	= 570,
    FSQRT	= 571,
    FSQRTS	= 572,
    FSQRTSo	= 573,
    FSQRTo	= 574,
    FSUB	= 575,
    FSUBS	= 576,
    FSUBSo	= 577,
    FSUBo	= 578,
    ICBI	= 579,
    ICBT	= 580,
    ICCCI	= 581,
    INSLWI	= 582,
    INSLWIo	= 583,
    INSRDI	= 584,
    INSRDIo	= 585,
    INSRWI	= 586,
    INSRWIo	= 587,
    ISEL	= 588,
    ISEL8	= 589,
    ISYNC	= 590,
    LA	= 591,
    LAx	= 592,
    LBZ	= 593,
    LBZ8	= 594,
    LBZCIX	= 595,
    LBZU	= 596,
    LBZU8	= 597,
    LBZUX	= 598,
    LBZUX8	= 599,
    LBZX	= 600,
    LBZX8	= 601,
    LD	= 602,
    LDARX	= 603,
    LDBRX	= 604,
    LDCIX	= 605,
    LDU	= 606,
    LDUX	= 607,
    LDX	= 608,
    LDgotTprelL	= 609,
    LDgotTprelL32	= 610,
    LDinto_toc	= 611,
    LDtoc	= 612,
    LDtocBA	= 613,
    LDtocCPT	= 614,
    LDtocJTI	= 615,
    LDtocL	= 616,
    LFD	= 617,
    LFDU	= 618,
    LFDUX	= 619,
    LFDX	= 620,
    LFIWAX	= 621,
    LFIWZX	= 622,
    LFS	= 623,
    LFSU	= 624,
    LFSUX	= 625,
    LFSX	= 626,
    LHA	= 627,
    LHA8	= 628,
    LHAU	= 629,
    LHAU8	= 630,
    LHAUX	= 631,
    LHAUX8	= 632,
    LHAX	= 633,
    LHAX8	= 634,
    LHBRX	= 635,
    LHBRX8	= 636,
    LHZ	= 637,
    LHZ8	= 638,
    LHZCIX	= 639,
    LHZU	= 640,
    LHZU8	= 641,
    LHZUX	= 642,
    LHZUX8	= 643,
    LHZX	= 644,
    LHZX8	= 645,
    LI	= 646,
    LI8	= 647,
    LIS	= 648,
    LIS8	= 649,
    LMW	= 650,
    LSWI	= 651,
    LVEBX	= 652,
    LVEHX	= 653,
    LVEWX	= 654,
    LVSL	= 655,
    LVSR	= 656,
    LVX	= 657,
    LVXL	= 658,
    LWA	= 659,
    LWARX	= 660,
    LWAUX	= 661,
    LWAX	= 662,
    LWAX_32	= 663,
    LWA_32	= 664,
    LWBRX	= 665,
    LWBRX8	= 666,
    LWZ	= 667,
    LWZ8	= 668,
    LWZCIX	= 669,
    LWZU	= 670,
    LWZU8	= 671,
    LWZUX	= 672,
    LWZUX8	= 673,
    LWZX	= 674,
    LWZX8	= 675,
    LWZtoc	= 676,
    LXSDX	= 677,
    LXVD2X	= 678,
    LXVDSX	= 679,
    LXVW4X	= 680,
    MBAR	= 681,
    MCRF	= 682,
    MFCR	= 683,
    MFCR8	= 684,
    MFCTR	= 685,
    MFCTR8	= 686,
    MFDCR	= 687,
    MFFS	= 688,
    MFLR	= 689,
    MFLR8	= 690,
    MFMSR	= 691,
    MFOCRF	= 692,
    MFOCRF8	= 693,
    MFSPR	= 694,
    MFSR	= 695,
    MFSRIN	= 696,
    MFTB	= 697,
    MFTB8	= 698,
    MFVRSAVE	= 699,
    MFVRSAVEv	= 700,
    MFVSCR	= 701,
    MSYNC	= 702,
    MTCRF	= 703,
    MTCRF8	= 704,
    MTCTR	= 705,
    MTCTR8	= 706,
    MTCTR8loop	= 707,
    MTCTRloop	= 708,
    MTDCR	= 709,
    MTFSB0	= 710,
    MTFSB1	= 711,
    MTFSF	= 712,
    MTLR	= 713,
    MTLR8	= 714,
    MTMSR	= 715,
    MTMSRD	= 716,
    MTOCRF	= 717,
    MTOCRF8	= 718,
    MTSPR	= 719,
    MTSR	= 720,
    MTSRIN	= 721,
    MTVRSAVE	= 722,
    MTVRSAVEv	= 723,
    MTVSCR	= 724,
    MULHD	= 725,
    MULHDU	= 726,
    MULHDUo	= 727,
    MULHDo	= 728,
    MULHW	= 729,
    MULHWU	= 730,
    MULHWUo	= 731,
    MULHWo	= 732,
    MULLD	= 733,
    MULLDo	= 734,
    MULLI	= 735,
    MULLI8	= 736,
    MULLW	= 737,
    MULLWo	= 738,
    MoveGOTtoLR	= 739,
    MovePCtoLR	= 740,
    MovePCtoLR8	= 741,
    NAND	= 742,
    NAND8	= 743,
    NAND8o	= 744,
    NANDo	= 745,
    NEG	= 746,
    NEG8	= 747,
    NEG8o	= 748,
    NEGo	= 749,
    NOP	= 750,
    NOP_GT_PWR6	= 751,
    NOP_GT_PWR7	= 752,
    NOR	= 753,
    NOR8	= 754,
    NOR8o	= 755,
    NORo	= 756,
    OR	= 757,
    OR8	= 758,
    OR8o	= 759,
    ORC	= 760,
    ORC8	= 761,
    ORC8o	= 762,
    ORCo	= 763,
    ORI	= 764,
    ORI8	= 765,
    ORIS	= 766,
    ORIS8	= 767,
    ORo	= 768,
    POPCNTD	= 769,
    POPCNTW	= 770,
    PPC32GOT	= 771,
    PPC32PICGOT	= 772,
    RESTORE_CR	= 773,
    RESTORE_CRBIT	= 774,
    RESTORE_VRSAVE	= 775,
    RFCI	= 776,
    RFDI	= 777,
    RFI	= 778,
    RFID	= 779,
    RFMCI	= 780,
    RLDCL	= 781,
    RLDCLo	= 782,
    RLDCR	= 783,
    RLDCRo	= 784,
    RLDIC	= 785,
    RLDICL	= 786,
    RLDICL_32_64	= 787,
    RLDICLo	= 788,
    RLDICR	= 789,
    RLDICRo	= 790,
    RLDICo	= 791,
    RLDIMI	= 792,
    RLDIMIo	= 793,
    RLWIMI	= 794,
    RLWIMI8	= 795,
    RLWIMI8o	= 796,
    RLWIMIo	= 797,
    RLWINM	= 798,
    RLWINM8	= 799,
    RLWINM8o	= 800,
    RLWINMo	= 801,
    RLWNM	= 802,
    RLWNM8	= 803,
    RLWNM8o	= 804,
    RLWNMo	= 805,
    ROTRDI	= 806,
    ROTRDIo	= 807,
    ROTRWI	= 808,
    ROTRWIo	= 809,
    ReadTB	= 810,
    SC	= 811,
    SELECT_CC_F4	= 812,
    SELECT_CC_F8	= 813,
    SELECT_CC_I4	= 814,
    SELECT_CC_I8	= 815,
    SELECT_CC_VRRC	= 816,
    SELECT_CC_VSFRC	= 817,
    SELECT_CC_VSRC	= 818,
    SELECT_F4	= 819,
    SELECT_F8	= 820,
    SELECT_I4	= 821,
    SELECT_I8	= 822,
    SELECT_VRRC	= 823,
    SELECT_VSFRC	= 824,
    SELECT_VSRC	= 825,
    SLBIA	= 826,
    SLBIE	= 827,
    SLBMFEE	= 828,
    SLBMTE	= 829,
    SLD	= 830,
    SLDI	= 831,
    SLDIo	= 832,
    SLDo	= 833,
    SLW	= 834,
    SLW8	= 835,
    SLW8o	= 836,
    SLWI	= 837,
    SLWIo	= 838,
    SLWo	= 839,
    SPILL_CR	= 840,
    SPILL_CRBIT	= 841,
    SPILL_VRSAVE	= 842,
    SRAD	= 843,
    SRADI	= 844,
    SRADIo	= 845,
    SRADo	= 846,
    SRAW	= 847,
    SRAWI	= 848,
    SRAWIo	= 849,
    SRAWo	= 850,
    SRD	= 851,
    SRDI	= 852,
    SRDIo	= 853,
    SRDo	= 854,
    SRW	= 855,
    SRW8	= 856,
    SRW8o	= 857,
    SRWI	= 858,
    SRWIo	= 859,
    SRWo	= 860,
    STB	= 861,
    STB8	= 862,
    STBCIX	= 863,
    STBU	= 864,
    STBU8	= 865,
    STBUX	= 866,
    STBUX8	= 867,
    STBX	= 868,
    STBX8	= 869,
    STD	= 870,
    STDBRX	= 871,
    STDCIX	= 872,
    STDCX	= 873,
    STDU	= 874,
    STDUX	= 875,
    STDX	= 876,
    STFD	= 877,
    STFDU	= 878,
    STFDUX	= 879,
    STFDX	= 880,
    STFIWX	= 881,
    STFS	= 882,
    STFSU	= 883,
    STFSUX	= 884,
    STFSX	= 885,
    STH	= 886,
    STH8	= 887,
    STHBRX	= 888,
    STHCIX	= 889,
    STHU	= 890,
    STHU8	= 891,
    STHUX	= 892,
    STHUX8	= 893,
    STHX	= 894,
    STHX8	= 895,
    STMW	= 896,
    STSWI	= 897,
    STVEBX	= 898,
    STVEHX	= 899,
    STVEWX	= 900,
    STVX	= 901,
    STVXL	= 902,
    STW	= 903,
    STW8	= 904,
    STWBRX	= 905,
    STWCIX	= 906,
    STWCX	= 907,
    STWU	= 908,
    STWU8	= 909,
    STWUX	= 910,
    STWUX8	= 911,
    STWX	= 912,
    STWX8	= 913,
    STXSDX	= 914,
    STXVD2X	= 915,
    STXVW4X	= 916,
    SUBF	= 917,
    SUBF8	= 918,
    SUBF8o	= 919,
    SUBFC	= 920,
    SUBFC8	= 921,
    SUBFC8o	= 922,
    SUBFCo	= 923,
    SUBFE	= 924,
    SUBFE8	= 925,
    SUBFE8o	= 926,
    SUBFEo	= 927,
    SUBFIC	= 928,
    SUBFIC8	= 929,
    SUBFME	= 930,
    SUBFME8	= 931,
    SUBFME8o	= 932,
    SUBFMEo	= 933,
    SUBFZE	= 934,
    SUBFZE8	= 935,
    SUBFZE8o	= 936,
    SUBFZEo	= 937,
    SUBFo	= 938,
    SUBI	= 939,
    SUBIC	= 940,
    SUBICo	= 941,
    SUBIS	= 942,
    SYNC	= 943,
    TAILB	= 944,
    TAILB8	= 945,
    TAILBA	= 946,
    TAILBA8	= 947,
    TAILBCTR	= 948,
    TAILBCTR8	= 949,
    TCRETURNai	= 950,
    TCRETURNai8	= 951,
    TCRETURNdi	= 952,
    TCRETURNdi8	= 953,
    TCRETURNri	= 954,
    TCRETURNri8	= 955,
    TD	= 956,
    TDI	= 957,
    TLBIA	= 958,
    TLBIE	= 959,
    TLBIEL	= 960,
    TLBIVAX	= 961,
    TLBLD	= 962,
    TLBLI	= 963,
    TLBRE	= 964,
    TLBRE2	= 965,
    TLBSX	= 966,
    TLBSX2	= 967,
    TLBSX2D	= 968,
    TLBSYNC	= 969,
    TLBWE	= 970,
    TLBWE2	= 971,
    TRAP	= 972,
    TW	= 973,
    TWI	= 974,
    UPDATE_VRSAVE	= 975,
    UpdateGBR	= 976,
    VADDCUW	= 977,
    VADDFP	= 978,
    VADDSBS	= 979,
    VADDSHS	= 980,
    VADDSWS	= 981,
    VADDUBM	= 982,
    VADDUBS	= 983,
    VADDUHM	= 984,
    VADDUHS	= 985,
    VADDUWM	= 986,
    VADDUWS	= 987,
    VAND	= 988,
    VANDC	= 989,
    VAVGSB	= 990,
    VAVGSH	= 991,
    VAVGSW	= 992,
    VAVGUB	= 993,
    VAVGUH	= 994,
    VAVGUW	= 995,
    VCFSX	= 996,
    VCFSX_0	= 997,
    VCFUX	= 998,
    VCFUX_0	= 999,
    VCMPBFP	= 1000,
    VCMPBFPo	= 1001,
    VCMPEQFP	= 1002,
    VCMPEQFPo	= 1003,
    VCMPEQUB	= 1004,
    VCMPEQUBo	= 1005,
    VCMPEQUH	= 1006,
    VCMPEQUHo	= 1007,
    VCMPEQUW	= 1008,
    VCMPEQUWo	= 1009,
    VCMPGEFP	= 1010,
    VCMPGEFPo	= 1011,
    VCMPGTFP	= 1012,
    VCMPGTFPo	= 1013,
    VCMPGTSB	= 1014,
    VCMPGTSBo	= 1015,
    VCMPGTSH	= 1016,
    VCMPGTSHo	= 1017,
    VCMPGTSW	= 1018,
    VCMPGTSWo	= 1019,
    VCMPGTUB	= 1020,
    VCMPGTUBo	= 1021,
    VCMPGTUH	= 1022,
    VCMPGTUHo	= 1023,
    VCMPGTUW	= 1024,
    VCMPGTUWo	= 1025,
    VCTSXS	= 1026,
    VCTSXS_0	= 1027,
    VCTUXS	= 1028,
    VCTUXS_0	= 1029,
    VEXPTEFP	= 1030,
    VLOGEFP	= 1031,
    VMADDFP	= 1032,
    VMAXFP	= 1033,
    VMAXSB	= 1034,
    VMAXSH	= 1035,
    VMAXSW	= 1036,
    VMAXUB	= 1037,
    VMAXUH	= 1038,
    VMAXUW	= 1039,
    VMHADDSHS	= 1040,
    VMHRADDSHS	= 1041,
    VMINFP	= 1042,
    VMINSB	= 1043,
    VMINSH	= 1044,
    VMINSW	= 1045,
    VMINUB	= 1046,
    VMINUH	= 1047,
    VMINUW	= 1048,
    VMLADDUHM	= 1049,
    VMRGHB	= 1050,
    VMRGHH	= 1051,
    VMRGHW	= 1052,
    VMRGLB	= 1053,
    VMRGLH	= 1054,
    VMRGLW	= 1055,
    VMSUMMBM	= 1056,
    VMSUMSHM	= 1057,
    VMSUMSHS	= 1058,
    VMSUMUBM	= 1059,
    VMSUMUHM	= 1060,
    VMSUMUHS	= 1061,
    VMULESB	= 1062,
    VMULESH	= 1063,
    VMULEUB	= 1064,
    VMULEUH	= 1065,
    VMULOSB	= 1066,
    VMULOSH	= 1067,
    VMULOUB	= 1068,
    VMULOUH	= 1069,
    VNMSUBFP	= 1070,
    VNOR	= 1071,
    VOR	= 1072,
    VPERM	= 1073,
    VPKPX	= 1074,
    VPKSHSS	= 1075,
    VPKSHUS	= 1076,
    VPKSWSS	= 1077,
    VPKSWUS	= 1078,
    VPKUHUM	= 1079,
    VPKUHUS	= 1080,
    VPKUWUM	= 1081,
    VPKUWUS	= 1082,
    VREFP	= 1083,
    VRFIM	= 1084,
    VRFIN	= 1085,
    VRFIP	= 1086,
    VRFIZ	= 1087,
    VRLB	= 1088,
    VRLH	= 1089,
    VRLW	= 1090,
    VRSQRTEFP	= 1091,
    VSEL	= 1092,
    VSL	= 1093,
    VSLB	= 1094,
    VSLDOI	= 1095,
    VSLH	= 1096,
    VSLO	= 1097,
    VSLW	= 1098,
    VSPLTB	= 1099,
    VSPLTH	= 1100,
    VSPLTISB	= 1101,
    VSPLTISH	= 1102,
    VSPLTISW	= 1103,
    VSPLTW	= 1104,
    VSR	= 1105,
    VSRAB	= 1106,
    VSRAH	= 1107,
    VSRAW	= 1108,
    VSRB	= 1109,
    VSRH	= 1110,
    VSRO	= 1111,
    VSRW	= 1112,
    VSUBCUW	= 1113,
    VSUBFP	= 1114,
    VSUBSBS	= 1115,
    VSUBSHS	= 1116,
    VSUBSWS	= 1117,
    VSUBUBM	= 1118,
    VSUBUBS	= 1119,
    VSUBUHM	= 1120,
    VSUBUHS	= 1121,
    VSUBUWM	= 1122,
    VSUBUWS	= 1123,
    VSUM2SWS	= 1124,
    VSUM4SBS	= 1125,
    VSUM4SHS	= 1126,
    VSUM4UBS	= 1127,
    VSUMSWS	= 1128,
    VUPKHPX	= 1129,
    VUPKHSB	= 1130,
    VUPKHSH	= 1131,
    VUPKLPX	= 1132,
    VUPKLSB	= 1133,
    VUPKLSH	= 1134,
    VXOR	= 1135,
    V_SET0	= 1136,
    V_SET0B	= 1137,
    V_SET0H	= 1138,
    V_SETALLONES	= 1139,
    V_SETALLONESB	= 1140,
    V_SETALLONESH	= 1141,
    WAIT	= 1142,
    WRTEE	= 1143,
    WRTEEI	= 1144,
    XOR	= 1145,
    XOR8	= 1146,
    XOR8o	= 1147,
    XORI	= 1148,
    XORI8	= 1149,
    XORIS	= 1150,
    XORIS8	= 1151,
    XORo	= 1152,
    XSABSDP	= 1153,
    XSADDDP	= 1154,
    XSCMPODP	= 1155,
    XSCMPUDP	= 1156,
    XSCPSGNDP	= 1157,
    XSCVDPSP	= 1158,
    XSCVDPSXDS	= 1159,
    XSCVDPSXWS	= 1160,
    XSCVDPUXDS	= 1161,
    XSCVDPUXWS	= 1162,
    XSCVSPDP	= 1163,
    XSCVSXDDP	= 1164,
    XSCVUXDDP	= 1165,
    XSDIVDP	= 1166,
    XSMADDADP	= 1167,
    XSMADDMDP	= 1168,
    XSMAXDP	= 1169,
    XSMINDP	= 1170,
    XSMSUBADP	= 1171,
    XSMSUBMDP	= 1172,
    XSMULDP	= 1173,
    XSNABSDP	= 1174,
    XSNEGDP	= 1175,
    XSNMADDADP	= 1176,
    XSNMADDMDP	= 1177,
    XSNMSUBADP	= 1178,
    XSNMSUBMDP	= 1179,
    XSRDPI	= 1180,
    XSRDPIC	= 1181,
    XSRDPIM	= 1182,
    XSRDPIP	= 1183,
    XSRDPIZ	= 1184,
    XSREDP	= 1185,
    XSRSQRTEDP	= 1186,
    XSSQRTDP	= 1187,
    XSSUBDP	= 1188,
    XSTDIVDP	= 1189,
    XSTSQRTDP	= 1190,
    XVABSDP	= 1191,
    XVABSSP	= 1192,
    XVADDDP	= 1193,
    XVADDSP	= 1194,
    XVCMPEQDP	= 1195,
    XVCMPEQDPo	= 1196,
    XVCMPEQSP	= 1197,
    XVCMPEQSPo	= 1198,
    XVCMPGEDP	= 1199,
    XVCMPGEDPo	= 1200,
    XVCMPGESP	= 1201,
    XVCMPGESPo	= 1202,
    XVCMPGTDP	= 1203,
    XVCMPGTDPo	= 1204,
    XVCMPGTSP	= 1205,
    XVCMPGTSPo	= 1206,
    XVCPSGNDP	= 1207,
    XVCPSGNSP	= 1208,
    XVCVDPSP	= 1209,
    XVCVDPSXDS	= 1210,
    XVCVDPSXWS	= 1211,
    XVCVDPUXDS	= 1212,
    XVCVDPUXWS	= 1213,
    XVCVSPDP	= 1214,
    XVCVSPSXDS	= 1215,
    XVCVSPSXWS	= 1216,
    XVCVSPUXDS	= 1217,
    XVCVSPUXWS	= 1218,
    XVCVSXDDP	= 1219,
    XVCVSXDSP	= 1220,
    XVCVSXWDP	= 1221,
    XVCVSXWSP	= 1222,
    XVCVUXDDP	= 1223,
    XVCVUXDSP	= 1224,
    XVCVUXWDP	= 1225,
    XVCVUXWSP	= 1226,
    XVDIVDP	= 1227,
    XVDIVSP	= 1228,
    XVMADDADP	= 1229,
    XVMADDASP	= 1230,
    XVMADDMDP	= 1231,
    XVMADDMSP	= 1232,
    XVMAXDP	= 1233,
    XVMAXSP	= 1234,
    XVMINDP	= 1235,
    XVMINSP	= 1236,
    XVMSUBADP	= 1237,
    XVMSUBASP	= 1238,
    XVMSUBMDP	= 1239,
    XVMSUBMSP	= 1240,
    XVMULDP	= 1241,
    XVMULSP	= 1242,
    XVNABSDP	= 1243,
    XVNABSSP	= 1244,
    XVNEGDP	= 1245,
    XVNEGSP	= 1246,
    XVNMADDADP	= 1247,
    XVNMADDASP	= 1248,
    XVNMADDMDP	= 1249,
    XVNMADDMSP	= 1250,
    XVNMSUBADP	= 1251,
    XVNMSUBASP	= 1252,
    XVNMSUBMDP	= 1253,
    XVNMSUBMSP	= 1254,
    XVRDPI	= 1255,
    XVRDPIC	= 1256,
    XVRDPIM	= 1257,
    XVRDPIP	= 1258,
    XVRDPIZ	= 1259,
    XVREDP	= 1260,
    XVRESP	= 1261,
    XVRSPI	= 1262,
    XVRSPIC	= 1263,
    XVRSPIM	= 1264,
    XVRSPIP	= 1265,
    XVRSPIZ	= 1266,
    XVRSQRTEDP	= 1267,
    XVRSQRTESP	= 1268,
    XVSQRTDP	= 1269,
    XVSQRTSP	= 1270,
    XVSUBDP	= 1271,
    XVSUBSP	= 1272,
    XVTDIVDP	= 1273,
    XVTDIVSP	= 1274,
    XVTSQRTDP	= 1275,
    XVTSQRTSP	= 1276,
    XXLAND	= 1277,
    XXLANDC	= 1278,
    XXLNOR	= 1279,
    XXLOR	= 1280,
    XXLORf	= 1281,
    XXLXOR	= 1282,
    XXMRGHW	= 1283,
    XXMRGLW	= 1284,
    XXPERMDI	= 1285,
    XXSEL	= 1286,
    XXSLDWI	= 1287,
    XXSPLTW	= 1288,
    gBC	= 1289,
    gBCA	= 1290,
    gBCCTR	= 1291,
    gBCCTRL	= 1292,
    gBCL	= 1293,
    gBCLA	= 1294,
    gBCLR	= 1295,
    gBCLRL	= 1296,
    INSTRUCTION_LIST_END = 1297
  };

namespace Sched {
  enum {
    NoInstrModel	= 0,
    IIC_IntSimple	= 1,
    IIC_IntGeneral	= 2,
    IIC_BrB	= 3,
    IIC_VecFP	= 4,
    IIC_IntCompare	= 5,
    IIC_BrCR	= 6,
    IIC_LdStDCBF	= 7,
    IIC_LdStLoad	= 8,
    IIC_IntDivD	= 9,
    IIC_IntDivW	= 10,
    IIC_FPGeneral	= 11,
    IIC_FPAddSub	= 12,
    IIC_FPCompare	= 13,
    IIC_FPDivD	= 14,
    IIC_FPDivS	= 15,
    IIC_FPFused	= 16,
    IIC_FPSqrtD	= 17,
    IIC_FPSqrtS	= 18,
    IIC_LdStICBI	= 19,
    IIC_SprISYNC	= 20,
    IIC_LdStLoadUpd	= 21,
    IIC_LdStLoadUpdX	= 22,
    IIC_LdStLD	= 23,
    IIC_LdStLDARX	= 24,
    IIC_LdStLDU	= 25,
    IIC_LdStLDUX	= 26,
    IIC_LdStLFD	= 27,
    IIC_LdStLFDU	= 28,
    IIC_LdStLFDUX	= 29,
    IIC_LdStLHA	= 30,
    IIC_LdStLHAU	= 31,
    IIC_LdStLHAUX	= 32,
    IIC_LdStLMW	= 33,
    IIC_LdStLWA	= 34,
    IIC_LdStLWARX	= 35,
    IIC_BrMCR	= 36,
    IIC_SprMFCR	= 37,
    IIC_SprMFSPR	= 38,
    IIC_IntMFFS	= 39,
    IIC_SprMFMSR	= 40,
    IIC_SprMFCRF	= 41,
    IIC_SprMFSR	= 42,
    IIC_SprMFTB	= 43,
    IIC_LdStStore	= 44,
    IIC_LdStSync	= 45,
    IIC_BrMCRX	= 46,
    IIC_SprMTSPR	= 47,
    IIC_IntMTFSB0	= 48,
    IIC_SprMTMSR	= 49,
    IIC_SprMTMSRD	= 50,
    IIC_SprMTSR	= 51,
    IIC_IntMulHW	= 52,
    IIC_IntMulHWU	= 53,
    IIC_IntMulHD	= 54,
    IIC_IntMulLI	= 55,
    IIC_SprRFI	= 56,
    IIC_IntRFID	= 57,
    IIC_IntRotateD	= 58,
    IIC_IntRotateDI	= 59,
    IIC_IntRotate	= 60,
    IIC_SprSLBIA	= 61,
    IIC_SprSLBIE	= 62,
    IIC_SprSLBMFEE	= 63,
    IIC_SprSLBMTE	= 64,
    IIC_IntShift	= 65,
    IIC_LdStStoreUpd	= 66,
    IIC_LdStSTD	= 67,
    IIC_LdStSTDCX	= 68,
    IIC_LdStSTDU	= 69,
    IIC_LdStSTDUX	= 70,
    IIC_LdStSTFD	= 71,
    IIC_LdStSTFDU	= 72,
    IIC_LdStSTWCX	= 73,
    IIC_IntTrapD	= 74,
    IIC_SprTLBIA	= 75,
    IIC_SprTLBIE	= 76,
    IIC_SprTLBIEL	= 77,
    IIC_SprTLBSYNC	= 78,
    IIC_IntTrapW	= 79,
    IIC_VecGeneral	= 80,
    IIC_VecFPCompare	= 81,
    IIC_VecPerm	= 82,
    SCHED_LIST_END = 83
  };
} // End Sched namespace
} // End PPC namespace
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Descriptors                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { PPC::CR0, 0 };
static const uint16_t ImplicitList2[] = { PPC::CARRY, 0 };
static const uint16_t ImplicitList3[] = { PPC::CARRY, PPC::CR0, 0 };
static const uint16_t ImplicitList4[] = { PPC::R1, 0 };
static const uint16_t ImplicitList5[] = { PPC::CTR, 0 };
static const uint16_t ImplicitList6[] = { PPC::CTR8, 0 };
static const uint16_t ImplicitList7[] = { PPC::CTR, PPC::RM, 0 };
static const uint16_t ImplicitList8[] = { PPC::LR, 0 };
static const uint16_t ImplicitList9[] = { PPC::CTR8, PPC::RM, 0 };
static const uint16_t ImplicitList10[] = { PPC::LR8, 0 };
static const uint16_t ImplicitList11[] = { PPC::RM, 0 };
static const uint16_t ImplicitList12[] = { PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList13[] = { PPC::LR8, PPC::X2, 0 };
static const uint16_t ImplicitList14[] = { PPC::CTR, PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList15[] = { PPC::CTR8, PPC::LR8, PPC::RM, 0 };
static const uint16_t ImplicitList16[] = { PPC::LR8, PPC::RM, 0 };
static const uint16_t ImplicitList17[] = { PPC::CR1EQ, 0 };
static const uint16_t ImplicitList18[] = { PPC::X1, 0 };
static const uint16_t ImplicitList19[] = { PPC::CR1, 0 };
static const uint16_t ImplicitList20[] = { PPC::X2, 0 };
static const uint16_t ImplicitList21[] = { PPC::CR6, 0 };
static const uint16_t ImplicitList22[] = { PPC::LR, PPC::CTR, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo59[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo60[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo63[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo64[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo65[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo66[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo67[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo68[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo69[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo70[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo71[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo72[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo73[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo74[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo75[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo76[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo77[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo78[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo79[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo80[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo81[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo82[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo83[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo84[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo85[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo86[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo87[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo88[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo89[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo90[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo91[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo92[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo93[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo94[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo95[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo96[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo97[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo98[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo99[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo100[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo101[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo102[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo103[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo104[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo105[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo106[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo107[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo108[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo109[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo110[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo111[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo112[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo113[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo114[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo115[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo116[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo117[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo118[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo119[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo120[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo121[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo122[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo123[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo124[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo125[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo126[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo127[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo128[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo129[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo130[] = { { PPC::CTRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo131[] = { { PPC::CTRRC8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo132[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo133[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo134[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo135[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo136[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo137[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo138[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo139[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo140[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo141[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo142[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo143[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo144[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo145[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo146[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo147[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo148[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo149[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo150[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo151[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo152[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo153[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo154[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo155[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo156[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };

extern const MCInstrDesc PPCInsts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #2 = CFI_INSTRUCTION
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo3,0,nullptr },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo4,0,nullptr },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo6,0,nullptr },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo3,0,nullptr },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #11 = DBG_VALUE
  { 12,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7,0,nullptr },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7,0,nullptr },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #16 = LIFETIME_END
  { 17,	2,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo8,0,nullptr },  // Inst #17 = STACKMAP
  { 18,	6,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo9,0,nullptr },  // Inst #18 = PATCHPOINT
  { 19,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::Rematerializable), 0x0ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #19 = LOAD_STACK_GUARD
  { 20,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #20 = STATEPOINT
  { 21,	2,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #21 = FRAME_ALLOC
  { 22,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #22 = ADD4
  { 23,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #23 = ADD4TLS
  { 24,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #24 = ADD4o
  { 25,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #25 = ADD8
  { 26,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #26 = ADD8TLS
  { 27,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #27 = ADD8TLS_
  { 28,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #28 = ADD8o
  { 29,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #29 = ADDC
  { 30,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #30 = ADDC8
  { 31,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList3, OperandInfo14,0,nullptr },  // Inst #31 = ADDC8o
  { 32,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #32 = ADDCo
  { 33,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #33 = ADDE
  { 34,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #34 = ADDE8
  { 35,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo14,0,nullptr },  // Inst #35 = ADDE8o
  { 36,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #36 = ADDEo
  { 37,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #37 = ADDI
  { 38,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #38 = ADDI8
  { 39,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #39 = ADDIC
  { 40,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo15,0,nullptr },  // Inst #40 = ADDIC8
  { 41,	3,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, ImplicitList3, OperandInfo13,0,nullptr },  // Inst #41 = ADDICo
  { 42,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #42 = ADDIS
  { 43,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #43 = ADDIS8
  { 44,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #44 = ADDISdtprelHA
  { 45,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #45 = ADDISdtprelHA32
  { 46,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #46 = ADDISgotTprelHA
  { 47,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #47 = ADDIStlsgdHA
  { 48,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #48 = ADDIStlsldHA
  { 49,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #49 = ADDIStocHA
  { 50,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #50 = ADDIdtprelL
  { 51,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #51 = ADDIdtprelL32
  { 52,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #52 = ADDItlsgdL
  { 53,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #53 = ADDItlsgdL32
  { 54,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #54 = ADDItlsldL
  { 55,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #55 = ADDItlsldL32
  { 56,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #56 = ADDItocL
  { 57,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo18,0,nullptr },  // Inst #57 = ADDME
  { 58,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo19,0,nullptr },  // Inst #58 = ADDME8
  { 59,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo19,0,nullptr },  // Inst #59 = ADDME8o
  { 60,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo18,0,nullptr },  // Inst #60 = ADDMEo
  { 61,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo18,0,nullptr },  // Inst #61 = ADDZE
  { 62,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo19,0,nullptr },  // Inst #62 = ADDZE8
  { 63,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo19,0,nullptr },  // Inst #63 = ADDZE8o
  { 64,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo18,0,nullptr },  // Inst #64 = ADDZEo
  { 65,	1,	0,	0,	4,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo5,0,nullptr },  // Inst #65 = ADJCALLSTACKDOWN
  { 66,	2,	0,	0,	4,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo7,0,nullptr },  // Inst #66 = ADJCALLSTACKUP
  { 67,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #67 = AND
  { 68,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #68 = AND8
  { 69,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #69 = AND8o
  { 70,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #70 = ANDC
  { 71,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #71 = ANDC8
  { 72,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #72 = ANDC8o
  { 73,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #73 = ANDCo
  { 74,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #74 = ANDISo
  { 75,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo15,0,nullptr },  // Inst #75 = ANDISo8
  { 76,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #76 = ANDIo
  { 77,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo15,0,nullptr },  // Inst #77 = ANDIo8
  { 78,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #78 = ANDIo_1_EQ_BIT
  { 79,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #79 = ANDIo_1_EQ_BIT8
  { 80,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #80 = ANDIo_1_GT_BIT
  { 81,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #81 = ANDIo_1_GT_BIT8
  { 82,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #82 = ANDo
  { 83,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #83 = ATOMIC_CMP_SWAP_I16
  { 84,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #84 = ATOMIC_CMP_SWAP_I32
  { 85,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #85 = ATOMIC_CMP_SWAP_I64
  { 86,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #86 = ATOMIC_CMP_SWAP_I8
  { 87,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #87 = ATOMIC_LOAD_ADD_I16
  { 88,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #88 = ATOMIC_LOAD_ADD_I32
  { 89,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo25,0,nullptr },  // Inst #89 = ATOMIC_LOAD_ADD_I64
  { 90,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #90 = ATOMIC_LOAD_ADD_I8
  { 91,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #91 = ATOMIC_LOAD_AND_I16
  { 92,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #92 = ATOMIC_LOAD_AND_I32
  { 93,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo25,0,nullptr },  // Inst #93 = ATOMIC_LOAD_AND_I64
  { 94,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #94 = ATOMIC_LOAD_AND_I8
  { 95,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #95 = ATOMIC_LOAD_NAND_I16
  { 96,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #96 = ATOMIC_LOAD_NAND_I32
  { 97,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo25,0,nullptr },  // Inst #97 = ATOMIC_LOAD_NAND_I64
  { 98,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #98 = ATOMIC_LOAD_NAND_I8
  { 99,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #99 = ATOMIC_LOAD_OR_I16
  { 100,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #100 = ATOMIC_LOAD_OR_I32
  { 101,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo25,0,nullptr },  // Inst #101 = ATOMIC_LOAD_OR_I64
  { 102,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #102 = ATOMIC_LOAD_OR_I8
  { 103,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #103 = ATOMIC_LOAD_SUB_I16
  { 104,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #104 = ATOMIC_LOAD_SUB_I32
  { 105,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo25,0,nullptr },  // Inst #105 = ATOMIC_LOAD_SUB_I64
  { 106,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #106 = ATOMIC_LOAD_SUB_I8
  { 107,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #107 = ATOMIC_LOAD_XOR_I16
  { 108,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #108 = ATOMIC_LOAD_XOR_I32
  { 109,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo25,0,nullptr },  // Inst #109 = ATOMIC_LOAD_XOR_I64
  { 110,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #110 = ATOMIC_LOAD_XOR_I8
  { 111,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #111 = ATOMIC_SWAP_I16
  { 112,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #112 = ATOMIC_SWAP_I32
  { 113,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo25,0,nullptr },  // Inst #113 = ATOMIC_SWAP_I64
  { 114,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #114 = ATOMIC_SWAP_I8
  { 115,	0,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #115 = ATTN
  { 116,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #116 = B
  { 117,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #117 = BA
  { 118,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo26,0,nullptr },  // Inst #118 = BC
  { 119,	3,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo27,0,nullptr },  // Inst #119 = BCC
  { 120,	3,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo27,0,nullptr },  // Inst #120 = BCCA
  { 121,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, OperandInfo28,0,nullptr },  // Inst #121 = BCCCTR
  { 122,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, OperandInfo28,0,nullptr },  // Inst #122 = BCCCTR8
  { 123,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList8, OperandInfo28,0,nullptr },  // Inst #123 = BCCCTRL
  { 124,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo28,0,nullptr },  // Inst #124 = BCCCTRL8
  { 125,	3,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo27,0,nullptr },  // Inst #125 = BCCL
  { 126,	3,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo27,0,nullptr },  // Inst #126 = BCCLA
  { 127,	2,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, nullptr, OperandInfo28,0,nullptr },  // Inst #127 = BCCLR
  { 128,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, OperandInfo28,0,nullptr },  // Inst #128 = BCCLRL
  { 129,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, OperandInfo29,0,nullptr },  // Inst #129 = BCCTR
  { 130,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, OperandInfo29,0,nullptr },  // Inst #130 = BCCTR8
  { 131,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, OperandInfo29,0,nullptr },  // Inst #131 = BCCTR8n
  { 132,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList8, OperandInfo29,0,nullptr },  // Inst #132 = BCCTRL
  { 133,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo29,0,nullptr },  // Inst #133 = BCCTRL8
  { 134,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo29,0,nullptr },  // Inst #134 = BCCTRL8n
  { 135,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList8, OperandInfo29,0,nullptr },  // Inst #135 = BCCTRLn
  { 136,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, OperandInfo29,0,nullptr },  // Inst #136 = BCCTRn
  { 137,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo26,0,nullptr },  // Inst #137 = BCL
  { 138,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, nullptr, OperandInfo29,0,nullptr },  // Inst #138 = BCLR
  { 139,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, OperandInfo29,0,nullptr },  // Inst #139 = BCLRL
  { 140,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, OperandInfo29,0,nullptr },  // Inst #140 = BCLRLn
  { 141,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #141 = BCLRn
  { 142,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo5,0,nullptr },  // Inst #142 = BCLalways
  { 143,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo26,0,nullptr },  // Inst #143 = BCLn
  { 144,	0,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, nullptr,0,nullptr },  // Inst #144 = BCTR
  { 145,	0,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, nullptr,0,nullptr },  // Inst #145 = BCTR8
  { 146,	0,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList7, ImplicitList8, nullptr,0,nullptr },  // Inst #146 = BCTRL
  { 147,	0,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList9, ImplicitList10, nullptr,0,nullptr },  // Inst #147 = BCTRL8
  { 148,	2,	0,	3,	8,	0|(1<<MCID::Call), 0x38ULL, ImplicitList9, ImplicitList13, OperandInfo30,0,nullptr },  // Inst #148 = BCTRL8_LDinto_toc
  { 149,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo26,0,nullptr },  // Inst #149 = BCn
  { 150,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #150 = BDNZ
  { 151,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, ImplicitList6, OperandInfo5,0,nullptr },  // Inst #151 = BDNZ8
  { 152,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #152 = BDNZA
  { 153,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #153 = BDNZAm
  { 154,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #154 = BDNZAp
  { 155,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #155 = BDNZL
  { 156,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #156 = BDNZLA
  { 157,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #157 = BDNZLAm
  { 158,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #158 = BDNZLAp
  { 159,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #159 = BDNZLR
  { 160,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList6, nullptr,0,nullptr },  // Inst #160 = BDNZLR8
  { 161,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #161 = BDNZLRL
  { 162,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #162 = BDNZLRLm
  { 163,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #163 = BDNZLRLp
  { 164,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #164 = BDNZLRm
  { 165,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #165 = BDNZLRp
  { 166,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #166 = BDNZLm
  { 167,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #167 = BDNZLp
  { 168,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #168 = BDNZm
  { 169,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #169 = BDNZp
  { 170,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #170 = BDZ
  { 171,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, ImplicitList6, OperandInfo5,0,nullptr },  // Inst #171 = BDZ8
  { 172,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #172 = BDZA
  { 173,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #173 = BDZAm
  { 174,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #174 = BDZAp
  { 175,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #175 = BDZL
  { 176,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #176 = BDZLA
  { 177,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #177 = BDZLAm
  { 178,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #178 = BDZLAp
  { 179,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #179 = BDZLR
  { 180,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList6, nullptr,0,nullptr },  // Inst #180 = BDZLR8
  { 181,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #181 = BDZLRL
  { 182,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #182 = BDZLRLm
  { 183,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #183 = BDZLRLp
  { 184,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #184 = BDZLRm
  { 185,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, nullptr,0,nullptr },  // Inst #185 = BDZLRp
  { 186,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #186 = BDZLm
  { 187,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #187 = BDZLp
  { 188,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #188 = BDZm
  { 189,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #189 = BDZp
  { 190,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo5,0,nullptr },  // Inst #190 = BL
  { 191,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #191 = BL8
  { 192,	1,	0,	3,	8,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #192 = BL8_NOP
  { 193,	2,	0,	3,	8,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo7,0,nullptr },  // Inst #193 = BL8_NOP_TLS
  { 194,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo7,0,nullptr },  // Inst #194 = BL8_TLS
  { 195,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo7,0,nullptr },  // Inst #195 = BL8_TLS_
  { 196,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo5,0,nullptr },  // Inst #196 = BLA
  { 197,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #197 = BLA8
  { 198,	1,	0,	3,	8,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #198 = BLA8_NOP
  { 199,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, ImplicitList12, nullptr, nullptr,0,nullptr },  // Inst #199 = BLR
  { 200,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, ImplicitList16, nullptr, nullptr,0,nullptr },  // Inst #200 = BLR8
  { 201,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, nullptr,0,nullptr },  // Inst #201 = BLRL
  { 202,	2,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo7,0,nullptr },  // Inst #202 = BL_TLS
  { 203,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #203 = BRINC
  { 204,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #204 = CLRLSLDI
  { 205,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #205 = CLRLSLDIo
  { 206,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #206 = CLRLSLWI
  { 207,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #207 = CLRLSLWIo
  { 208,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #208 = CLRRDI
  { 209,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #209 = CLRRDIo
  { 210,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #210 = CLRRWI
  { 211,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #211 = CLRRWIo
  { 212,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #212 = CMPB
  { 213,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #213 = CMPB8
  { 214,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #214 = CMPD
  { 215,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #215 = CMPDI
  { 216,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #216 = CMPLD
  { 217,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #217 = CMPLDI
  { 218,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #218 = CMPLW
  { 219,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #219 = CMPLWI
  { 220,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #220 = CMPW
  { 221,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #221 = CMPWI
  { 222,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #222 = CNTLZD
  { 223,	2,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo19,0,nullptr },  // Inst #223 = CNTLZDo
  { 224,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #224 = CNTLZW
  { 225,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #225 = CNTLZW8
  { 226,	2,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo19,0,nullptr },  // Inst #226 = CNTLZW8o
  { 227,	2,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo18,0,nullptr },  // Inst #227 = CNTLZWo
  { 228,	0,	0,	6,	4,	0, 0x0ULL, nullptr, ImplicitList17, nullptr,0,nullptr },  // Inst #228 = CR6SET
  { 229,	0,	0,	6,	4,	0, 0x0ULL, nullptr, ImplicitList17, nullptr,0,nullptr },  // Inst #229 = CR6UNSET
  { 230,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #230 = CRAND
  { 231,	3,	1,	6,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #231 = CRANDC
  { 232,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #232 = CREQV
  { 233,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #233 = CRNAND
  { 234,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #234 = CRNOR
  { 235,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #235 = CROR
  { 236,	3,	1,	6,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #236 = CRORC
  { 237,	1,	1,	6,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #237 = CRSET
  { 238,	1,	1,	6,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #238 = CRUNSET
  { 239,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #239 = CRXOR
  { 240,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #240 = DCBA
  { 241,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #241 = DCBF
  { 242,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #242 = DCBI
  { 243,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #243 = DCBST
  { 244,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x2ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #244 = DCBT
  { 245,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #245 = DCBTST
  { 246,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #246 = DCBZ
  { 247,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #247 = DCBZL
  { 248,	2,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #248 = DCCCI
  { 249,	3,	1,	9,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #249 = DIVD
  { 250,	3,	1,	9,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #250 = DIVDU
  { 251,	3,	1,	9,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #251 = DIVDUo
  { 252,	3,	1,	9,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #252 = DIVDo
  { 253,	3,	1,	10,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #253 = DIVW
  { 254,	3,	1,	10,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #254 = DIVWU
  { 255,	3,	1,	10,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #255 = DIVWUo
  { 256,	3,	1,	10,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #256 = DIVWo
  { 257,	1,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo5,PPC::DeprecatedDST,nullptr },  // Inst #257 = DSS
  { 258,	0,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,PPC::DeprecatedDST,nullptr },  // Inst #258 = DSSALL
  { 259,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,PPC::DeprecatedDST,nullptr },  // Inst #259 = DST
  { 260,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo40,PPC::DeprecatedDST,nullptr },  // Inst #260 = DST64
  { 261,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,PPC::DeprecatedDST,nullptr },  // Inst #261 = DSTST
  { 262,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo40,PPC::DeprecatedDST,nullptr },  // Inst #262 = DSTST64
  { 263,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,PPC::DeprecatedDST,nullptr },  // Inst #263 = DSTSTT
  { 264,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo40,PPC::DeprecatedDST,nullptr },  // Inst #264 = DSTSTT64
  { 265,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,PPC::DeprecatedDST,nullptr },  // Inst #265 = DSTT
  { 266,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo40,PPC::DeprecatedDST,nullptr },  // Inst #266 = DSTT64
  { 267,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo41,0,nullptr },  // Inst #267 = DYNALLOC
  { 268,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList18, ImplicitList18, OperandInfo42,0,nullptr },  // Inst #268 = DYNALLOC8
  { 269,	1,	0,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #269 = EH_SjLj_LongJmp32
  { 270,	1,	0,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #270 = EH_SjLj_LongJmp64
  { 271,	2,	1,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo43,0,nullptr },  // Inst #271 = EH_SjLj_SetJmp32
  { 272,	2,	1,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList6, OperandInfo43,0,nullptr },  // Inst #272 = EH_SjLj_SetJmp64
  { 273,	1,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #273 = EH_SjLj_Setup
  { 274,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #274 = EQV
  { 275,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #275 = EQV8
  { 276,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #276 = EQV8o
  { 277,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #277 = EQVo
  { 278,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #278 = EVABS
  { 279,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #279 = EVADDIW
  { 280,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #280 = EVADDSMIAAW
  { 281,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #281 = EVADDSSIAAW
  { 282,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #282 = EVADDUMIAAW
  { 283,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #283 = EVADDUSIAAW
  { 284,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #284 = EVADDW
  { 285,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #285 = EVAND
  { 286,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #286 = EVANDC
  { 287,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #287 = EVCMPEQ
  { 288,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #288 = EVCMPGTS
  { 289,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #289 = EVCMPGTU
  { 290,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #290 = EVCMPLTS
  { 291,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #291 = EVCMPLTU
  { 292,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #292 = EVCNTLSW
  { 293,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #293 = EVCNTLZW
  { 294,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #294 = EVDIVWS
  { 295,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #295 = EVDIVWU
  { 296,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #296 = EVEQV
  { 297,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #297 = EVEXTSB
  { 298,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #298 = EVEXTSH
  { 299,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #299 = EVLDD
  { 300,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #300 = EVLDDX
  { 301,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #301 = EVLDH
  { 302,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #302 = EVLDHX
  { 303,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #303 = EVLDW
  { 304,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #304 = EVLDWX
  { 305,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #305 = EVLHHESPLAT
  { 306,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #306 = EVLHHESPLATX
  { 307,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #307 = EVLHHOSSPLAT
  { 308,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #308 = EVLHHOSSPLATX
  { 309,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #309 = EVLHHOUSPLAT
  { 310,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #310 = EVLHHOUSPLATX
  { 311,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #311 = EVLWHE
  { 312,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #312 = EVLWHEX
  { 313,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #313 = EVLWHOS
  { 314,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #314 = EVLWHOSX
  { 315,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #315 = EVLWHOU
  { 316,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #316 = EVLWHOUX
  { 317,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #317 = EVLWHSPLAT
  { 318,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #318 = EVLWHSPLATX
  { 319,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #319 = EVLWWSPLAT
  { 320,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #320 = EVLWWSPLATX
  { 321,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #321 = EVMERGEHI
  { 322,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #322 = EVMERGEHILO
  { 323,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #323 = EVMERGELO
  { 324,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #324 = EVMERGELOHI
  { 325,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #325 = EVMHEGSMFAA
  { 326,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #326 = EVMHEGSMFAN
  { 327,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #327 = EVMHEGSMIAA
  { 328,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #328 = EVMHEGSMIAN
  { 329,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #329 = EVMHEGUMIAA
  { 330,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #330 = EVMHEGUMIAN
  { 331,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #331 = EVMHESMF
  { 332,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #332 = EVMHESMFA
  { 333,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #333 = EVMHESMFAAW
  { 334,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #334 = EVMHESMFANW
  { 335,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #335 = EVMHESMI
  { 336,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #336 = EVMHESMIA
  { 337,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #337 = EVMHESMIAAW
  { 338,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #338 = EVMHESMIANW
  { 339,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #339 = EVMHESSF
  { 340,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #340 = EVMHESSFA
  { 341,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #341 = EVMHESSFAAW
  { 342,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #342 = EVMHESSFANW
  { 343,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #343 = EVMHESSIAAW
  { 344,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #344 = EVMHESSIANW
  { 345,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #345 = EVMHEUMI
  { 346,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #346 = EVMHEUMIA
  { 347,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #347 = EVMHEUMIAAW
  { 348,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #348 = EVMHEUMIANW
  { 349,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #349 = EVMHEUSIAAW
  { 350,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #350 = EVMHEUSIANW
  { 351,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #351 = EVMHOGSMFAA
  { 352,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #352 = EVMHOGSMFAN
  { 353,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #353 = EVMHOGSMIAA
  { 354,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #354 = EVMHOGSMIAN
  { 355,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #355 = EVMHOGUMIAA
  { 356,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #356 = EVMHOGUMIAN
  { 357,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #357 = EVMHOSMF
  { 358,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #358 = EVMHOSMFA
  { 359,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #359 = EVMHOSMFAAW
  { 360,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #360 = EVMHOSMFANW
  { 361,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #361 = EVMHOSMI
  { 362,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #362 = EVMHOSMIA
  { 363,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #363 = EVMHOSMIAAW
  { 364,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #364 = EVMHOSMIANW
  { 365,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #365 = EVMHOSSF
  { 366,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #366 = EVMHOSSFA
  { 367,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #367 = EVMHOSSFAAW
  { 368,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #368 = EVMHOSSFANW
  { 369,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #369 = EVMHOSSIAAW
  { 370,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #370 = EVMHOSSIANW
  { 371,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #371 = EVMHOUMI
  { 372,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #372 = EVMHOUMIA
  { 373,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #373 = EVMHOUMIAAW
  { 374,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #374 = EVMHOUMIANW
  { 375,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #375 = EVMHOUSIAAW
  { 376,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #376 = EVMHOUSIANW
  { 377,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #377 = EVMRA
  { 378,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #378 = EVMWHSMF
  { 379,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #379 = EVMWHSMFA
  { 380,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #380 = EVMWHSMI
  { 381,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #381 = EVMWHSMIA
  { 382,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #382 = EVMWHSSF
  { 383,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #383 = EVMWHSSFA
  { 384,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #384 = EVMWHUMI
  { 385,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #385 = EVMWHUMIA
  { 386,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #386 = EVMWLSMIAAW
  { 387,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #387 = EVMWLSMIANW
  { 388,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #388 = EVMWLSSIAAW
  { 389,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #389 = EVMWLSSIANW
  { 390,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #390 = EVMWLUMI
  { 391,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #391 = EVMWLUMIA
  { 392,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #392 = EVMWLUMIAAW
  { 393,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #393 = EVMWLUMIANW
  { 394,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #394 = EVMWLUSIAAW
  { 395,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #395 = EVMWLUSIANW
  { 396,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #396 = EVMWSMF
  { 397,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #397 = EVMWSMFA
  { 398,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #398 = EVMWSMFAA
  { 399,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #399 = EVMWSMFAN
  { 400,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #400 = EVMWSMI
  { 401,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #401 = EVMWSMIA
  { 402,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #402 = EVMWSMIAA
  { 403,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #403 = EVMWSMIAN
  { 404,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #404 = EVMWSSF
  { 405,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #405 = EVMWSSFA
  { 406,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #406 = EVMWSSFAA
  { 407,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #407 = EVMWSSFAN
  { 408,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #408 = EVMWUMI
  { 409,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #409 = EVMWUMIA
  { 410,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #410 = EVMWUMIAA
  { 411,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #411 = EVMWUMIAN
  { 412,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #412 = EVNAND
  { 413,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #413 = EVNEG
  { 414,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #414 = EVNOR
  { 415,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #415 = EVOR
  { 416,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #416 = EVORC
  { 417,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #417 = EVRLW
  { 418,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #418 = EVRLWI
  { 419,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #419 = EVRNDW
  { 420,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #420 = EVSLW
  { 421,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #421 = EVSLWI
  { 422,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #422 = EVSPLATFI
  { 423,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #423 = EVSPLATI
  { 424,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #424 = EVSRWIS
  { 425,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #425 = EVSRWIU
  { 426,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #426 = EVSRWS
  { 427,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #427 = EVSRWU
  { 428,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #428 = EVSTDD
  { 429,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #429 = EVSTDDX
  { 430,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #430 = EVSTDH
  { 431,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #431 = EVSTDHX
  { 432,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #432 = EVSTDW
  { 433,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #433 = EVSTDWX
  { 434,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #434 = EVSTWHE
  { 435,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #435 = EVSTWHEX
  { 436,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #436 = EVSTWHO
  { 437,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #437 = EVSTWHOX
  { 438,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #438 = EVSTWWE
  { 439,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #439 = EVSTWWEX
  { 440,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #440 = EVSTWWO
  { 441,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #441 = EVSTWWOX
  { 442,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #442 = EVSUBFSMIAAW
  { 443,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #443 = EVSUBFSSIAAW
  { 444,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #444 = EVSUBFUMIAAW
  { 445,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #445 = EVSUBFUSIAAW
  { 446,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #446 = EVSUBFW
  { 447,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #447 = EVSUBIFW
  { 448,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #448 = EVXOR
  { 449,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #449 = EXTLDI
  { 450,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #450 = EXTLDIo
  { 451,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #451 = EXTLWI
  { 452,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #452 = EXTLWIo
  { 453,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #453 = EXTRDI
  { 454,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #454 = EXTRDIo
  { 455,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #455 = EXTRWI
  { 456,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #456 = EXTRWIo
  { 457,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #457 = EXTSB
  { 458,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #458 = EXTSB8
  { 459,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #459 = EXTSB8_32_64
  { 460,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo19,0,nullptr },  // Inst #460 = EXTSB8o
  { 461,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo18,0,nullptr },  // Inst #461 = EXTSBo
  { 462,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #462 = EXTSH
  { 463,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #463 = EXTSH8
  { 464,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #464 = EXTSH8_32_64
  { 465,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo19,0,nullptr },  // Inst #465 = EXTSH8o
  { 466,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo18,0,nullptr },  // Inst #466 = EXTSHo
  { 467,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #467 = EXTSW
  { 468,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #468 = EXTSW_32_64
  { 469,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo47,0,nullptr },  // Inst #469 = EXTSW_32_64o
  { 470,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo19,0,nullptr },  // Inst #470 = EXTSWo
  { 471,	0,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #471 = EnforceIEIO
  { 472,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo48,0,nullptr },  // Inst #472 = FABSD
  { 473,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #473 = FABSDo
  { 474,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #474 = FABSS
  { 475,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo49,0,nullptr },  // Inst #475 = FABSSo
  { 476,	3,	1,	12,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo50,0,nullptr },  // Inst #476 = FADD
  { 477,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #477 = FADDS
  { 478,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo51,0,nullptr },  // Inst #478 = FADDSo
  { 479,	3,	1,	12,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo50,0,nullptr },  // Inst #479 = FADDo
  { 480,	3,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList11, nullptr, OperandInfo50,0,nullptr },  // Inst #480 = FADDrtz
  { 481,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #481 = FCFID
  { 482,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo52,0,nullptr },  // Inst #482 = FCFIDS
  { 483,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo52,0,nullptr },  // Inst #483 = FCFIDSo
  { 484,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #484 = FCFIDU
  { 485,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo52,0,nullptr },  // Inst #485 = FCFIDUS
  { 486,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo52,0,nullptr },  // Inst #486 = FCFIDUSo
  { 487,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #487 = FCFIDUo
  { 488,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #488 = FCFIDo
  { 489,	3,	1,	13,	4,	0|(1<<MCID::Compare), 0x18ULL, nullptr, nullptr, OperandInfo53,0,nullptr },  // Inst #489 = FCMPUD
  { 490,	3,	1,	13,	4,	0|(1<<MCID::Compare), 0x18ULL, nullptr, nullptr, OperandInfo54,0,nullptr },  // Inst #490 = FCMPUS
  { 491,	3,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #491 = FCPSGND
  { 492,	3,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo50,0,nullptr },  // Inst #492 = FCPSGNDo
  { 493,	3,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo51,0,nullptr },  // Inst #493 = FCPSGNS
  { 494,	3,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo51,0,nullptr },  // Inst #494 = FCPSGNSo
  { 495,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #495 = FCTID
  { 496,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #496 = FCTIDUZ
  { 497,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #497 = FCTIDUZo
  { 498,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #498 = FCTIDZ
  { 499,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #499 = FCTIDZo
  { 500,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #500 = FCTIDo
  { 501,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #501 = FCTIW
  { 502,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #502 = FCTIWUZ
  { 503,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #503 = FCTIWUZo
  { 504,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #504 = FCTIWZ
  { 505,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #505 = FCTIWZo
  { 506,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #506 = FCTIWo
  { 507,	3,	1,	14,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo50,0,nullptr },  // Inst #507 = FDIV
  { 508,	3,	1,	15,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #508 = FDIVS
  { 509,	3,	1,	15,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo51,0,nullptr },  // Inst #509 = FDIVSo
  { 510,	3,	1,	14,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo50,0,nullptr },  // Inst #510 = FDIVo
  { 511,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo55,0,nullptr },  // Inst #511 = FMADD
  { 512,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo56,0,nullptr },  // Inst #512 = FMADDS
  { 513,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo56,0,nullptr },  // Inst #513 = FMADDSo
  { 514,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo55,0,nullptr },  // Inst #514 = FMADDo
  { 515,	2,	1,	11,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #515 = FMR
  { 516,	2,	1,	11,	4,	0, 0x0ULL, nullptr, ImplicitList19, OperandInfo49,0,nullptr },  // Inst #516 = FMRo
  { 517,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo55,0,nullptr },  // Inst #517 = FMSUB
  { 518,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo56,0,nullptr },  // Inst #518 = FMSUBS
  { 519,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo56,0,nullptr },  // Inst #519 = FMSUBSo
  { 520,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo55,0,nullptr },  // Inst #520 = FMSUBo
  { 521,	3,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo50,0,nullptr },  // Inst #521 = FMUL
  { 522,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #522 = FMULS
  { 523,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo51,0,nullptr },  // Inst #523 = FMULSo
  { 524,	3,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo50,0,nullptr },  // Inst #524 = FMULo
  { 525,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo48,0,nullptr },  // Inst #525 = FNABSD
  { 526,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #526 = FNABSDo
  { 527,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #527 = FNABSS
  { 528,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo49,0,nullptr },  // Inst #528 = FNABSSo
  { 529,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo48,0,nullptr },  // Inst #529 = FNEGD
  { 530,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #530 = FNEGDo
  { 531,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #531 = FNEGS
  { 532,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo49,0,nullptr },  // Inst #532 = FNEGSo
  { 533,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo55,0,nullptr },  // Inst #533 = FNMADD
  { 534,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo56,0,nullptr },  // Inst #534 = FNMADDS
  { 535,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo56,0,nullptr },  // Inst #535 = FNMADDSo
  { 536,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo55,0,nullptr },  // Inst #536 = FNMADDo
  { 537,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo55,0,nullptr },  // Inst #537 = FNMSUB
  { 538,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo56,0,nullptr },  // Inst #538 = FNMSUBS
  { 539,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo56,0,nullptr },  // Inst #539 = FNMSUBSo
  { 540,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo55,0,nullptr },  // Inst #540 = FNMSUBo
  { 541,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo48,0,nullptr },  // Inst #541 = FRE
  { 542,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #542 = FRES
  { 543,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo49,0,nullptr },  // Inst #543 = FRESo
  { 544,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #544 = FREo
  { 545,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #545 = FRIMD
  { 546,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #546 = FRIMDo
  { 547,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo49,0,nullptr },  // Inst #547 = FRIMS
  { 548,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo49,0,nullptr },  // Inst #548 = FRIMSo
  { 549,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #549 = FRIND
  { 550,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #550 = FRINDo
  { 551,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo49,0,nullptr },  // Inst #551 = FRINS
  { 552,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo49,0,nullptr },  // Inst #552 = FRINSo
  { 553,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #553 = FRIPD
  { 554,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #554 = FRIPDo
  { 555,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo49,0,nullptr },  // Inst #555 = FRIPS
  { 556,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo49,0,nullptr },  // Inst #556 = FRIPSo
  { 557,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #557 = FRIZD
  { 558,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #558 = FRIZDo
  { 559,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo49,0,nullptr },  // Inst #559 = FRIZS
  { 560,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo49,0,nullptr },  // Inst #560 = FRIZSo
  { 561,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo52,0,nullptr },  // Inst #561 = FRSP
  { 562,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo52,0,nullptr },  // Inst #562 = FRSPo
  { 563,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo48,0,nullptr },  // Inst #563 = FRSQRTE
  { 564,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #564 = FRSQRTES
  { 565,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo49,0,nullptr },  // Inst #565 = FRSQRTESo
  { 566,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #566 = FRSQRTEo
  { 567,	4,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo55,0,nullptr },  // Inst #567 = FSELD
  { 568,	4,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo55,0,nullptr },  // Inst #568 = FSELDo
  { 569,	4,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #569 = FSELS
  { 570,	4,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList19, OperandInfo57,0,nullptr },  // Inst #570 = FSELSo
  { 571,	2,	1,	17,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #571 = FSQRT
  { 572,	2,	1,	18,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo49,0,nullptr },  // Inst #572 = FSQRTS
  { 573,	2,	1,	18,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo49,0,nullptr },  // Inst #573 = FSQRTSo
  { 574,	2,	1,	17,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo48,0,nullptr },  // Inst #574 = FSQRTo
  { 575,	3,	1,	12,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo50,0,nullptr },  // Inst #575 = FSUB
  { 576,	3,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #576 = FSUBS
  { 577,	3,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo51,0,nullptr },  // Inst #577 = FSUBSo
  { 578,	3,	1,	12,	4,	0, 0x18ULL, ImplicitList11, ImplicitList19, OperandInfo50,0,nullptr },  // Inst #578 = FSUBo
  { 579,	2,	0,	19,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #579 = ICBI
  { 580,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo58,0,nullptr },  // Inst #580 = ICBT
  { 581,	2,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #581 = ICCCI
  { 582,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #582 = INSLWI
  { 583,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #583 = INSLWIo
  { 584,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #584 = INSRDI
  { 585,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #585 = INSRDIo
  { 586,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #586 = INSRWI
  { 587,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #587 = INSRWIo
  { 588,	4,	1,	2,	4,	0|(1<<MCID::Select), 0x8ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #588 = ISEL
  { 589,	4,	1,	2,	4,	0|(1<<MCID::Select), 0x8ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #589 = ISEL8
  { 590,	0,	0,	20,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #590 = ISYNC
  { 591,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #591 = LA
  { 592,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #592 = LAx
  { 593,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #593 = LBZ
  { 594,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #594 = LBZ8
  { 595,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #595 = LBZCIX
  { 596,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #596 = LBZU
  { 597,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #597 = LBZU8
  { 598,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #598 = LBZUX
  { 599,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #599 = LBZUX8
  { 600,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #600 = LBZX
  { 601,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #601 = LBZX8
  { 602,	3,	1,	23,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #602 = LD
  { 603,	3,	1,	24,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #603 = LDARX
  { 604,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #604 = LDBRX
  { 605,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #605 = LDCIX
  { 606,	4,	2,	25,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #606 = LDU
  { 607,	4,	2,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #607 = LDUX
  { 608,	3,	1,	23,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #608 = LDX
  { 609,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #609 = LDgotTprelL
  { 610,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #610 = LDgotTprelL32
  { 611,	2,	0,	23,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::UnmodeledSideEffects), 0x10ULL, nullptr, ImplicitList20, OperandInfo30,0,nullptr },  // Inst #611 = LDinto_toc
  { 612,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo70,0,nullptr },  // Inst #612 = LDtoc
  { 613,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo70,0,nullptr },  // Inst #613 = LDtocBA
  { 614,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo70,0,nullptr },  // Inst #614 = LDtocCPT
  { 615,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo70,0,nullptr },  // Inst #615 = LDtocJTI
  { 616,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #616 = LDtocL
  { 617,	3,	1,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #617 = LFD
  { 618,	4,	2,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #618 = LFDU
  { 619,	4,	2,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo73,0,nullptr },  // Inst #619 = LFDUX
  { 620,	3,	1,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo74,0,nullptr },  // Inst #620 = LFDX
  { 621,	3,	1,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo74,0,nullptr },  // Inst #621 = LFIWAX
  { 622,	3,	1,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo74,0,nullptr },  // Inst #622 = LFIWZX
  { 623,	3,	1,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo75,0,nullptr },  // Inst #623 = LFS
  { 624,	4,	2,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #624 = LFSU
  { 625,	4,	2,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo77,0,nullptr },  // Inst #625 = LFSUX
  { 626,	3,	1,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #626 = LFSX
  { 627,	3,	1,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #627 = LHA
  { 628,	3,	1,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #628 = LHA8
  { 629,	4,	2,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #629 = LHAU
  { 630,	4,	2,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #630 = LHAU8
  { 631,	4,	2,	32,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #631 = LHAUX
  { 632,	4,	2,	32,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #632 = LHAUX8
  { 633,	3,	1,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #633 = LHAX
  { 634,	3,	1,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #634 = LHAX8
  { 635,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #635 = LHBRX
  { 636,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #636 = LHBRX8
  { 637,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #637 = LHZ
  { 638,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #638 = LHZ8
  { 639,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #639 = LHZCIX
  { 640,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #640 = LHZU
  { 641,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #641 = LHZU8
  { 642,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #642 = LHZUX
  { 643,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #643 = LHZUX8
  { 644,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #644 = LHZX
  { 645,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #645 = LHZX8
  { 646,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo79,0,nullptr },  // Inst #646 = LI
  { 647,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo80,0,nullptr },  // Inst #647 = LI8
  { 648,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo79,0,nullptr },  // Inst #648 = LIS
  { 649,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo80,0,nullptr },  // Inst #649 = LIS8
  { 650,	3,	1,	33,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #650 = LMW
  { 651,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #651 = LSWI
  { 652,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #652 = LVEBX
  { 653,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #653 = LVEHX
  { 654,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #654 = LVEWX
  { 655,	3,	1,	8,	4,	0, 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #655 = LVSL
  { 656,	3,	1,	8,	4,	0, 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #656 = LVSR
  { 657,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #657 = LVX
  { 658,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #658 = LVXL
  { 659,	3,	1,	34,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #659 = LWA
  { 660,	3,	1,	35,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #660 = LWARX
  { 661,	4,	2,	32,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #661 = LWAUX
  { 662,	3,	1,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #662 = LWAX
  { 663,	3,	1,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #663 = LWAX_32
  { 664,	3,	1,	34,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #664 = LWA_32
  { 665,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #665 = LWBRX
  { 666,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #666 = LWBRX8
  { 667,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #667 = LWZ
  { 668,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #668 = LWZ8
  { 669,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #669 = LWZCIX
  { 670,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #670 = LWZU
  { 671,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #671 = LWZU8
  { 672,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #672 = LWZUX
  { 673,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #673 = LWZUX8
  { 674,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #674 = LWZX
  { 675,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #675 = LWZX8
  { 676,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #676 = LWZtoc
  { 677,	3,	1,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo82,0,nullptr },  // Inst #677 = LXSDX
  { 678,	3,	1,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo83,0,nullptr },  // Inst #678 = LXVD2X
  { 679,	3,	1,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo83,0,nullptr },  // Inst #679 = LXVDSX
  { 680,	3,	1,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo83,0,nullptr },  // Inst #680 = LXVW4X
  { 681,	1,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #681 = MBAR
  { 682,	2,	1,	36,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo84,0,nullptr },  // Inst #682 = MCRF
  { 683,	1,	1,	37,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo85,0,nullptr },  // Inst #683 = MFCR
  { 684,	1,	1,	37,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo86,0,nullptr },  // Inst #684 = MFCR8
  { 685,	1,	1,	38,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList5, nullptr, OperandInfo85,0,nullptr },  // Inst #685 = MFCTR
  { 686,	1,	1,	38,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList6, nullptr, OperandInfo86,0,nullptr },  // Inst #686 = MFCTR8
  { 687,	2,	1,	38,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #687 = MFDCR
  { 688,	1,	1,	39,	4,	0, 0x1aULL, ImplicitList11, nullptr, OperandInfo87,0,nullptr },  // Inst #688 = MFFS
  { 689,	1,	1,	38,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList8, nullptr, OperandInfo85,0,nullptr },  // Inst #689 = MFLR
  { 690,	1,	1,	38,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList10, nullptr, OperandInfo86,0,nullptr },  // Inst #690 = MFLR8
  { 691,	1,	1,	40,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo85,0,nullptr },  // Inst #691 = MFMSR
  { 692,	2,	1,	41,	4,	0|(1<<MCID::ExtraSrcRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo79,0,nullptr },  // Inst #692 = MFOCRF
  { 693,	2,	1,	41,	4,	0|(1<<MCID::ExtraSrcRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo80,0,nullptr },  // Inst #693 = MFOCRF8
  { 694,	2,	1,	38,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #694 = MFSPR
  { 695,	2,	1,	42,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo79,0,nullptr },  // Inst #695 = MFSR
  { 696,	2,	1,	42,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #696 = MFSRIN
  { 697,	2,	1,	43,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45,PPC::DeprecatedMFTB,nullptr },  // Inst #697 = MFTB
  { 698,	1,	1,	43,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo86,0,nullptr },  // Inst #698 = MFTB8
  { 699,	1,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo85,0,nullptr },  // Inst #699 = MFVRSAVE
  { 700,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #700 = MFVRSAVEv
  { 701,	1,	1,	44,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #701 = MFVSCR
  { 702,	0,	0,	45,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #702 = MSYNC
  { 703,	2,	0,	46,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo90,0,nullptr },  // Inst #703 = MTCRF
  { 704,	2,	0,	46,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo91,0,nullptr },  // Inst #704 = MTCRF8
  { 705,	1,	0,	47,	4,	0, 0x9ULL, nullptr, ImplicitList5, OperandInfo85,0,nullptr },  // Inst #705 = MTCTR
  { 706,	1,	0,	47,	4,	0, 0x9ULL, nullptr, ImplicitList6, OperandInfo86,0,nullptr },  // Inst #706 = MTCTR8
  { 707,	1,	0,	47,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList6, OperandInfo86,0,nullptr },  // Inst #707 = MTCTR8loop
  { 708,	1,	0,	47,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList5, OperandInfo85,0,nullptr },  // Inst #708 = MTCTRloop
  { 709,	2,	0,	47,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #709 = MTDCR
  { 710,	1,	0,	48,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList11, ImplicitList11, OperandInfo5,0,nullptr },  // Inst #710 = MTFSB0
  { 711,	1,	0,	48,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList11, ImplicitList11, OperandInfo5,0,nullptr },  // Inst #711 = MTFSB1
  { 712,	2,	0,	48,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList11, ImplicitList11, OperandInfo92,0,nullptr },  // Inst #712 = MTFSF
  { 713,	1,	0,	47,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList8, OperandInfo85,0,nullptr },  // Inst #713 = MTLR
  { 714,	1,	0,	47,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList10, OperandInfo86,0,nullptr },  // Inst #714 = MTLR8
  { 715,	2,	0,	49,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #715 = MTMSR
  { 716,	2,	0,	50,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #716 = MTMSRD
  { 717,	2,	1,	46,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo93,0,nullptr },  // Inst #717 = MTOCRF
  { 718,	2,	1,	46,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo94,0,nullptr },  // Inst #718 = MTOCRF8
  { 719,	2,	0,	47,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90,0,nullptr },  // Inst #719 = MTSPR
  { 720,	2,	0,	51,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo79,0,nullptr },  // Inst #720 = MTSR
  { 721,	2,	0,	51,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #721 = MTSRIN
  { 722,	1,	0,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, nullptr, nullptr, OperandInfo85,0,nullptr },  // Inst #722 = MTVRSAVE
  { 723,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, nullptr, nullptr, OperandInfo95,0,nullptr },  // Inst #723 = MTVRSAVEv
  { 724,	1,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #724 = MTVSCR
  { 725,	3,	1,	52,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #725 = MULHD
  { 726,	3,	1,	53,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #726 = MULHDU
  { 727,	3,	1,	53,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #727 = MULHDUo
  { 728,	3,	1,	52,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #728 = MULHDo
  { 729,	3,	1,	52,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #729 = MULHW
  { 730,	3,	1,	53,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #730 = MULHWU
  { 731,	3,	1,	53,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #731 = MULHWUo
  { 732,	3,	1,	52,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #732 = MULHWo
  { 733,	3,	1,	54,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #733 = MULLD
  { 734,	3,	1,	54,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #734 = MULLDo
  { 735,	3,	1,	55,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #735 = MULLI
  { 736,	3,	1,	55,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #736 = MULLI8
  { 737,	3,	1,	52,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #737 = MULLW
  { 738,	3,	1,	52,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #738 = MULLWo
  { 739,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList8, nullptr,0,nullptr },  // Inst #739 = MoveGOTtoLR
  { 740,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList8, nullptr,0,nullptr },  // Inst #740 = MovePCtoLR
  { 741,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList10, nullptr,0,nullptr },  // Inst #741 = MovePCtoLR8
  { 742,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #742 = NAND
  { 743,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #743 = NAND8
  { 744,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #744 = NAND8o
  { 745,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #745 = NANDo
  { 746,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #746 = NEG
  { 747,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #747 = NEG8
  { 748,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo19,0,nullptr },  // Inst #748 = NEG8o
  { 749,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo18,0,nullptr },  // Inst #749 = NEGo
  { 750,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #750 = NOP
  { 751,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #751 = NOP_GT_PWR6
  { 752,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #752 = NOP_GT_PWR7
  { 753,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #753 = NOR
  { 754,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #754 = NOR8
  { 755,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #755 = NOR8o
  { 756,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #756 = NORo
  { 757,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #757 = OR
  { 758,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #758 = OR8
  { 759,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #759 = OR8o
  { 760,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #760 = ORC
  { 761,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #761 = ORC8
  { 762,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #762 = ORC8o
  { 763,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #763 = ORCo
  { 764,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #764 = ORI
  { 765,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #765 = ORI8
  { 766,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #766 = ORIS
  { 767,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #767 = ORIS8
  { 768,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #768 = ORo
  { 769,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #769 = POPCNTD
  { 770,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #770 = POPCNTW
  { 771,	1,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo85,0,nullptr },  // Inst #771 = PPC32GOT
  { 772,	2,	2,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #772 = PPC32PICGOT
  { 773,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo96,0,nullptr },  // Inst #773 = RESTORE_CR
  { 774,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo97,0,nullptr },  // Inst #774 = RESTORE_CRBIT
  { 775,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo98,0,nullptr },  // Inst #775 = RESTORE_VRSAVE
  { 776,	0,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #776 = RFCI
  { 777,	0,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #777 = RFDI
  { 778,	0,	0,	56,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #778 = RFI
  { 779,	0,	0,	57,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #779 = RFID
  { 780,	0,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #780 = RFMCI
  { 781,	4,	1,	58,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo99,0,nullptr },  // Inst #781 = RLDCL
  { 782,	4,	1,	58,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo99,0,nullptr },  // Inst #782 = RLDCLo
  { 783,	4,	1,	58,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo99,0,nullptr },  // Inst #783 = RLDCR
  { 784,	4,	1,	58,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo99,0,nullptr },  // Inst #784 = RLDCRo
  { 785,	4,	1,	59,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #785 = RLDIC
  { 786,	4,	1,	59,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #786 = RLDICL
  { 787,	4,	1,	59,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo100,0,nullptr },  // Inst #787 = RLDICL_32_64
  { 788,	4,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo31,0,nullptr },  // Inst #788 = RLDICLo
  { 789,	4,	1,	59,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #789 = RLDICR
  { 790,	4,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo31,0,nullptr },  // Inst #790 = RLDICRo
  { 791,	4,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo31,0,nullptr },  // Inst #791 = RLDICo
  { 792,	5,	1,	59,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo101,0,nullptr },  // Inst #792 = RLDIMI
  { 793,	5,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo101,0,nullptr },  // Inst #793 = RLDIMIo
  { 794,	6,	1,	60,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, nullptr, OperandInfo102,0,nullptr },  // Inst #794 = RLWIMI
  { 795,	6,	1,	60,	4,	0, 0xcULL, nullptr, nullptr, OperandInfo103,0,nullptr },  // Inst #795 = RLWIMI8
  { 796,	6,	1,	60,	4,	0, 0xcULL, nullptr, ImplicitList1, OperandInfo103,0,nullptr },  // Inst #796 = RLWIMI8o
  { 797,	6,	1,	60,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList1, OperandInfo102,0,nullptr },  // Inst #797 = RLWIMIo
  { 798,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo104,0,nullptr },  // Inst #798 = RLWINM
  { 799,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo105,0,nullptr },  // Inst #799 = RLWINM8
  { 800,	5,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo105,0,nullptr },  // Inst #800 = RLWINM8o
  { 801,	5,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList1, OperandInfo104,0,nullptr },  // Inst #801 = RLWINMo
  { 802,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo106,0,nullptr },  // Inst #802 = RLWNM
  { 803,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo107,0,nullptr },  // Inst #803 = RLWNM8
  { 804,	5,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo107,0,nullptr },  // Inst #804 = RLWNM8o
  { 805,	5,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo106,0,nullptr },  // Inst #805 = RLWNMo
  { 806,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #806 = ROTRDI
  { 807,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #807 = ROTRDIo
  { 808,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #808 = ROTRWI
  { 809,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #809 = ROTRWIo
  { 810,	2,	2,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #810 = ReadTB
  { 811,	1,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #811 = SC
  { 812,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo108,0,nullptr },  // Inst #812 = SELECT_CC_F4
  { 813,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo109,0,nullptr },  // Inst #813 = SELECT_CC_F8
  { 814,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo110,0,nullptr },  // Inst #814 = SELECT_CC_I4
  { 815,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo111,0,nullptr },  // Inst #815 = SELECT_CC_I8
  { 816,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo112,0,nullptr },  // Inst #816 = SELECT_CC_VRRC
  { 817,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo109,0,nullptr },  // Inst #817 = SELECT_CC_VSFRC
  { 818,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo113,0,nullptr },  // Inst #818 = SELECT_CC_VSRC
  { 819,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo114,0,nullptr },  // Inst #819 = SELECT_F4
  { 820,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo115,0,nullptr },  // Inst #820 = SELECT_F8
  { 821,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo116,0,nullptr },  // Inst #821 = SELECT_I4
  { 822,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo117,0,nullptr },  // Inst #822 = SELECT_I8
  { 823,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo118,0,nullptr },  // Inst #823 = SELECT_VRRC
  { 824,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo115,0,nullptr },  // Inst #824 = SELECT_VSFRC
  { 825,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo119,0,nullptr },  // Inst #825 = SELECT_VSRC
  { 826,	0,	0,	61,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #826 = SLBIA
  { 827,	1,	0,	62,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo85,0,nullptr },  // Inst #827 = SLBIE
  { 828,	2,	1,	63,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #828 = SLBMFEE
  { 829,	2,	0,	64,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #829 = SLBMTE
  { 830,	3,	1,	58,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo120,0,nullptr },  // Inst #830 = SLD
  { 831,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #831 = SLDI
  { 832,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #832 = SLDIo
  { 833,	3,	1,	58,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo120,0,nullptr },  // Inst #833 = SLDo
  { 834,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #834 = SLW
  { 835,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #835 = SLW8
  { 836,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #836 = SLW8o
  { 837,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #837 = SLWI
  { 838,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #838 = SLWIo
  { 839,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #839 = SLWo
  { 840,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo96,0,nullptr },  // Inst #840 = SPILL_CR
  { 841,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo97,0,nullptr },  // Inst #841 = SPILL_CRBIT
  { 842,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo98,0,nullptr },  // Inst #842 = SPILL_VRSAVE
  { 843,	3,	1,	58,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo120,0,nullptr },  // Inst #843 = SRAD
  { 844,	3,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo15,0,nullptr },  // Inst #844 = SRADI
  { 845,	3,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo15,0,nullptr },  // Inst #845 = SRADIo
  { 846,	3,	1,	58,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo120,0,nullptr },  // Inst #846 = SRADo
  { 847,	3,	1,	65,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #847 = SRAW
  { 848,	3,	1,	65,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #848 = SRAWI
  { 849,	3,	1,	65,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo13,0,nullptr },  // Inst #849 = SRAWIo
  { 850,	3,	1,	65,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #850 = SRAWo
  { 851,	3,	1,	58,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo120,0,nullptr },  // Inst #851 = SRD
  { 852,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #852 = SRDI
  { 853,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #853 = SRDIo
  { 854,	3,	1,	58,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo120,0,nullptr },  // Inst #854 = SRDo
  { 855,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #855 = SRW
  { 856,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #856 = SRW8
  { 857,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #857 = SRW8o
  { 858,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #858 = SRWI
  { 859,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #859 = SRWIo
  { 860,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #860 = SRWo
  { 861,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #861 = STB
  { 862,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #862 = STB8
  { 863,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #863 = STBCIX
  { 864,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo121,0,nullptr },  // Inst #864 = STBU
  { 865,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo122,0,nullptr },  // Inst #865 = STBU8
  { 866,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo123,0,nullptr },  // Inst #866 = STBUX
  { 867,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo124,0,nullptr },  // Inst #867 = STBUX8
  { 868,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #868 = STBX
  { 869,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #869 = STBX8
  { 870,	3,	0,	67,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #870 = STD
  { 871,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #871 = STDBRX
  { 872,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #872 = STDCIX
  { 873,	3,	0,	68,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, ImplicitList1, OperandInfo67,0,nullptr },  // Inst #873 = STDCX
  { 874,	4,	1,	69,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo122,0,nullptr },  // Inst #874 = STDU
  { 875,	4,	1,	70,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo124,0,nullptr },  // Inst #875 = STDUX
  { 876,	3,	0,	67,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #876 = STDX
  { 877,	3,	0,	71,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #877 = STFD
  { 878,	4,	1,	72,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo125,0,nullptr },  // Inst #878 = STFDU
  { 879,	4,	1,	72,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo126,0,nullptr },  // Inst #879 = STFDUX
  { 880,	3,	0,	71,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo74,0,nullptr },  // Inst #880 = STFDX
  { 881,	3,	0,	71,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo74,0,nullptr },  // Inst #881 = STFIWX
  { 882,	3,	0,	71,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo75,0,nullptr },  // Inst #882 = STFS
  { 883,	4,	1,	72,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo127,0,nullptr },  // Inst #883 = STFSU
  { 884,	4,	1,	72,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo128,0,nullptr },  // Inst #884 = STFSUX
  { 885,	3,	0,	71,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #885 = STFSX
  { 886,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #886 = STH
  { 887,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #887 = STH8
  { 888,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #888 = STHBRX
  { 889,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #889 = STHCIX
  { 890,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo121,0,nullptr },  // Inst #890 = STHU
  { 891,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo122,0,nullptr },  // Inst #891 = STHU8
  { 892,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo123,0,nullptr },  // Inst #892 = STHUX
  { 893,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo124,0,nullptr },  // Inst #893 = STHUX8
  { 894,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #894 = STHX
  { 895,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #895 = STHX8
  { 896,	3,	0,	33,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #896 = STMW
  { 897,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #897 = STSWI
  { 898,	3,	0,	44,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #898 = STVEBX
  { 899,	3,	0,	44,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #899 = STVEHX
  { 900,	3,	0,	44,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #900 = STVEWX
  { 901,	3,	0,	44,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #901 = STVX
  { 902,	3,	0,	44,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #902 = STVXL
  { 903,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #903 = STW
  { 904,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #904 = STW8
  { 905,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #905 = STWBRX
  { 906,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #906 = STWCIX
  { 907,	3,	0,	73,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, ImplicitList1, OperandInfo66,0,nullptr },  // Inst #907 = STWCX
  { 908,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo121,0,nullptr },  // Inst #908 = STWU
  { 909,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo122,0,nullptr },  // Inst #909 = STWU8
  { 910,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo123,0,nullptr },  // Inst #910 = STWUX
  { 911,	4,	1,	66,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo124,0,nullptr },  // Inst #911 = STWUX8
  { 912,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #912 = STWX
  { 913,	3,	0,	44,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #913 = STWX8
  { 914,	3,	0,	71,	4,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList11, nullptr, OperandInfo82,0,nullptr },  // Inst #914 = STXSDX
  { 915,	3,	0,	71,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x0ULL, ImplicitList11, nullptr, OperandInfo83,0,nullptr },  // Inst #915 = STXVD2X
  { 916,	3,	0,	71,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x0ULL, ImplicitList11, nullptr, OperandInfo83,0,nullptr },  // Inst #916 = STXVW4X
  { 917,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #917 = SUBF
  { 918,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #918 = SUBF8
  { 919,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #919 = SUBF8o
  { 920,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #920 = SUBFC
  { 921,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #921 = SUBFC8
  { 922,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #922 = SUBFC8o
  { 923,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #923 = SUBFCo
  { 924,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #924 = SUBFE
  { 925,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #925 = SUBFE8
  { 926,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo14,0,nullptr },  // Inst #926 = SUBFE8o
  { 927,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #927 = SUBFEo
  { 928,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #928 = SUBFIC
  { 929,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo15,0,nullptr },  // Inst #929 = SUBFIC8
  { 930,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo18,0,nullptr },  // Inst #930 = SUBFME
  { 931,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo19,0,nullptr },  // Inst #931 = SUBFME8
  { 932,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo19,0,nullptr },  // Inst #932 = SUBFME8o
  { 933,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo18,0,nullptr },  // Inst #933 = SUBFMEo
  { 934,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo18,0,nullptr },  // Inst #934 = SUBFZE
  { 935,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo19,0,nullptr },  // Inst #935 = SUBFZE8
  { 936,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo19,0,nullptr },  // Inst #936 = SUBFZE8o
  { 937,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo18,0,nullptr },  // Inst #937 = SUBFZEo
  { 938,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #938 = SUBFo
  { 939,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #939 = SUBI
  { 940,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #940 = SUBIC
  { 941,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #941 = SUBICo
  { 942,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #942 = SUBIS
  { 943,	1,	0,	45,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #943 = SYNC
  { 944,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #944 = TAILB
  { 945,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #945 = TAILB8
  { 946,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #946 = TAILBA
  { 947,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #947 = TAILBA8
  { 948,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, nullptr, nullptr,0,nullptr },  // Inst #948 = TAILBCTR
  { 949,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, nullptr, nullptr,0,nullptr },  // Inst #949 = TAILBCTR8
  { 950,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo129,0,nullptr },  // Inst #950 = TCRETURNai
  { 951,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo129,0,nullptr },  // Inst #951 = TCRETURNai8
  { 952,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo129,0,nullptr },  // Inst #952 = TCRETURNdi
  { 953,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo129,0,nullptr },  // Inst #953 = TCRETURNdi8
  { 954,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo130,0,nullptr },  // Inst #954 = TCRETURNri
  { 955,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo131,0,nullptr },  // Inst #955 = TCRETURNri8
  { 956,	3,	0,	74,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #956 = TD
  { 957,	3,	0,	74,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #957 = TDI
  { 958,	0,	0,	75,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #958 = TLBIA
  { 959,	2,	0,	76,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #959 = TLBIE
  { 960,	1,	0,	77,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo85,0,nullptr },  // Inst #960 = TLBIEL
  { 961,	2,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #961 = TLBIVAX
  { 962,	1,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo85,0,nullptr },  // Inst #962 = TLBLD
  { 963,	1,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo85,0,nullptr },  // Inst #963 = TLBLI
  { 964,	0,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #964 = TLBRE
  { 965,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #965 = TLBRE2
  { 966,	2,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #966 = TLBSX
  { 967,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #967 = TLBSX2
  { 968,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #968 = TLBSX2D
  { 969,	0,	0,	78,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #969 = TLBSYNC
  { 970,	0,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #970 = TLBWE
  { 971,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #971 = TLBWE2
  { 972,	0,	0,	8,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #972 = TRAP
  { 973,	3,	0,	79,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #973 = TW
  { 974,	3,	0,	79,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #974 = TWI
  { 975,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #975 = UPDATE_VRSAVE
  { 976,	3,	2,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #976 = UpdateGBR
  { 977,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #977 = VADDCUW
  { 978,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #978 = VADDFP
  { 979,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #979 = VADDSBS
  { 980,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #980 = VADDSHS
  { 981,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #981 = VADDSWS
  { 982,	3,	1,	80,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #982 = VADDUBM
  { 983,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #983 = VADDUBS
  { 984,	3,	1,	80,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #984 = VADDUHM
  { 985,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #985 = VADDUHS
  { 986,	3,	1,	80,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #986 = VADDUWM
  { 987,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #987 = VADDUWS
  { 988,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #988 = VAND
  { 989,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #989 = VANDC
  { 990,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #990 = VAVGSB
  { 991,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #991 = VAVGSH
  { 992,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #992 = VAVGSW
  { 993,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #993 = VAVGUB
  { 994,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #994 = VAVGUH
  { 995,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #995 = VAVGUW
  { 996,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #996 = VCFSX
  { 997,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #997 = VCFSX_0
  { 998,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #998 = VCFUX
  { 999,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #999 = VCFUX_0
  { 1000,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1000 = VCMPBFP
  { 1001,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1001 = VCMPBFPo
  { 1002,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1002 = VCMPEQFP
  { 1003,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1003 = VCMPEQFPo
  { 1004,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1004 = VCMPEQUB
  { 1005,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1005 = VCMPEQUBo
  { 1006,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1006 = VCMPEQUH
  { 1007,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1007 = VCMPEQUHo
  { 1008,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1008 = VCMPEQUW
  { 1009,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1009 = VCMPEQUWo
  { 1010,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1010 = VCMPGEFP
  { 1011,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1011 = VCMPGEFPo
  { 1012,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1012 = VCMPGTFP
  { 1013,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1013 = VCMPGTFPo
  { 1014,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1014 = VCMPGTSB
  { 1015,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1015 = VCMPGTSBo
  { 1016,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1016 = VCMPGTSH
  { 1017,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1017 = VCMPGTSHo
  { 1018,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1018 = VCMPGTSW
  { 1019,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1019 = VCMPGTSWo
  { 1020,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1020 = VCMPGTUB
  { 1021,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1021 = VCMPGTUBo
  { 1022,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1022 = VCMPGTUH
  { 1023,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1023 = VCMPGTUHo
  { 1024,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1024 = VCMPGTUW
  { 1025,	3,	1,	81,	4,	0, 0x28ULL, nullptr, ImplicitList21, OperandInfo136,0,nullptr },  // Inst #1025 = VCMPGTUWo
  { 1026,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #1026 = VCTSXS
  { 1027,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1027 = VCTSXS_0
  { 1028,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #1028 = VCTUXS
  { 1029,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1029 = VCTUXS_0
  { 1030,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1030 = VEXPTEFP
  { 1031,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1031 = VLOGEFP
  { 1032,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1032 = VMADDFP
  { 1033,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1033 = VMAXFP
  { 1034,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1034 = VMAXSB
  { 1035,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1035 = VMAXSH
  { 1036,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1036 = VMAXSW
  { 1037,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1037 = VMAXUB
  { 1038,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1038 = VMAXUH
  { 1039,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1039 = VMAXUW
  { 1040,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1040 = VMHADDSHS
  { 1041,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1041 = VMHRADDSHS
  { 1042,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1042 = VMINFP
  { 1043,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1043 = VMINSB
  { 1044,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1044 = VMINSH
  { 1045,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1045 = VMINSW
  { 1046,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1046 = VMINUB
  { 1047,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1047 = VMINUH
  { 1048,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1048 = VMINUW
  { 1049,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1049 = VMLADDUHM
  { 1050,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1050 = VMRGHB
  { 1051,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1051 = VMRGHH
  { 1052,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1052 = VMRGHW
  { 1053,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1053 = VMRGLB
  { 1054,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1054 = VMRGLH
  { 1055,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1055 = VMRGLW
  { 1056,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1056 = VMSUMMBM
  { 1057,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1057 = VMSUMSHM
  { 1058,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1058 = VMSUMSHS
  { 1059,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1059 = VMSUMUBM
  { 1060,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1060 = VMSUMUHM
  { 1061,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1061 = VMSUMUHS
  { 1062,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1062 = VMULESB
  { 1063,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1063 = VMULESH
  { 1064,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1064 = VMULEUB
  { 1065,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1065 = VMULEUH
  { 1066,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1066 = VMULOSB
  { 1067,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1067 = VMULOSH
  { 1068,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1068 = VMULOUB
  { 1069,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1069 = VMULOUH
  { 1070,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1070 = VNMSUBFP
  { 1071,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1071 = VNOR
  { 1072,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1072 = VOR
  { 1073,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1073 = VPERM
  { 1074,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1074 = VPKPX
  { 1075,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1075 = VPKSHSS
  { 1076,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1076 = VPKSHUS
  { 1077,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1077 = VPKSWSS
  { 1078,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1078 = VPKSWUS
  { 1079,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1079 = VPKUHUM
  { 1080,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1080 = VPKUHUS
  { 1081,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1081 = VPKUWUM
  { 1082,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1082 = VPKUWUS
  { 1083,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1083 = VREFP
  { 1084,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1084 = VRFIM
  { 1085,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1085 = VRFIN
  { 1086,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1086 = VRFIP
  { 1087,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1087 = VRFIZ
  { 1088,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1088 = VRLB
  { 1089,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1089 = VRLH
  { 1090,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1090 = VRLW
  { 1091,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1091 = VRSQRTEFP
  { 1092,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1092 = VSEL
  { 1093,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1093 = VSL
  { 1094,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1094 = VSLB
  { 1095,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1095 = VSLDOI
  { 1096,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1096 = VSLH
  { 1097,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1097 = VSLO
  { 1098,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1098 = VSLW
  { 1099,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #1099 = VSPLTB
  { 1100,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #1100 = VSPLTH
  { 1101,	2,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo141,0,nullptr },  // Inst #1101 = VSPLTISB
  { 1102,	2,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo141,0,nullptr },  // Inst #1102 = VSPLTISH
  { 1103,	2,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo141,0,nullptr },  // Inst #1103 = VSPLTISW
  { 1104,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #1104 = VSPLTW
  { 1105,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1105 = VSR
  { 1106,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1106 = VSRAB
  { 1107,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1107 = VSRAH
  { 1108,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1108 = VSRAW
  { 1109,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1109 = VSRB
  { 1110,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1110 = VSRH
  { 1111,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1111 = VSRO
  { 1112,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1112 = VSRW
  { 1113,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1113 = VSUBCUW
  { 1114,	3,	1,	80,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1114 = VSUBFP
  { 1115,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1115 = VSUBSBS
  { 1116,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1116 = VSUBSHS
  { 1117,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1117 = VSUBSWS
  { 1118,	3,	1,	80,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1118 = VSUBUBM
  { 1119,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1119 = VSUBUBS
  { 1120,	3,	1,	80,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1120 = VSUBUHM
  { 1121,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1121 = VSUBUHS
  { 1122,	3,	1,	80,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1122 = VSUBUWM
  { 1123,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1123 = VSUBUWS
  { 1124,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1124 = VSUM2SWS
  { 1125,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1125 = VSUM4SBS
  { 1126,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1126 = VSUM4SHS
  { 1127,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1127 = VSUM4UBS
  { 1128,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1128 = VSUMSWS
  { 1129,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1129 = VUPKHPX
  { 1130,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1130 = VUPKHSB
  { 1131,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1131 = VUPKHSH
  { 1132,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1132 = VUPKLPX
  { 1133,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1133 = VUPKLSB
  { 1134,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #1134 = VUPKLSH
  { 1135,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #1135 = VXOR
  { 1136,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #1136 = V_SET0
  { 1137,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #1137 = V_SET0B
  { 1138,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #1138 = V_SET0H
  { 1139,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #1139 = V_SETALLONES
  { 1140,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #1140 = V_SETALLONESB
  { 1141,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #1141 = V_SETALLONESH
  { 1142,	1,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #1142 = WAIT
  { 1143,	1,	0,	49,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo85,0,nullptr },  // Inst #1143 = WRTEE
  { 1144,	1,	0,	49,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #1144 = WRTEEI
  { 1145,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #1145 = XOR
  { 1146,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #1146 = XOR8
  { 1147,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #1147 = XOR8o
  { 1148,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #1148 = XORI
  { 1149,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #1149 = XORI8
  { 1150,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #1150 = XORIS
  { 1151,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #1151 = XORIS8
  { 1152,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #1152 = XORo
  { 1153,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1153 = XSABSDP
  { 1154,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1154 = XSADDDP
  { 1155,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1155 = XSCMPODP
  { 1156,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1156 = XSCMPUDP
  { 1157,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1157 = XSCPSGNDP
  { 1158,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1158 = XSCVDPSP
  { 1159,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1159 = XSCVDPSXDS
  { 1160,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1160 = XSCVDPSXWS
  { 1161,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1161 = XSCVDPUXDS
  { 1162,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1162 = XSCVDPUXWS
  { 1163,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1163 = XSCVSPDP
  { 1164,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1164 = XSCVSXDDP
  { 1165,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1165 = XSCVUXDDP
  { 1166,	3,	1,	14,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1166 = XSDIVDP
  { 1167,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1167 = XSMADDADP
  { 1168,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1168 = XSMADDMDP
  { 1169,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1169 = XSMAXDP
  { 1170,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1170 = XSMINDP
  { 1171,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1171 = XSMSUBADP
  { 1172,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1172 = XSMSUBMDP
  { 1173,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1173 = XSMULDP
  { 1174,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1174 = XSNABSDP
  { 1175,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1175 = XSNEGDP
  { 1176,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1176 = XSNMADDADP
  { 1177,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1177 = XSNMADDMDP
  { 1178,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1178 = XSNMSUBADP
  { 1179,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1179 = XSNMSUBMDP
  { 1180,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1180 = XSRDPI
  { 1181,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1181 = XSRDPIC
  { 1182,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1182 = XSRDPIM
  { 1183,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1183 = XSRDPIP
  { 1184,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1184 = XSRDPIZ
  { 1185,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1185 = XSREDP
  { 1186,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1186 = XSRSQRTEDP
  { 1187,	2,	1,	17,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #1187 = XSSQRTDP
  { 1188,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1188 = XSSUBDP
  { 1189,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1189 = XSTDIVDP
  { 1190,	2,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo146,0,nullptr },  // Inst #1190 = XSTSQRTDP
  { 1191,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1191 = XVABSDP
  { 1192,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1192 = XVABSSP
  { 1193,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1193 = XVADDDP
  { 1194,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1194 = XVADDSP
  { 1195,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1195 = XVCMPEQDP
  { 1196,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, ImplicitList21, OperandInfo148,0,nullptr },  // Inst #1196 = XVCMPEQDPo
  { 1197,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1197 = XVCMPEQSP
  { 1198,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, ImplicitList21, OperandInfo148,0,nullptr },  // Inst #1198 = XVCMPEQSPo
  { 1199,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1199 = XVCMPGEDP
  { 1200,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, ImplicitList21, OperandInfo148,0,nullptr },  // Inst #1200 = XVCMPGEDPo
  { 1201,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1201 = XVCMPGESP
  { 1202,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, ImplicitList21, OperandInfo148,0,nullptr },  // Inst #1202 = XVCMPGESPo
  { 1203,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1203 = XVCMPGTDP
  { 1204,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, ImplicitList21, OperandInfo148,0,nullptr },  // Inst #1204 = XVCMPGTDPo
  { 1205,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1205 = XVCMPGTSP
  { 1206,	3,	1,	81,	4,	0, 0x0ULL, ImplicitList11, ImplicitList21, OperandInfo148,0,nullptr },  // Inst #1206 = XVCMPGTSPo
  { 1207,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1207 = XVCPSGNDP
  { 1208,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1208 = XVCPSGNSP
  { 1209,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1209 = XVCVDPSP
  { 1210,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1210 = XVCVDPSXDS
  { 1211,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1211 = XVCVDPSXWS
  { 1212,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1212 = XVCVDPUXDS
  { 1213,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1213 = XVCVDPUXWS
  { 1214,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1214 = XVCVSPDP
  { 1215,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1215 = XVCVSPSXDS
  { 1216,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1216 = XVCVSPSXWS
  { 1217,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1217 = XVCVSPUXDS
  { 1218,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1218 = XVCVSPUXWS
  { 1219,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1219 = XVCVSXDDP
  { 1220,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1220 = XVCVSXDSP
  { 1221,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1221 = XVCVSXWDP
  { 1222,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1222 = XVCVSXWSP
  { 1223,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1223 = XVCVUXDDP
  { 1224,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1224 = XVCVUXDSP
  { 1225,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1225 = XVCVUXWDP
  { 1226,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1226 = XVCVUXWSP
  { 1227,	3,	1,	14,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1227 = XVDIVDP
  { 1228,	3,	1,	15,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1228 = XVDIVSP
  { 1229,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1229 = XVMADDADP
  { 1230,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1230 = XVMADDASP
  { 1231,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1231 = XVMADDMDP
  { 1232,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1232 = XVMADDMSP
  { 1233,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1233 = XVMAXDP
  { 1234,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1234 = XVMAXSP
  { 1235,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1235 = XVMINDP
  { 1236,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1236 = XVMINSP
  { 1237,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1237 = XVMSUBADP
  { 1238,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1238 = XVMSUBASP
  { 1239,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1239 = XVMSUBMDP
  { 1240,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1240 = XVMSUBMSP
  { 1241,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1241 = XVMULDP
  { 1242,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1242 = XVMULSP
  { 1243,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1243 = XVNABSDP
  { 1244,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1244 = XVNABSSP
  { 1245,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1245 = XVNEGDP
  { 1246,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1246 = XVNEGSP
  { 1247,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1247 = XVNMADDADP
  { 1248,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1248 = XVNMADDASP
  { 1249,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1249 = XVNMADDMDP
  { 1250,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1250 = XVNMADDMSP
  { 1251,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1251 = XVNMSUBADP
  { 1252,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1252 = XVNMSUBASP
  { 1253,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1253 = XVNMSUBMDP
  { 1254,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo149,0,nullptr },  // Inst #1254 = XVNMSUBMSP
  { 1255,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1255 = XVRDPI
  { 1256,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1256 = XVRDPIC
  { 1257,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1257 = XVRDPIM
  { 1258,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1258 = XVRDPIP
  { 1259,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1259 = XVRDPIZ
  { 1260,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1260 = XVREDP
  { 1261,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1261 = XVRESP
  { 1262,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1262 = XVRSPI
  { 1263,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1263 = XVRSPIC
  { 1264,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1264 = XVRSPIM
  { 1265,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1265 = XVRSPIP
  { 1266,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1266 = XVRSPIZ
  { 1267,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1267 = XVRSQRTEDP
  { 1268,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1268 = XVRSQRTESP
  { 1269,	2,	1,	17,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1269 = XVSQRTDP
  { 1270,	2,	1,	18,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1270 = XVSQRTSP
  { 1271,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1271 = XVSUBDP
  { 1272,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo148,0,nullptr },  // Inst #1272 = XVSUBSP
  { 1273,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo150,0,nullptr },  // Inst #1273 = XVTDIVDP
  { 1274,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo150,0,nullptr },  // Inst #1274 = XVTDIVSP
  { 1275,	2,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo151,0,nullptr },  // Inst #1275 = XVTSQRTDP
  { 1276,	2,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo151,0,nullptr },  // Inst #1276 = XVTSQRTSP
  { 1277,	3,	1,	80,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo148,0,nullptr },  // Inst #1277 = XXLAND
  { 1278,	3,	1,	80,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo148,0,nullptr },  // Inst #1278 = XXLANDC
  { 1279,	3,	1,	80,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo148,0,nullptr },  // Inst #1279 = XXLNOR
  { 1280,	3,	1,	80,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo148,0,nullptr },  // Inst #1280 = XXLOR
  { 1281,	3,	1,	80,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1281 = XXLORf
  { 1282,	3,	1,	80,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo148,0,nullptr },  // Inst #1282 = XXLXOR
  { 1283,	3,	1,	82,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo148,0,nullptr },  // Inst #1283 = XXMRGHW
  { 1284,	3,	1,	82,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo148,0,nullptr },  // Inst #1284 = XXMRGLW
  { 1285,	4,	1,	82,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo152,0,nullptr },  // Inst #1285 = XXPERMDI
  { 1286,	4,	1,	82,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo153,0,nullptr },  // Inst #1286 = XXSEL
  { 1287,	4,	1,	82,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo152,0,nullptr },  // Inst #1287 = XXSLDWI
  { 1288,	3,	1,	82,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo154,0,nullptr },  // Inst #1288 = XXSPLTW
  { 1289,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo155,0,nullptr },  // Inst #1289 = gBC
  { 1290,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo155,0,nullptr },  // Inst #1290 = gBCA
  { 1291,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, OperandInfo156,0,nullptr },  // Inst #1291 = gBCCTR
  { 1292,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList22, OperandInfo156,0,nullptr },  // Inst #1292 = gBCCTRL
  { 1293,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList22, OperandInfo155,0,nullptr },  // Inst #1293 = gBCL
  { 1294,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList22, OperandInfo155,0,nullptr },  // Inst #1294 = gBCLA
  { 1295,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList5, OperandInfo156,0,nullptr },  // Inst #1295 = gBCLR
  { 1296,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList22, OperandInfo156,0,nullptr },  // Inst #1296 = gBCLRL
};

extern const char PPCInstrNameData[] = {
  /* 0 */ 'M', 'T', 'F', 'S', 'B', '0', 0,
  /* 7 */ 'V', '_', 'S', 'E', 'T', '0', 0,
  /* 14 */ 'V', 'C', 'T', 'S', 'X', 'S', '_', '0', 0,
  /* 23 */ 'V', 'C', 'T', 'U', 'X', 'S', '_', '0', 0,
  /* 32 */ 'V', 'C', 'F', 'S', 'X', '_', '0', 0,
  /* 40 */ 'V', 'C', 'F', 'U', 'X', '_', '0', 0,
  /* 48 */ 'M', 'T', 'F', 'S', 'B', '1', 0,
  /* 55 */ 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 71 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 91 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 111 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 132 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 152 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 168 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 188 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 208 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 227 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 240 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 253 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 267 */ 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 281 */ 'L', 'W', 'A', '_', '3', '2', 0,
  /* 288 */ 'L', 'W', 'A', 'X', '_', '3', '2', 0,
  /* 296 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '3', '2', 0,
  /* 314 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '3', '2', 0,
  /* 331 */ 'T', 'L', 'B', 'R', 'E', '2', 0,
  /* 338 */ 'T', 'L', 'B', 'W', 'E', '2', 0,
  /* 345 */ 'T', 'L', 'B', 'S', 'X', '2', 0,
  /* 352 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 372 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 392 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 413 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 433 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 449 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 469 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 489 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 508 */ 'D', 'S', 'T', '6', '4', 0,
  /* 514 */ 'D', 'S', 'T', 'S', 'T', '6', '4', 0,
  /* 522 */ 'D', 'S', 'T', 'T', '6', '4', 0,
  /* 529 */ 'D', 'S', 'T', 'S', 'T', 'T', '6', '4', 0,
  /* 538 */ 'E', 'X', 'T', 'S', 'B', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 551 */ 'E', 'X', 'T', 'S', 'H', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 564 */ 'R', 'L', 'D', 'I', 'C', 'L', '_', '3', '2', '_', '6', '4', 0,
  /* 577 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 0,
  /* 589 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '6', '4', 0,
  /* 607 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '6', '4', 0,
  /* 624 */ 'A', 'D', 'D', '4', 0,
  /* 629 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 642 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 652 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 665 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 675 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 695 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 715 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 736 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 756 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 772 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 792 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 812 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 831 */ 'N', 'O', 'P', '_', 'G', 'T', '_', 'P', 'W', 'R', '6', 0,
  /* 843 */ 'N', 'O', 'P', '_', 'G', 'T', '_', 'P', 'W', 'R', '7', 0,
  /* 855 */ 'T', 'A', 'I', 'L', 'B', 'A', '8', 0,
  /* 863 */ 'L', 'H', 'A', '8', 0,
  /* 868 */ 'B', 'L', 'A', '8', 0,
  /* 873 */ 'T', 'A', 'I', 'L', 'B', '8', 0,
  /* 880 */ 'C', 'M', 'P', 'B', '8', 0,
  /* 886 */ 'E', 'X', 'T', 'S', 'B', '8', 0,
  /* 893 */ 'M', 'F', 'T', 'B', '8', 0,
  /* 899 */ 'S', 'T', 'B', '8', 0,
  /* 904 */ 'A', 'D', 'D', 'C', '8', 0,
  /* 910 */ 'A', 'N', 'D', 'C', '8', 0,
  /* 916 */ 'S', 'U', 'B', 'F', 'C', '8', 0,
  /* 923 */ 'A', 'D', 'D', 'I', 'C', '8', 0,
  /* 930 */ 'S', 'U', 'B', 'F', 'I', 'C', '8', 0,
  /* 938 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 948 */ 'O', 'R', 'C', '8', 0,
  /* 953 */ 'A', 'D', 'D', '8', 0,
  /* 958 */ 'N', 'A', 'N', 'D', '8', 0,
  /* 964 */ 'A', 'D', 'D', 'E', '8', 0,
  /* 970 */ 'S', 'U', 'B', 'F', 'E', '8', 0,
  /* 977 */ 'A', 'D', 'D', 'M', 'E', '8', 0,
  /* 984 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 0,
  /* 992 */ 'A', 'D', 'D', 'Z', 'E', '8', 0,
  /* 999 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 0,
  /* 1007 */ 'S', 'U', 'B', 'F', '8', 0,
  /* 1013 */ 'M', 'F', 'O', 'C', 'R', 'F', '8', 0,
  /* 1021 */ 'M', 'T', 'O', 'C', 'R', 'F', '8', 0,
  /* 1029 */ 'M', 'T', 'C', 'R', 'F', '8', 0,
  /* 1036 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 1049 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 1059 */ 'N', 'E', 'G', '8', 0,
  /* 1064 */ 'E', 'X', 'T', 'S', 'H', '8', 0,
  /* 1071 */ 'S', 'T', 'H', '8', 0,
  /* 1076 */ 'A', 'D', 'D', 'I', '8', 0,
  /* 1082 */ 'M', 'U', 'L', 'L', 'I', '8', 0,
  /* 1089 */ 'R', 'L', 'W', 'I', 'M', 'I', '8', 0,
  /* 1097 */ 'X', 'O', 'R', 'I', '8', 0,
  /* 1103 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 1122 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 1135 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 1154 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1174 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1193 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1208 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1227 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 1246 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 1264 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 1274 */ 'B', 'L', '8', 0,
  /* 1278 */ 'I', 'S', 'E', 'L', '8', 0,
  /* 1284 */ 'B', 'C', 'T', 'R', 'L', '8', 0,
  /* 1291 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 1299 */ 'B', 'C', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 1308 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 0,
  /* 1316 */ 'R', 'L', 'W', 'N', 'M', '8', 0,
  /* 1323 */ 'M', 'F', 'C', 'R', '8', 0,
  /* 1329 */ 'B', 'L', 'R', '8', 0,
  /* 1334 */ 'M', 'F', 'L', 'R', '8', 0,
  /* 1340 */ 'M', 'T', 'L', 'R', '8', 0,
  /* 1346 */ 'B', 'D', 'Z', 'L', 'R', '8', 0,
  /* 1353 */ 'B', 'D', 'N', 'Z', 'L', 'R', '8', 0,
  /* 1361 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 1373 */ 'N', 'O', 'R', '8', 0,
  /* 1378 */ 'X', 'O', 'R', '8', 0,
  /* 1383 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', '8', 0,
  /* 1393 */ 'B', 'C', 'C', 'T', 'R', '8', 0,
  /* 1400 */ 'B', 'C', 'C', 'C', 'T', 'R', '8', 0,
  /* 1408 */ 'M', 'F', 'C', 'T', 'R', '8', 0,
  /* 1415 */ 'M', 'T', 'C', 'T', 'R', '8', 0,
  /* 1422 */ 'A', 'D', 'D', 'I', 'S', '8', 0,
  /* 1429 */ 'L', 'I', 'S', '8', 0,
  /* 1434 */ 'X', 'O', 'R', 'I', 'S', '8', 0,
  /* 1441 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 1457 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 1473 */ 'L', 'H', 'A', 'U', '8', 0,
  /* 1479 */ 'S', 'T', 'B', 'U', '8', 0,
  /* 1485 */ 'S', 'T', 'H', 'U', '8', 0,
  /* 1491 */ 'S', 'T', 'W', 'U', '8', 0,
  /* 1497 */ 'L', 'B', 'Z', 'U', '8', 0,
  /* 1503 */ 'L', 'H', 'Z', 'U', '8', 0,
  /* 1509 */ 'L', 'W', 'Z', 'U', '8', 0,
  /* 1515 */ 'E', 'Q', 'V', '8', 0,
  /* 1520 */ 'S', 'L', 'W', '8', 0,
  /* 1525 */ 'S', 'R', 'W', '8', 0,
  /* 1530 */ 'S', 'T', 'W', '8', 0,
  /* 1535 */ 'C', 'N', 'T', 'L', 'Z', 'W', '8', 0,
  /* 1543 */ 'L', 'H', 'A', 'X', '8', 0,
  /* 1549 */ 'S', 'T', 'B', 'X', '8', 0,
  /* 1555 */ 'S', 'T', 'H', 'X', '8', 0,
  /* 1561 */ 'L', 'H', 'B', 'R', 'X', '8', 0,
  /* 1568 */ 'L', 'W', 'B', 'R', 'X', '8', 0,
  /* 1575 */ 'L', 'H', 'A', 'U', 'X', '8', 0,
  /* 1582 */ 'S', 'T', 'B', 'U', 'X', '8', 0,
  /* 1589 */ 'S', 'T', 'H', 'U', 'X', '8', 0,
  /* 1596 */ 'S', 'T', 'W', 'U', 'X', '8', 0,
  /* 1603 */ 'L', 'B', 'Z', 'U', 'X', '8', 0,
  /* 1610 */ 'L', 'H', 'Z', 'U', 'X', '8', 0,
  /* 1617 */ 'L', 'W', 'Z', 'U', 'X', '8', 0,
  /* 1624 */ 'S', 'T', 'W', 'X', '8', 0,
  /* 1630 */ 'L', 'B', 'Z', 'X', '8', 0,
  /* 1636 */ 'L', 'H', 'Z', 'X', '8', 0,
  /* 1642 */ 'L', 'W', 'Z', 'X', '8', 0,
  /* 1648 */ 'L', 'B', 'Z', '8', 0,
  /* 1653 */ 'B', 'D', 'Z', '8', 0,
  /* 1658 */ 'L', 'H', 'Z', '8', 0,
  /* 1663 */ 'B', 'D', 'N', 'Z', '8', 0,
  /* 1669 */ 'L', 'W', 'Z', '8', 0,
  /* 1674 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', '8', 0,
  /* 1686 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', '8', 0,
  /* 1698 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', '8', 0,
  /* 1710 */ 'A', 'N', 'D', 'I', 'o', '8', 0,
  /* 1717 */ 'A', 'N', 'D', 'I', 'S', 'o', '8', 0,
  /* 1725 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'F', 'A', 'A', 0,
  /* 1737 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'F', 'A', 'A', 0,
  /* 1749 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 'A', 'A', 0,
  /* 1759 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 'A', 'A', 0,
  /* 1769 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'I', 'A', 'A', 0,
  /* 1781 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'I', 'A', 'A', 0,
  /* 1793 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 'A', 'A', 0,
  /* 1803 */ 'E', 'V', 'M', 'H', 'E', 'G', 'U', 'M', 'I', 'A', 'A', 0,
  /* 1815 */ 'E', 'V', 'M', 'H', 'O', 'G', 'U', 'M', 'I', 'A', 'A', 0,
  /* 1827 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 'A', 'A', 0,
  /* 1837 */ 'D', 'C', 'B', 'A', 0,
  /* 1842 */ 'T', 'A', 'I', 'L', 'B', 'A', 0,
  /* 1849 */ 'L', 'D', 't', 'o', 'c', 'B', 'A', 0,
  /* 1857 */ 'g', 'B', 'C', 'A', 0,
  /* 1862 */ 'B', 'C', 'C', 'A', 0,
  /* 1867 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 'A', 0,
  /* 1877 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'F', 'A', 0,
  /* 1887 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 'A', 0,
  /* 1897 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 'A', 0,
  /* 1906 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 'A', 0,
  /* 1916 */ 'E', 'V', 'M', 'W', 'H', 'S', 'S', 'F', 'A', 0,
  /* 1926 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 'A', 0,
  /* 1936 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 'A', 0,
  /* 1945 */ 'L', 'H', 'A', 0,
  /* 1949 */ 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 1960 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 1973 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 1986 */ 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 2002 */ 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 2016 */ 'S', 'L', 'B', 'I', 'A', 0,
  /* 2022 */ 'T', 'L', 'B', 'I', 'A', 0,
  /* 2028 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 'A', 0,
  /* 2038 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'I', 'A', 0,
  /* 2048 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 'A', 0,
  /* 2058 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 'A', 0,
  /* 2067 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 'A', 0,
  /* 2077 */ 'E', 'V', 'M', 'W', 'H', 'U', 'M', 'I', 'A', 0,
  /* 2087 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 'A', 0,
  /* 2097 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 'A', 0,
  /* 2107 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 'A', 0,
  /* 2116 */ 'B', 'L', 'A', 0,
  /* 2120 */ 'g', 'B', 'C', 'L', 'A', 0,
  /* 2126 */ 'B', 'C', 'C', 'L', 'A', 0,
  /* 2132 */ 'B', 'D', 'Z', 'L', 'A', 0,
  /* 2138 */ 'B', 'D', 'N', 'Z', 'L', 'A', 0,
  /* 2145 */ 'E', 'V', 'M', 'R', 'A', 0,
  /* 2151 */ 'L', 'W', 'A', 0,
  /* 2155 */ 'B', 'D', 'Z', 'A', 0,
  /* 2160 */ 'B', 'D', 'N', 'Z', 'A', 0,
  /* 2166 */ 'V', '_', 'S', 'E', 'T', '0', 'B', 0,
  /* 2174 */ 'V', 'S', 'R', 'A', 'B', 0,
  /* 2180 */ 'V', 'M', 'R', 'G', 'H', 'B', 0,
  /* 2187 */ 'V', 'M', 'R', 'G', 'L', 'B', 0,
  /* 2194 */ 'T', 'A', 'I', 'L', 'B', 0,
  /* 2200 */ 'V', 'R', 'L', 'B', 0,
  /* 2205 */ 'V', 'S', 'L', 'B', 0,
  /* 2210 */ 'C', 'M', 'P', 'B', 0,
  /* 2215 */ 'V', 'S', 'R', 'B', 0,
  /* 2220 */ 'V', 'M', 'U', 'L', 'E', 'S', 'B', 0,
  /* 2228 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'B', 0,
  /* 2242 */ 'V', 'A', 'V', 'G', 'S', 'B', 0,
  /* 2249 */ 'V', 'U', 'P', 'K', 'H', 'S', 'B', 0,
  /* 2257 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'B', 0,
  /* 2266 */ 'V', 'U', 'P', 'K', 'L', 'S', 'B', 0,
  /* 2274 */ 'V', 'M', 'I', 'N', 'S', 'B', 0,
  /* 2281 */ 'V', 'M', 'U', 'L', 'O', 'S', 'B', 0,
  /* 2289 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 0,
  /* 2298 */ 'E', 'V', 'E', 'X', 'T', 'S', 'B', 0,
  /* 2306 */ 'V', 'M', 'A', 'X', 'S', 'B', 0,
  /* 2313 */ 'M', 'F', 'T', 'B', 0,
  /* 2318 */ 'V', 'S', 'P', 'L', 'T', 'B', 0,
  /* 2325 */ 'S', 'T', 'B', 0,
  /* 2329 */ 'R', 'e', 'a', 'd', 'T', 'B', 0,
  /* 2336 */ 'V', 'M', 'U', 'L', 'E', 'U', 'B', 0,
  /* 2344 */ 'V', 'A', 'V', 'G', 'U', 'B', 0,
  /* 2351 */ 'V', 'M', 'I', 'N', 'U', 'B', 0,
  /* 2358 */ 'V', 'M', 'U', 'L', 'O', 'U', 'B', 0,
  /* 2366 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 0,
  /* 2375 */ 'F', 'S', 'U', 'B', 0,
  /* 2380 */ 'F', 'M', 'S', 'U', 'B', 0,
  /* 2386 */ 'F', 'N', 'M', 'S', 'U', 'B', 0,
  /* 2393 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 0,
  /* 2402 */ 'V', 'M', 'A', 'X', 'U', 'B', 0,
  /* 2409 */ 'g', 'B', 'C', 0,
  /* 2413 */ 'B', 'C', 'C', 0,
  /* 2417 */ 'A', 'D', 'D', 'C', 0,
  /* 2422 */ 'X', 'X', 'L', 'A', 'N', 'D', 'C', 0,
  /* 2430 */ 'C', 'R', 'A', 'N', 'D', 'C', 0,
  /* 2437 */ 'E', 'V', 'A', 'N', 'D', 'C', 0,
  /* 2444 */ 'S', 'U', 'B', 'F', 'C', 0,
  /* 2450 */ 'S', 'U', 'B', 'I', 'C', 0,
  /* 2456 */ 'A', 'D', 'D', 'I', 'C', 0,
  /* 2462 */ 'R', 'L', 'D', 'I', 'C', 0,
  /* 2468 */ 'S', 'U', 'B', 'F', 'I', 'C', 0,
  /* 2475 */ 'X', 'S', 'R', 'D', 'P', 'I', 'C', 0,
  /* 2483 */ 'X', 'V', 'R', 'D', 'P', 'I', 'C', 0,
  /* 2491 */ 'X', 'V', 'R', 'S', 'P', 'I', 'C', 0,
  /* 2499 */ 'B', 'R', 'I', 'N', 'C', 0,
  /* 2505 */ 'T', 'L', 'B', 'S', 'Y', 'N', 'C', 0,
  /* 2513 */ 'I', 'S', 'Y', 'N', 'C', 0,
  /* 2519 */ 'M', 'S', 'Y', 'N', 'C', 0,
  /* 2525 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 2534 */ 'F', 'R', 'A', 'M', 'E', '_', 'A', 'L', 'L', 'O', 'C', 0,
  /* 2546 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 2562 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 2575 */ 'C', 'R', 'O', 'R', 'C', 0,
  /* 2581 */ 'E', 'V', 'O', 'R', 'C', 0,
  /* 2587 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 2602 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 2614 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'R', 'C', 0,
  /* 2629 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'R', 'C', 0,
  /* 2641 */ 'S', 'C', 0,
  /* 2644 */ 'T', 'L', 'B', 'S', 'X', '2', 'D', 0,
  /* 2652 */ 'S', 'R', 'A', 'D', 0,
  /* 2657 */ 'F', 'A', 'D', 'D', 0,
  /* 2662 */ 'F', 'M', 'A', 'D', 'D', 0,
  /* 2668 */ 'F', 'N', 'M', 'A', 'D', 'D', 0,
  /* 2675 */ 'E', 'V', 'L', 'D', 'D', 0,
  /* 2681 */ 'E', 'V', 'S', 'T', 'D', 'D', 0,
  /* 2688 */ 'L', 'F', 'D', 0,
  /* 2692 */ 'S', 'T', 'F', 'D', 0,
  /* 2697 */ 'F', 'N', 'E', 'G', 'D', 0,
  /* 2703 */ 'M', 'U', 'L', 'H', 'D', 0,
  /* 2709 */ 'F', 'C', 'F', 'I', 'D', 0,
  /* 2715 */ 'R', 'F', 'I', 'D', 0,
  /* 2720 */ 'F', 'C', 'T', 'I', 'D', 0,
  /* 2726 */ 'T', 'L', 'B', 'L', 'D', 0,
  /* 2732 */ 'F', 'S', 'E', 'L', 'D', 0,
  /* 2738 */ 'M', 'U', 'L', 'L', 'D', 0,
  /* 2744 */ 'C', 'M', 'P', 'L', 'D', 0,
  /* 2750 */ 'S', 'L', 'D', 0,
  /* 2754 */ 'F', 'R', 'I', 'M', 'D', 0,
  /* 2760 */ 'X', 'X', 'L', 'A', 'N', 'D', 0,
  /* 2767 */ 'C', 'R', 'N', 'A', 'N', 'D', 0,
  /* 2774 */ 'E', 'V', 'N', 'A', 'N', 'D', 0,
  /* 2781 */ 'C', 'R', 'A', 'N', 'D', 0,
  /* 2787 */ 'E', 'V', 'A', 'N', 'D', 0,
  /* 2793 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2806 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 0,
  /* 2814 */ 'F', 'R', 'I', 'N', 'D', 0,
  /* 2820 */ 'F', 'R', 'I', 'P', 'D', 0,
  /* 2826 */ 'C', 'M', 'P', 'D', 0,
  /* 2831 */ 'L', 'O', 'A', 'D', '_', 'S', 'T', 'A', 'C', 'K', '_', 'G', 'U', 'A', 'R', 'D', 0,
  /* 2848 */ 'M', 'T', 'M', 'S', 'R', 'D', 0,
  /* 2855 */ 'F', 'A', 'B', 'S', 'D', 0,
  /* 2861 */ 'F', 'N', 'A', 'B', 'S', 'D', 0,
  /* 2868 */ 'P', 'O', 'P', 'C', 'N', 'T', 'D', 0,
  /* 2876 */ 'S', 'T', 'D', 0,
  /* 2880 */ 'F', 'C', 'M', 'P', 'U', 'D', 0,
  /* 2887 */ 'D', 'I', 'V', 'D', 0,
  /* 2892 */ 'F', 'R', 'I', 'Z', 'D', 0,
  /* 2898 */ 'C', 'N', 'T', 'L', 'Z', 'D', 0,
  /* 2905 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 2918 */ 'A', 'D', 'D', 'E', 0,
  /* 2923 */ 'S', 'L', 'B', 'M', 'F', 'E', 'E', 0,
  /* 2931 */ 'W', 'R', 'T', 'E', 'E', 0,
  /* 2937 */ 'S', 'U', 'B', 'F', 'E', 0,
  /* 2943 */ 'E', 'V', 'L', 'W', 'H', 'E', 0,
  /* 2950 */ 'E', 'V', 'S', 'T', 'W', 'H', 'E', 0,
  /* 2958 */ 'S', 'L', 'B', 'I', 'E', 0,
  /* 2964 */ 'T', 'L', 'B', 'I', 'E', 0,
  /* 2970 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2977 */ 'A', 'D', 'D', 'M', 'E', 0,
  /* 2983 */ 'S', 'U', 'B', 'F', 'M', 'E', 0,
  /* 2990 */ 'T', 'L', 'B', 'R', 'E', 0,
  /* 2996 */ 'F', 'R', 'E', 0,
  /* 3000 */ 'S', 'L', 'B', 'M', 'T', 'E', 0,
  /* 3007 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 0,
  /* 3015 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3025 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 3034 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 3043 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 3058 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 3072 */ 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 3085 */ 'T', 'L', 'B', 'W', 'E', 0,
  /* 3091 */ 'E', 'V', 'S', 'T', 'W', 'W', 'E', 0,
  /* 3099 */ 'A', 'D', 'D', 'Z', 'E', 0,
  /* 3105 */ 'S', 'U', 'B', 'F', 'Z', 'E', 0,
  /* 3112 */ 'D', 'C', 'B', 'F', 0,
  /* 3117 */ 'S', 'U', 'B', 'F', 0,
  /* 3122 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 3135 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 0,
  /* 3144 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'F', 0,
  /* 3153 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 0,
  /* 3162 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 0,
  /* 3170 */ 'M', 'C', 'R', 'F', 0,
  /* 3175 */ 'M', 'F', 'O', 'C', 'R', 'F', 0,
  /* 3182 */ 'M', 'T', 'O', 'C', 'R', 'F', 0,
  /* 3189 */ 'M', 'T', 'C', 'R', 'F', 0,
  /* 3195 */ 'M', 'T', 'F', 'S', 'F', 0,
  /* 3201 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 0,
  /* 3210 */ 'E', 'V', 'M', 'W', 'H', 'S', 'S', 'F', 0,
  /* 3219 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 0,
  /* 3228 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 0,
  /* 3236 */ 'E', 'V', 'N', 'E', 'G', 0,
  /* 3242 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 3257 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 3271 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 3285 */ 'V', '_', 'S', 'E', 'T', '0', 'H', 0,
  /* 3293 */ 'V', 'S', 'R', 'A', 'H', 0,
  /* 3299 */ 'E', 'V', 'L', 'D', 'H', 0,
  /* 3305 */ 'E', 'V', 'S', 'T', 'D', 'H', 0,
  /* 3312 */ 'V', 'M', 'R', 'G', 'H', 'H', 0,
  /* 3319 */ 'V', 'M', 'R', 'G', 'L', 'H', 0,
  /* 3326 */ 'V', 'R', 'L', 'H', 0,
  /* 3331 */ 'V', 'S', 'L', 'H', 0,
  /* 3336 */ 'V', 'S', 'R', 'H', 0,
  /* 3341 */ 'V', 'M', 'U', 'L', 'E', 'S', 'H', 0,
  /* 3349 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'H', 0,
  /* 3363 */ 'V', 'A', 'V', 'G', 'S', 'H', 0,
  /* 3370 */ 'V', 'U', 'P', 'K', 'H', 'S', 'H', 0,
  /* 3378 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'H', 0,
  /* 3387 */ 'V', 'U', 'P', 'K', 'L', 'S', 'H', 0,
  /* 3395 */ 'V', 'M', 'I', 'N', 'S', 'H', 0,
  /* 3402 */ 'V', 'M', 'U', 'L', 'O', 'S', 'H', 0,
  /* 3410 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 0,
  /* 3419 */ 'E', 'V', 'E', 'X', 'T', 'S', 'H', 0,
  /* 3427 */ 'V', 'M', 'A', 'X', 'S', 'H', 0,
  /* 3434 */ 'V', 'S', 'P', 'L', 'T', 'H', 0,
  /* 3441 */ 'S', 'T', 'H', 0,
  /* 3445 */ 'V', 'M', 'U', 'L', 'E', 'U', 'H', 0,
  /* 3453 */ 'V', 'A', 'V', 'G', 'U', 'H', 0,
  /* 3460 */ 'V', 'M', 'I', 'N', 'U', 'H', 0,
  /* 3467 */ 'V', 'M', 'U', 'L', 'O', 'U', 'H', 0,
  /* 3475 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 0,
  /* 3484 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 0,
  /* 3493 */ 'V', 'M', 'A', 'X', 'U', 'H', 0,
  /* 3500 */ 'D', 'C', 'B', 'I', 0,
  /* 3505 */ 'I', 'C', 'B', 'I', 0,
  /* 3510 */ 'S', 'U', 'B', 'I', 0,
  /* 3515 */ 'D', 'C', 'C', 'C', 'I', 0,
  /* 3521 */ 'I', 'C', 'C', 'C', 'I', 0,
  /* 3527 */ 'R', 'F', 'C', 'I', 0,
  /* 3532 */ 'R', 'F', 'M', 'C', 'I', 0,
  /* 3538 */ 'S', 'R', 'A', 'D', 'I', 0,
  /* 3544 */ 'A', 'D', 'D', 'I', 0,
  /* 3549 */ 'R', 'F', 'D', 'I', 0,
  /* 3554 */ 'C', 'M', 'P', 'L', 'D', 'I', 0,
  /* 3561 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 0,
  /* 3570 */ 'E', 'X', 'T', 'L', 'D', 'I', 0,
  /* 3577 */ 'X', 'X', 'P', 'E', 'R', 'M', 'D', 'I', 0,
  /* 3586 */ 'C', 'M', 'P', 'D', 'I', 0,
  /* 3592 */ 'C', 'L', 'R', 'R', 'D', 'I', 0,
  /* 3599 */ 'I', 'N', 'S', 'R', 'D', 'I', 0,
  /* 3606 */ 'R', 'O', 'T', 'R', 'D', 'I', 0,
  /* 3613 */ 'E', 'X', 'T', 'R', 'D', 'I', 0,
  /* 3620 */ 'T', 'D', 'I', 0,
  /* 3624 */ 'W', 'R', 'T', 'E', 'E', 'I', 0,
  /* 3631 */ 'R', 'F', 'I', 0,
  /* 3635 */ 'E', 'V', 'S', 'P', 'L', 'A', 'T', 'F', 'I', 0,
  /* 3645 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'H', 'I', 0,
  /* 3655 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'L', 'O', 'H', 'I', 0,
  /* 3667 */ 'P', 'H', 'I', 0,
  /* 3671 */ 'T', 'L', 'B', 'L', 'I', 0,
  /* 3677 */ 'M', 'U', 'L', 'L', 'I', 0,
  /* 3683 */ 'R', 'L', 'D', 'I', 'M', 'I', 0,
  /* 3690 */ 'R', 'L', 'W', 'I', 'M', 'I', 0,
  /* 3697 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 0,
  /* 3706 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'I', 0,
  /* 3715 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 0,
  /* 3724 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 0,
  /* 3732 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 0,
  /* 3741 */ 'E', 'V', 'M', 'W', 'H', 'U', 'M', 'I', 0,
  /* 3750 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 0,
  /* 3759 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 0,
  /* 3768 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 0,
  /* 3776 */ 'V', 'S', 'L', 'D', 'O', 'I', 0,
  /* 3783 */ 'X', 'S', 'R', 'D', 'P', 'I', 0,
  /* 3790 */ 'X', 'V', 'R', 'D', 'P', 'I', 0,
  /* 3797 */ 'X', 'V', 'R', 'S', 'P', 'I', 0,
  /* 3804 */ 'X', 'O', 'R', 'I', 0,
  /* 3809 */ 'E', 'V', 'S', 'P', 'L', 'A', 'T', 'I', 0,
  /* 3818 */ 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 3827 */ 'S', 'R', 'A', 'W', 'I', 0,
  /* 3833 */ 'X', 'X', 'S', 'L', 'D', 'W', 'I', 0,
  /* 3841 */ 'C', 'M', 'P', 'L', 'W', 'I', 0,
  /* 3848 */ 'E', 'V', 'R', 'L', 'W', 'I', 0,
  /* 3855 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 0,
  /* 3864 */ 'I', 'N', 'S', 'L', 'W', 'I', 0,
  /* 3871 */ 'E', 'V', 'S', 'L', 'W', 'I', 0,
  /* 3878 */ 'E', 'X', 'T', 'L', 'W', 'I', 0,
  /* 3885 */ 'C', 'M', 'P', 'W', 'I', 0,
  /* 3891 */ 'C', 'L', 'R', 'R', 'W', 'I', 0,
  /* 3898 */ 'I', 'N', 'S', 'R', 'W', 'I', 0,
  /* 3905 */ 'R', 'O', 'T', 'R', 'W', 'I', 0,
  /* 3912 */ 'E', 'X', 'T', 'R', 'W', 'I', 0,
  /* 3919 */ 'L', 'S', 'W', 'I', 0,
  /* 3924 */ 'S', 'T', 'S', 'W', 'I', 0,
  /* 3930 */ 'T', 'W', 'I', 0,
  /* 3934 */ 'B', 'L', 0,
  /* 3937 */ 'g', 'B', 'C', 'L', 0,
  /* 3942 */ 'B', 'C', 'C', 'L', 0,
  /* 3947 */ 'R', 'L', 'D', 'C', 'L', 0,
  /* 3953 */ 'R', 'L', 'D', 'I', 'C', 'L', 0,
  /* 3960 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 3969 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 3978 */ 'T', 'L', 'B', 'I', 'E', 'L', 0,
  /* 3985 */ 'I', 'S', 'E', 'L', 0,
  /* 3990 */ 'V', 'S', 'E', 'L', 0,
  /* 3995 */ 'X', 'X', 'S', 'E', 'L', 0,
  /* 4001 */ 'D', 'S', 'S', 'A', 'L', 'L', 0,
  /* 4008 */ 'K', 'I', 'L', 'L', 0,
  /* 4013 */ 'B', 'L', 'R', 'L', 0,
  /* 4018 */ 'g', 'B', 'C', 'L', 'R', 'L', 0,
  /* 4025 */ 'B', 'C', 'C', 'L', 'R', 'L', 0,
  /* 4032 */ 'B', 'D', 'Z', 'L', 'R', 'L', 0,
  /* 4039 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 0,
  /* 4047 */ 'B', 'C', 'T', 'R', 'L', 0,
  /* 4053 */ 'g', 'B', 'C', 'C', 'T', 'R', 'L', 0,
  /* 4061 */ 'B', 'C', 'C', 'C', 'T', 'R', 'L', 0,
  /* 4069 */ 'L', 'V', 'S', 'L', 0,
  /* 4074 */ 'F', 'M', 'U', 'L', 0,
  /* 4079 */ 'L', 'V', 'X', 'L', 0,
  /* 4084 */ 'S', 'T', 'V', 'X', 'L', 0,
  /* 4090 */ 'D', 'C', 'B', 'Z', 'L', 0,
  /* 4096 */ 'B', 'D', 'Z', 'L', 0,
  /* 4101 */ 'B', 'D', 'N', 'Z', 'L', 0,
  /* 4107 */ 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 4114 */ 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 4123 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 4134 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 4145 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 4157 */ 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 4169 */ 'V', 'M', 'S', 'U', 'M', 'M', 'B', 'M', 0,
  /* 4178 */ 'V', 'S', 'U', 'B', 'U', 'B', 'M', 0,
  /* 4186 */ 'V', 'A', 'D', 'D', 'U', 'B', 'M', 0,
  /* 4194 */ 'V', 'M', 'S', 'U', 'M', 'U', 'B', 'M', 0,
  /* 4203 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'M', 0,
  /* 4212 */ 'V', 'S', 'U', 'B', 'U', 'H', 'M', 0,
  /* 4220 */ 'V', 'M', 'L', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 4230 */ 'V', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 4238 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'M', 0,
  /* 4247 */ 'V', 'R', 'F', 'I', 'M', 0,
  /* 4253 */ 'X', 'S', 'R', 'D', 'P', 'I', 'M', 0,
  /* 4261 */ 'X', 'V', 'R', 'D', 'P', 'I', 'M', 0,
  /* 4269 */ 'X', 'V', 'R', 'S', 'P', 'I', 'M', 0,
  /* 4277 */ 'R', 'L', 'W', 'I', 'N', 'M', 0,
  /* 4284 */ 'R', 'L', 'W', 'N', 'M', 0,
  /* 4290 */ 'V', 'P', 'E', 'R', 'M', 0,
  /* 4296 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 4306 */ 'V', 'P', 'K', 'U', 'H', 'U', 'M', 0,
  /* 4314 */ 'V', 'P', 'K', 'U', 'W', 'U', 'M', 0,
  /* 4322 */ 'V', 'S', 'U', 'B', 'U', 'W', 'M', 0,
  /* 4330 */ 'V', 'A', 'D', 'D', 'U', 'W', 'M', 0,
  /* 4338 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'F', 'A', 'N', 0,
  /* 4350 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'F', 'A', 'N', 0,
  /* 4362 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 'A', 'N', 0,
  /* 4372 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 'A', 'N', 0,
  /* 4382 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'I', 'A', 'N', 0,
  /* 4394 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'I', 'A', 'N', 0,
  /* 4406 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 'A', 'N', 0,
  /* 4416 */ 'E', 'V', 'M', 'H', 'E', 'G', 'U', 'M', 'I', 'A', 'N', 0,
  /* 4428 */ 'E', 'V', 'M', 'H', 'O', 'G', 'U', 'M', 'I', 'A', 'N', 0,
  /* 4440 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 'A', 'N', 0,
  /* 4450 */ 'V', 'R', 'F', 'I', 'N', 0,
  /* 4456 */ 'M', 'F', 'S', 'R', 'I', 'N', 0,
  /* 4463 */ 'M', 'T', 'S', 'R', 'I', 'N', 0,
  /* 4470 */ 'C', 'F', 'I', '_', 'I', 'N', 'S', 'T', 'R', 'U', 'C', 'T', 'I', 'O', 'N', 0,
  /* 4486 */ 'A', 'T', 'T', 'N', 0,
  /* 4491 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 4508 */ 'E', 'V', 'S', 'T', 'W', 'H', 'O', 0,
  /* 4516 */ 'E', 'n', 'f', 'o', 'r', 'c', 'e', 'I', 'E', 'I', 'O', 0,
  /* 4528 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'L', 'O', 0,
  /* 4538 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'H', 'I', 'L', 'O', 0,
  /* 4550 */ 'V', 'S', 'L', 'O', 0,
  /* 4555 */ 'V', 'S', 'R', 'O', 0,
  /* 4560 */ 'E', 'V', 'S', 'T', 'W', 'W', 'O', 0,
  /* 4568 */ 'S', 'T', 'A', 'C', 'K', 'M', 'A', 'P', 0,
  /* 4577 */ 'T', 'R', 'A', 'P', 0,
  /* 4582 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 4593 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 4604 */ 'X', 'S', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 4614 */ 'X', 'V', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 4624 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 4635 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 4646 */ 'X', 'S', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 4656 */ 'X', 'V', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 4666 */ 'X', 'S', 'S', 'U', 'B', 'D', 'P', 0,
  /* 4674 */ 'X', 'V', 'S', 'U', 'B', 'D', 'P', 0,
  /* 4682 */ 'X', 'S', 'A', 'D', 'D', 'D', 'P', 0,
  /* 4690 */ 'X', 'V', 'A', 'D', 'D', 'D', 'P', 0,
  /* 4698 */ 'X', 'S', 'C', 'V', 'S', 'X', 'D', 'D', 'P', 0,
  /* 4708 */ 'X', 'V', 'C', 'V', 'S', 'X', 'D', 'D', 'P', 0,
  /* 4718 */ 'X', 'S', 'C', 'V', 'U', 'X', 'D', 'D', 'P', 0,
  /* 4728 */ 'X', 'V', 'C', 'V', 'U', 'X', 'D', 'D', 'P', 0,
  /* 4738 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'D', 'P', 0,
  /* 4748 */ 'X', 'S', 'R', 'E', 'D', 'P', 0,
  /* 4755 */ 'X', 'V', 'R', 'E', 'D', 'P', 0,
  /* 4762 */ 'X', 'S', 'R', 'S', 'Q', 'R', 'T', 'E', 'D', 'P', 0,
  /* 4773 */ 'X', 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'D', 'P', 0,
  /* 4784 */ 'X', 'S', 'N', 'E', 'G', 'D', 'P', 0,
  /* 4792 */ 'X', 'V', 'N', 'E', 'G', 'D', 'P', 0,
  /* 4800 */ 'X', 'S', 'M', 'U', 'L', 'D', 'P', 0,
  /* 4808 */ 'X', 'V', 'M', 'U', 'L', 'D', 'P', 0,
  /* 4816 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 4827 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 4838 */ 'X', 'S', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 4848 */ 'X', 'V', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 4858 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 4869 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 4880 */ 'X', 'S', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 4890 */ 'X', 'V', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 4900 */ 'X', 'S', 'C', 'P', 'S', 'G', 'N', 'D', 'P', 0,
  /* 4910 */ 'X', 'V', 'C', 'P', 'S', 'G', 'N', 'D', 'P', 0,
  /* 4920 */ 'X', 'S', 'M', 'I', 'N', 'D', 'P', 0,
  /* 4928 */ 'X', 'V', 'M', 'I', 'N', 'D', 'P', 0,
  /* 4936 */ 'X', 'S', 'C', 'M', 'P', 'O', 'D', 'P', 0,
  /* 4945 */ 'X', 'S', 'C', 'V', 'S', 'P', 'D', 'P', 0,
  /* 4954 */ 'X', 'V', 'C', 'V', 'S', 'P', 'D', 'P', 0,
  /* 4963 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'D', 'P', 0,
  /* 4973 */ 'X', 'S', 'N', 'A', 'B', 'S', 'D', 'P', 0,
  /* 4982 */ 'X', 'V', 'N', 'A', 'B', 'S', 'D', 'P', 0,
  /* 4991 */ 'X', 'S', 'A', 'B', 'S', 'D', 'P', 0,
  /* 4999 */ 'X', 'V', 'A', 'B', 'S', 'D', 'P', 0,
  /* 5007 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'D', 'P', 0,
  /* 5017 */ 'X', 'S', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 5026 */ 'X', 'S', 'T', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 5036 */ 'X', 'V', 'T', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 5046 */ 'X', 'V', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 5055 */ 'X', 'S', 'C', 'M', 'P', 'U', 'D', 'P', 0,
  /* 5064 */ 'X', 'S', 'D', 'I', 'V', 'D', 'P', 0,
  /* 5072 */ 'X', 'S', 'T', 'D', 'I', 'V', 'D', 'P', 0,
  /* 5081 */ 'X', 'V', 'T', 'D', 'I', 'V', 'D', 'P', 0,
  /* 5090 */ 'X', 'V', 'D', 'I', 'V', 'D', 'P', 0,
  /* 5098 */ 'X', 'V', 'C', 'V', 'S', 'X', 'W', 'D', 'P', 0,
  /* 5108 */ 'X', 'V', 'C', 'V', 'U', 'X', 'W', 'D', 'P', 0,
  /* 5118 */ 'X', 'S', 'M', 'A', 'X', 'D', 'P', 0,
  /* 5126 */ 'X', 'V', 'M', 'A', 'X', 'D', 'P', 0,
  /* 5134 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 0,
  /* 5142 */ 'V', 'N', 'M', 'S', 'U', 'B', 'F', 'P', 0,
  /* 5151 */ 'V', 'S', 'U', 'B', 'F', 'P', 0,
  /* 5158 */ 'V', 'M', 'A', 'D', 'D', 'F', 'P', 0,
  /* 5166 */ 'V', 'A', 'D', 'D', 'F', 'P', 0,
  /* 5173 */ 'V', 'L', 'O', 'G', 'E', 'F', 'P', 0,
  /* 5181 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 0,
  /* 5190 */ 'V', 'R', 'E', 'F', 'P', 0,
  /* 5196 */ 'V', 'E', 'X', 'P', 'T', 'E', 'F', 'P', 0,
  /* 5205 */ 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'F', 'P', 0,
  /* 5215 */ 'V', 'M', 'I', 'N', 'F', 'P', 0,
  /* 5222 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 0,
  /* 5231 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 0,
  /* 5240 */ 'V', 'M', 'A', 'X', 'F', 'P', 0,
  /* 5247 */ 'V', 'R', 'F', 'I', 'P', 0,
  /* 5253 */ 'X', 'S', 'R', 'D', 'P', 'I', 'P', 0,
  /* 5261 */ 'X', 'V', 'R', 'D', 'P', 'I', 'P', 0,
  /* 5269 */ 'X', 'V', 'R', 'S', 'P', 'I', 'P', 0,
  /* 5277 */ 'B', 'L', 'A', '8', '_', 'N', 'O', 'P', 0,
  /* 5286 */ 'B', 'L', '8', '_', 'N', 'O', 'P', 0,
  /* 5294 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 5305 */ 'X', 'V', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 5315 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 5326 */ 'X', 'V', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 5336 */ 'X', 'V', 'S', 'U', 'B', 'S', 'P', 0,
  /* 5344 */ 'X', 'V', 'A', 'D', 'D', 'S', 'P', 0,
  /* 5352 */ 'X', 'V', 'C', 'V', 'S', 'X', 'D', 'S', 'P', 0,
  /* 5362 */ 'X', 'V', 'C', 'V', 'U', 'X', 'D', 'S', 'P', 0,
  /* 5372 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'S', 'P', 0,
  /* 5382 */ 'X', 'V', 'R', 'E', 'S', 'P', 0,
  /* 5389 */ 'X', 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'P', 0,
  /* 5400 */ 'X', 'V', 'N', 'E', 'G', 'S', 'P', 0,
  /* 5408 */ 'X', 'V', 'M', 'U', 'L', 'S', 'P', 0,
  /* 5416 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 5427 */ 'X', 'V', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 5437 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 5448 */ 'X', 'V', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 5458 */ 'X', 'V', 'C', 'P', 'S', 'G', 'N', 'S', 'P', 0,
  /* 5468 */ 'X', 'V', 'M', 'I', 'N', 'S', 'P', 0,
  /* 5476 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'P', 0,
  /* 5485 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'P', 0,
  /* 5494 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'S', 'P', 0,
  /* 5504 */ 'F', 'R', 'S', 'P', 0,
  /* 5509 */ 'X', 'V', 'N', 'A', 'B', 'S', 'S', 'P', 0,
  /* 5518 */ 'X', 'V', 'A', 'B', 'S', 'S', 'P', 0,
  /* 5526 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'P', 0,
  /* 5536 */ 'X', 'V', 'T', 'S', 'Q', 'R', 'T', 'S', 'P', 0,
  /* 5546 */ 'X', 'V', 'S', 'Q', 'R', 'T', 'S', 'P', 0,
  /* 5555 */ 'X', 'V', 'T', 'D', 'I', 'V', 'S', 'P', 0,
  /* 5564 */ 'X', 'V', 'D', 'I', 'V', 'S', 'P', 0,
  /* 5572 */ 'X', 'V', 'C', 'V', 'S', 'X', 'W', 'S', 'P', 0,
  /* 5582 */ 'X', 'V', 'C', 'V', 'U', 'X', 'W', 'S', 'P', 0,
  /* 5592 */ 'X', 'V', 'M', 'A', 'X', 'S', 'P', 0,
  /* 5600 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 5615 */ 'E', 'V', 'C', 'M', 'P', 'E', 'Q', 0,
  /* 5623 */ 'M', 'B', 'A', 'R', 0,
  /* 5628 */ 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 5638 */ 'M', 'F', 'D', 'C', 'R', 0,
  /* 5644 */ 'R', 'L', 'D', 'C', 'R', 0,
  /* 5650 */ 'M', 'T', 'D', 'C', 'R', 0,
  /* 5656 */ 'M', 'F', 'C', 'R', 0,
  /* 5661 */ 'R', 'L', 'D', 'I', 'C', 'R', 0,
  /* 5668 */ 'M', 'F', 'V', 'S', 'C', 'R', 0,
  /* 5675 */ 'M', 'T', 'V', 'S', 'C', 'R', 0,
  /* 5682 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 5693 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 5702 */ 'B', 'L', 'R', 0,
  /* 5706 */ 'g', 'B', 'C', 'L', 'R', 0,
  /* 5712 */ 'B', 'C', 'C', 'L', 'R', 0,
  /* 5718 */ 'M', 'F', 'L', 'R', 0,
  /* 5723 */ 'M', 'T', 'L', 'R', 0,
  /* 5728 */ 'B', 'D', 'Z', 'L', 'R', 0,
  /* 5734 */ 'B', 'D', 'N', 'Z', 'L', 'R', 0,
  /* 5741 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 5752 */ 'M', 'o', 'v', 'e', 'G', 'O', 'T', 't', 'o', 'L', 'R', 0,
  /* 5764 */ 'F', 'M', 'R', 0,
  /* 5768 */ 'X', 'X', 'L', 'O', 'R', 0,
  /* 5774 */ 'X', 'X', 'L', 'N', 'O', 'R', 0,
  /* 5781 */ 'C', 'R', 'N', 'O', 'R', 0,
  /* 5787 */ 'E', 'V', 'N', 'O', 'R', 0,
  /* 5793 */ 'C', 'R', 'O', 'R', 0,
  /* 5798 */ 'E', 'V', 'O', 'R', 0,
  /* 5803 */ 'X', 'X', 'L', 'X', 'O', 'R', 0,
  /* 5810 */ 'C', 'R', 'X', 'O', 'R', 0,
  /* 5816 */ 'E', 'V', 'X', 'O', 'R', 0,
  /* 5822 */ 'M', 'F', 'S', 'P', 'R', 0,
  /* 5828 */ 'M', 'T', 'S', 'P', 'R', 0,
  /* 5834 */ 'M', 'F', 'S', 'R', 0,
  /* 5839 */ 'M', 'F', 'M', 'S', 'R', 0,
  /* 5845 */ 'M', 'T', 'M', 'S', 'R', 0,
  /* 5851 */ 'M', 'T', 'S', 'R', 0,
  /* 5856 */ 'L', 'V', 'S', 'R', 0,
  /* 5861 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', 0,
  /* 5870 */ 'g', 'B', 'C', 'C', 'T', 'R', 0,
  /* 5877 */ 'B', 'C', 'C', 'C', 'T', 'R', 0,
  /* 5884 */ 'M', 'F', 'C', 'T', 'R', 0,
  /* 5890 */ 'M', 'T', 'C', 'T', 'R', 0,
  /* 5896 */ 'E', 'V', 'A', 'B', 'S', 0,
  /* 5902 */ 'V', 'S', 'U', 'M', '4', 'S', 'B', 'S', 0,
  /* 5911 */ 'V', 'S', 'U', 'B', 'S', 'B', 'S', 0,
  /* 5919 */ 'V', 'A', 'D', 'D', 'S', 'B', 'S', 0,
  /* 5927 */ 'V', 'S', 'U', 'M', '4', 'U', 'B', 'S', 0,
  /* 5936 */ 'V', 'S', 'U', 'B', 'U', 'B', 'S', 0,
  /* 5944 */ 'V', 'A', 'D', 'D', 'U', 'B', 'S', 0,
  /* 5952 */ 'F', 'S', 'U', 'B', 'S', 0,
  /* 5958 */ 'F', 'M', 'S', 'U', 'B', 'S', 0,
  /* 5965 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 0,
  /* 5973 */ 'F', 'A', 'D', 'D', 'S', 0,
  /* 5979 */ 'F', 'M', 'A', 'D', 'D', 'S', 0,
  /* 5986 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 0,
  /* 5994 */ 'F', 'C', 'F', 'I', 'D', 'S', 0,
  /* 6001 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'D', 'S', 0,
  /* 6012 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'X', 'D', 'S', 0,
  /* 6023 */ 'X', 'V', 'C', 'V', 'S', 'P', 'S', 'X', 'D', 'S', 0,
  /* 6034 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'D', 'S', 0,
  /* 6045 */ 'X', 'V', 'C', 'V', 'D', 'P', 'U', 'X', 'D', 'S', 0,
  /* 6056 */ 'X', 'V', 'C', 'V', 'S', 'P', 'U', 'X', 'D', 'S', 0,
  /* 6067 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 0,
  /* 6080 */ 'F', 'R', 'E', 'S', 0,
  /* 6085 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 0,
  /* 6094 */ 'M', 'F', 'F', 'S', 0,
  /* 6099 */ 'L', 'F', 'S', 0,
  /* 6103 */ 'S', 'T', 'F', 'S', 0,
  /* 6108 */ 'F', 'N', 'E', 'G', 'S', 0,
  /* 6114 */ 'V', 'S', 'U', 'M', '4', 'S', 'H', 'S', 0,
  /* 6123 */ 'V', 'S', 'U', 'B', 'S', 'H', 'S', 0,
  /* 6131 */ 'V', 'M', 'H', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 6141 */ 'V', 'M', 'H', 'R', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 6152 */ 'V', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 6160 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'S', 0,
  /* 6169 */ 'V', 'S', 'U', 'B', 'U', 'H', 'S', 0,
  /* 6177 */ 'V', 'A', 'D', 'D', 'U', 'H', 'S', 0,
  /* 6185 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'S', 0,
  /* 6194 */ 'S', 'U', 'B', 'I', 'S', 0,
  /* 6200 */ 'A', 'D', 'D', 'I', 'S', 0,
  /* 6206 */ 'L', 'I', 'S', 0,
  /* 6210 */ 'X', 'O', 'R', 'I', 'S', 0,
  /* 6216 */ 'E', 'V', 'S', 'R', 'W', 'I', 'S', 0,
  /* 6224 */ 'F', 'S', 'E', 'L', 'S', 0,
  /* 6230 */ 'A', 'D', 'D', '4', 'T', 'L', 'S', 0,
  /* 6238 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', 0,
  /* 6246 */ 'B', 'L', '8', '_', 'T', 'L', 'S', 0,
  /* 6254 */ 'B', 'L', '_', 'T', 'L', 'S', 0,
  /* 6261 */ 'B', 'L', '8', '_', 'N', 'O', 'P', '_', 'T', 'L', 'S', 0,
  /* 6273 */ 'F', 'M', 'U', 'L', 'S', 0,
  /* 6279 */ 'F', 'R', 'I', 'M', 'S', 0,
  /* 6285 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 0,
  /* 6293 */ 'F', 'R', 'I', 'N', 'S', 0,
  /* 6299 */ 'E', 'V', 'L', 'W', 'H', 'O', 'S', 0,
  /* 6307 */ 'F', 'R', 'I', 'P', 'S', 0,
  /* 6313 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 6330 */ 'F', 'A', 'B', 'S', 'S', 0,
  /* 6336 */ 'F', 'N', 'A', 'B', 'S', 'S', 0,
  /* 6343 */ 'D', 'S', 'S', 0,
  /* 6347 */ 'V', 'P', 'K', 'S', 'H', 'S', 'S', 0,
  /* 6355 */ 'V', 'P', 'K', 'S', 'W', 'S', 'S', 0,
  /* 6363 */ 'E', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 0,
  /* 6372 */ 'E', 'V', 'C', 'M', 'P', 'L', 'T', 'S', 0,
  /* 6381 */ 'F', 'S', 'Q', 'R', 'T', 'S', 0,
  /* 6388 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 0,
  /* 6396 */ 'V', 'P', 'K', 'S', 'H', 'U', 'S', 0,
  /* 6404 */ 'V', 'P', 'K', 'U', 'H', 'U', 'S', 0,
  /* 6412 */ 'F', 'C', 'M', 'P', 'U', 'S', 0,
  /* 6419 */ 'V', 'P', 'K', 'S', 'W', 'U', 'S', 0,
  /* 6427 */ 'V', 'P', 'K', 'U', 'W', 'U', 'S', 0,
  /* 6435 */ 'F', 'D', 'I', 'V', 'S', 0,
  /* 6441 */ 'E', 'V', 'S', 'R', 'W', 'S', 0,
  /* 6448 */ 'V', 'S', 'U', 'M', '2', 'S', 'W', 'S', 0,
  /* 6457 */ 'V', 'S', 'U', 'B', 'S', 'W', 'S', 0,
  /* 6465 */ 'V', 'A', 'D', 'D', 'S', 'W', 'S', 0,
  /* 6473 */ 'V', 'S', 'U', 'M', 'S', 'W', 'S', 0,
  /* 6481 */ 'V', 'S', 'U', 'B', 'U', 'W', 'S', 0,
  /* 6489 */ 'V', 'A', 'D', 'D', 'U', 'W', 'S', 0,
  /* 6497 */ 'E', 'V', 'D', 'I', 'V', 'W', 'S', 0,
  /* 6505 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'W', 'S', 0,
  /* 6516 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'X', 'W', 'S', 0,
  /* 6527 */ 'X', 'V', 'C', 'V', 'S', 'P', 'S', 'X', 'W', 'S', 0,
  /* 6538 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'W', 'S', 0,
  /* 6549 */ 'X', 'V', 'C', 'V', 'D', 'P', 'U', 'X', 'W', 'S', 0,
  /* 6560 */ 'X', 'V', 'C', 'V', 'S', 'P', 'U', 'X', 'W', 'S', 0,
  /* 6571 */ 'V', 'C', 'T', 'S', 'X', 'S', 0,
  /* 6578 */ 'V', 'C', 'T', 'U', 'X', 'S', 0,
  /* 6585 */ 'F', 'R', 'I', 'Z', 'S', 0,
  /* 6591 */ 'E', 'V', 'L', 'H', 'H', 'E', 'S', 'P', 'L', 'A', 'T', 0,
  /* 6603 */ 'E', 'V', 'L', 'W', 'H', 'S', 'P', 'L', 'A', 'T', 0,
  /* 6614 */ 'E', 'V', 'L', 'H', 'H', 'O', 'S', 'S', 'P', 'L', 'A', 'T', 0,
  /* 6627 */ 'E', 'V', 'L', 'H', 'H', 'O', 'U', 'S', 'P', 'L', 'A', 'T', 0,
  /* 6640 */ 'E', 'V', 'L', 'W', 'W', 'S', 'P', 'L', 'A', 'T', 0,
  /* 6651 */ 'D', 'C', 'B', 'T', 0,
  /* 6656 */ 'I', 'C', 'B', 'T', 0,
  /* 6661 */ 'C', 'R', '6', 'S', 'E', 'T', 0,
  /* 6668 */ 'C', 'R', '6', 'U', 'N', 'S', 'E', 'T', 0,
  /* 6677 */ 'C', 'R', 'U', 'N', 'S', 'E', 'T', 0,
  /* 6685 */ 'C', 'R', 'S', 'E', 'T', 0,
  /* 6691 */ 'W', 'A', 'I', 'T', 0,
  /* 6696 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 6710 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 6722 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 6737 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 6752 */ 'S', 'T', 'A', 'T', 'E', 'P', 'O', 'I', 'N', 'T', 0,
  /* 6763 */ 'P', 'A', 'T', 'C', 'H', 'P', 'O', 'I', 'N', 'T', 0,
  /* 6774 */ 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 6783 */ 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 6795 */ 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 6804 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 6819 */ 'F', 'S', 'Q', 'R', 'T', 0,
  /* 6825 */ 'D', 'C', 'B', 'S', 'T', 0,
  /* 6831 */ 'D', 'S', 'T', 0,
  /* 6835 */ 'D', 'C', 'B', 'T', 'S', 'T', 0,
  /* 6842 */ 'D', 'S', 'T', 'S', 'T', 0,
  /* 6848 */ 'D', 'S', 'T', 'T', 0,
  /* 6853 */ 'D', 'S', 'T', 'S', 'T', 'T', 0,
  /* 6860 */ 'L', 'H', 'A', 'U', 0,
  /* 6865 */ 'S', 'T', 'B', 'U', 0,
  /* 6870 */ 'L', 'F', 'D', 'U', 0,
  /* 6875 */ 'S', 'T', 'F', 'D', 'U', 0,
  /* 6881 */ 'M', 'U', 'L', 'H', 'D', 'U', 0,
  /* 6888 */ 'F', 'C', 'F', 'I', 'D', 'U', 0,
  /* 6895 */ 'L', 'D', 'U', 0,
  /* 6899 */ 'S', 'T', 'D', 'U', 0,
  /* 6904 */ 'D', 'I', 'V', 'D', 'U', 0,
  /* 6910 */ 'S', 'T', 'H', 'U', 0,
  /* 6915 */ 'E', 'V', 'S', 'R', 'W', 'I', 'U', 0,
  /* 6923 */ 'E', 'V', 'L', 'W', 'H', 'O', 'U', 0,
  /* 6931 */ 'L', 'F', 'S', 'U', 0,
  /* 6936 */ 'S', 'T', 'F', 'S', 'U', 0,
  /* 6942 */ 'E', 'V', 'C', 'M', 'P', 'G', 'T', 'U', 0,
  /* 6951 */ 'E', 'V', 'C', 'M', 'P', 'L', 'T', 'U', 0,
  /* 6960 */ 'M', 'U', 'L', 'H', 'W', 'U', 0,
  /* 6967 */ 'E', 'V', 'S', 'R', 'W', 'U', 0,
  /* 6974 */ 'S', 'T', 'W', 'U', 0,
  /* 6979 */ 'E', 'V', 'D', 'I', 'V', 'W', 'U', 0,
  /* 6987 */ 'L', 'B', 'Z', 'U', 0,
  /* 6992 */ 'L', 'H', 'Z', 'U', 0,
  /* 6997 */ 'L', 'W', 'Z', 'U', 0,
  /* 7002 */ 'F', 'D', 'I', 'V', 0,
  /* 7007 */ 'C', 'R', 'E', 'Q', 'V', 0,
  /* 7013 */ 'E', 'V', 'E', 'Q', 'V', 0,
  /* 7019 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 'A', 'A', 'W', 0,
  /* 7031 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 'A', 'A', 'W', 0,
  /* 7043 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 'A', 'A', 'W', 0,
  /* 7055 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 'A', 'A', 'W', 0,
  /* 7067 */ 'E', 'V', 'A', 'D', 'D', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7079 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7091 */ 'E', 'V', 'S', 'U', 'B', 'F', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7104 */ 'E', 'V', 'M', 'W', 'L', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7116 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7128 */ 'E', 'V', 'A', 'D', 'D', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7140 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7152 */ 'E', 'V', 'S', 'U', 'B', 'F', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7165 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7177 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7189 */ 'E', 'V', 'A', 'D', 'D', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7201 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7213 */ 'E', 'V', 'S', 'U', 'B', 'F', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7226 */ 'E', 'V', 'M', 'W', 'L', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7238 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7250 */ 'E', 'V', 'A', 'D', 'D', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7262 */ 'E', 'V', 'M', 'H', 'E', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7274 */ 'E', 'V', 'S', 'U', 'B', 'F', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7287 */ 'E', 'V', 'M', 'W', 'L', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7299 */ 'E', 'V', 'M', 'H', 'O', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7311 */ 'V', 'S', 'R', 'A', 'W', 0,
  /* 7317 */ 'E', 'V', 'A', 'D', 'D', 'W', 0,
  /* 7324 */ 'E', 'V', 'L', 'D', 'W', 0,
  /* 7330 */ 'E', 'V', 'R', 'N', 'D', 'W', 0,
  /* 7337 */ 'E', 'V', 'S', 'T', 'D', 'W', 0,
  /* 7344 */ 'E', 'V', 'S', 'U', 'B', 'F', 'W', 0,
  /* 7352 */ 'E', 'V', 'S', 'U', 'B', 'I', 'F', 'W', 0,
  /* 7361 */ 'V', 'M', 'R', 'G', 'H', 'W', 0,
  /* 7368 */ 'X', 'X', 'M', 'R', 'G', 'H', 'W', 0,
  /* 7376 */ 'M', 'U', 'L', 'H', 'W', 0,
  /* 7382 */ 'E', 'V', 'A', 'D', 'D', 'I', 'W', 0,
  /* 7390 */ 'F', 'C', 'T', 'I', 'W', 0,
  /* 7396 */ 'V', 'M', 'R', 'G', 'L', 'W', 0,
  /* 7403 */ 'X', 'X', 'M', 'R', 'G', 'L', 'W', 0,
  /* 7411 */ 'M', 'U', 'L', 'L', 'W', 0,
  /* 7417 */ 'C', 'M', 'P', 'L', 'W', 0,
  /* 7423 */ 'E', 'V', 'R', 'L', 'W', 0,
  /* 7429 */ 'E', 'V', 'S', 'L', 'W', 0,
  /* 7435 */ 'L', 'M', 'W', 0,
  /* 7439 */ 'S', 'T', 'M', 'W', 0,
  /* 7444 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 'A', 'N', 'W', 0,
  /* 7456 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 'A', 'N', 'W', 0,
  /* 7468 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 'A', 'N', 'W', 0,
  /* 7480 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 'A', 'N', 'W', 0,
  /* 7492 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7504 */ 'E', 'V', 'M', 'W', 'L', 'S', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7516 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7528 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7540 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7552 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7564 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7576 */ 'E', 'V', 'M', 'W', 'L', 'S', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7588 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7600 */ 'E', 'V', 'M', 'H', 'E', 'U', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7612 */ 'E', 'V', 'M', 'W', 'L', 'U', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7624 */ 'E', 'V', 'M', 'H', 'O', 'U', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7636 */ 'C', 'M', 'P', 'W', 0,
  /* 7641 */ 'V', 'S', 'R', 'W', 0,
  /* 7646 */ 'V', 'A', 'V', 'G', 'S', 'W', 0,
  /* 7653 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'W', 0,
  /* 7662 */ 'E', 'V', 'C', 'N', 'T', 'L', 'S', 'W', 0,
  /* 7671 */ 'V', 'M', 'I', 'N', 'S', 'W', 0,
  /* 7678 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 0,
  /* 7687 */ 'E', 'X', 'T', 'S', 'W', 0,
  /* 7693 */ 'V', 'M', 'A', 'X', 'S', 'W', 0,
  /* 7700 */ 'V', 'S', 'P', 'L', 'T', 'W', 0,
  /* 7707 */ 'X', 'X', 'S', 'P', 'L', 'T', 'W', 0,
  /* 7715 */ 'P', 'O', 'P', 'C', 'N', 'T', 'W', 0,
  /* 7723 */ 'S', 'T', 'W', 0,
  /* 7727 */ 'V', 'S', 'U', 'B', 'C', 'U', 'W', 0,
  /* 7735 */ 'V', 'A', 'D', 'D', 'C', 'U', 'W', 0,
  /* 7743 */ 'V', 'A', 'V', 'G', 'U', 'W', 0,
  /* 7750 */ 'V', 'M', 'I', 'N', 'U', 'W', 0,
  /* 7757 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 0,
  /* 7766 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 0,
  /* 7775 */ 'V', 'M', 'A', 'X', 'U', 'W', 0,
  /* 7782 */ 'D', 'I', 'V', 'W', 0,
  /* 7787 */ 'E', 'V', 'C', 'N', 'T', 'L', 'Z', 'W', 0,
  /* 7796 */ 'L', 'X', 'V', 'D', '2', 'X', 0,
  /* 7803 */ 'S', 'T', 'X', 'V', 'D', '2', 'X', 0,
  /* 7811 */ 'L', 'X', 'V', 'W', '4', 'X', 0,
  /* 7818 */ 'S', 'T', 'X', 'V', 'W', '4', 'X', 0,
  /* 7826 */ 'L', 'H', 'A', 'X', 0,
  /* 7831 */ 'T', 'L', 'B', 'I', 'V', 'A', 'X', 0,
  /* 7839 */ 'L', 'F', 'I', 'W', 'A', 'X', 0,
  /* 7846 */ 'L', 'W', 'A', 'X', 0,
  /* 7851 */ 'L', 'V', 'E', 'B', 'X', 0,
  /* 7857 */ 'S', 'T', 'V', 'E', 'B', 'X', 0,
  /* 7864 */ 'S', 'T', 'B', 'X', 0,
  /* 7869 */ 'S', 'T', 'D', 'C', 'X', 0,
  /* 7875 */ 'S', 'T', 'W', 'C', 'X', 0,
  /* 7881 */ 'E', 'V', 'L', 'D', 'D', 'X', 0,
  /* 7888 */ 'E', 'V', 'S', 'T', 'D', 'D', 'X', 0,
  /* 7896 */ 'L', 'F', 'D', 'X', 0,
  /* 7901 */ 'S', 'T', 'F', 'D', 'X', 0,
  /* 7907 */ 'L', 'D', 'X', 0,
  /* 7911 */ 'L', 'X', 'S', 'D', 'X', 0,
  /* 7917 */ 'S', 'T', 'X', 'S', 'D', 'X', 0,
  /* 7924 */ 'S', 'T', 'D', 'X', 0,
  /* 7929 */ 'E', 'V', 'L', 'W', 'H', 'E', 'X', 0,
  /* 7937 */ 'E', 'V', 'S', 'T', 'W', 'H', 'E', 'X', 0,
  /* 7946 */ 'E', 'V', 'S', 'T', 'W', 'W', 'E', 'X', 0,
  /* 7955 */ 'E', 'V', 'L', 'D', 'H', 'X', 0,
  /* 7962 */ 'E', 'V', 'S', 'T', 'D', 'H', 'X', 0,
  /* 7970 */ 'L', 'V', 'E', 'H', 'X', 0,
  /* 7976 */ 'S', 'T', 'V', 'E', 'H', 'X', 0,
  /* 7983 */ 'S', 'T', 'H', 'X', 0,
  /* 7988 */ 'S', 'T', 'B', 'C', 'I', 'X', 0,
  /* 7995 */ 'L', 'D', 'C', 'I', 'X', 0,
  /* 8001 */ 'S', 'T', 'D', 'C', 'I', 'X', 0,
  /* 8008 */ 'S', 'T', 'H', 'C', 'I', 'X', 0,
  /* 8015 */ 'S', 'T', 'W', 'C', 'I', 'X', 0,
  /* 8022 */ 'L', 'B', 'Z', 'C', 'I', 'X', 0,
  /* 8029 */ 'L', 'H', 'Z', 'C', 'I', 'X', 0,
  /* 8036 */ 'L', 'W', 'Z', 'C', 'I', 'X', 0,
  /* 8043 */ 'E', 'V', 'S', 'T', 'W', 'H', 'O', 'X', 0,
  /* 8052 */ 'E', 'V', 'S', 'T', 'W', 'W', 'O', 'X', 0,
  /* 8061 */ 'V', 'U', 'P', 'K', 'H', 'P', 'X', 0,
  /* 8069 */ 'V', 'P', 'K', 'P', 'X', 0,
  /* 8075 */ 'V', 'U', 'P', 'K', 'L', 'P', 'X', 0,
  /* 8083 */ 'L', 'D', 'A', 'R', 'X', 0,
  /* 8089 */ 'L', 'W', 'A', 'R', 'X', 0,
  /* 8095 */ 'L', 'D', 'B', 'R', 'X', 0,
  /* 8101 */ 'S', 'T', 'D', 'B', 'R', 'X', 0,
  /* 8108 */ 'L', 'H', 'B', 'R', 'X', 0,
  /* 8114 */ 'S', 'T', 'H', 'B', 'R', 'X', 0,
  /* 8121 */ 'L', 'W', 'B', 'R', 'X', 0,
  /* 8127 */ 'S', 'T', 'W', 'B', 'R', 'X', 0,
  /* 8134 */ 'T', 'L', 'B', 'S', 'X', 0,
  /* 8140 */ 'L', 'X', 'V', 'D', 'S', 'X', 0,
  /* 8147 */ 'V', 'C', 'F', 'S', 'X', 0,
  /* 8153 */ 'L', 'F', 'S', 'X', 0,
  /* 8158 */ 'S', 'T', 'F', 'S', 'X', 0,
  /* 8164 */ 'E', 'V', 'L', 'W', 'H', 'O', 'S', 'X', 0,
  /* 8173 */ 'E', 'V', 'L', 'H', 'H', 'E', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 8186 */ 'E', 'V', 'L', 'W', 'H', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 8198 */ 'E', 'V', 'L', 'H', 'H', 'O', 'S', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 8212 */ 'E', 'V', 'L', 'H', 'H', 'O', 'U', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 8226 */ 'E', 'V', 'L', 'W', 'W', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 8238 */ 'L', 'H', 'A', 'U', 'X', 0,
  /* 8244 */ 'L', 'W', 'A', 'U', 'X', 0,
  /* 8250 */ 'S', 'T', 'B', 'U', 'X', 0,
  /* 8256 */ 'L', 'F', 'D', 'U', 'X', 0,
  /* 8262 */ 'S', 'T', 'F', 'D', 'U', 'X', 0,
  /* 8269 */ 'L', 'D', 'U', 'X', 0,
  /* 8274 */ 'S', 'T', 'D', 'U', 'X', 0,
  /* 8280 */ 'V', 'C', 'F', 'U', 'X', 0,
  /* 8286 */ 'S', 'T', 'H', 'U', 'X', 0,
  /* 8292 */ 'E', 'V', 'L', 'W', 'H', 'O', 'U', 'X', 0,
  /* 8301 */ 'L', 'F', 'S', 'U', 'X', 0,
  /* 8307 */ 'S', 'T', 'F', 'S', 'U', 'X', 0,
  /* 8314 */ 'S', 'T', 'W', 'U', 'X', 0,
  /* 8320 */ 'L', 'B', 'Z', 'U', 'X', 0,
  /* 8326 */ 'L', 'H', 'Z', 'U', 'X', 0,
  /* 8332 */ 'L', 'W', 'Z', 'U', 'X', 0,
  /* 8338 */ 'L', 'V', 'X', 0,
  /* 8342 */ 'S', 'T', 'V', 'X', 0,
  /* 8347 */ 'E', 'V', 'L', 'D', 'W', 'X', 0,
  /* 8354 */ 'E', 'V', 'S', 'T', 'D', 'W', 'X', 0,
  /* 8362 */ 'L', 'V', 'E', 'W', 'X', 0,
  /* 8368 */ 'S', 'T', 'V', 'E', 'W', 'X', 0,
  /* 8375 */ 'S', 'T', 'F', 'I', 'W', 'X', 0,
  /* 8382 */ 'S', 'T', 'W', 'X', 0,
  /* 8387 */ 'L', 'B', 'Z', 'X', 0,
  /* 8392 */ 'L', 'H', 'Z', 'X', 0,
  /* 8397 */ 'L', 'F', 'I', 'W', 'Z', 'X', 0,
  /* 8404 */ 'L', 'W', 'Z', 'X', 0,
  /* 8409 */ 'C', 'O', 'P', 'Y', 0,
  /* 8414 */ 'D', 'C', 'B', 'Z', 0,
  /* 8419 */ 'L', 'B', 'Z', 0,
  /* 8423 */ 'B', 'D', 'Z', 0,
  /* 8427 */ 'F', 'C', 'T', 'I', 'D', 'Z', 0,
  /* 8434 */ 'L', 'H', 'Z', 0,
  /* 8438 */ 'V', 'R', 'F', 'I', 'Z', 0,
  /* 8444 */ 'X', 'S', 'R', 'D', 'P', 'I', 'Z', 0,
  /* 8452 */ 'X', 'V', 'R', 'D', 'P', 'I', 'Z', 0,
  /* 8460 */ 'X', 'V', 'R', 'S', 'P', 'I', 'Z', 0,
  /* 8468 */ 'B', 'D', 'N', 'Z', 0,
  /* 8473 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 0,
  /* 8481 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 0,
  /* 8489 */ 'F', 'C', 'T', 'I', 'W', 'Z', 0,
  /* 8496 */ 'L', 'W', 'Z', 0,
  /* 8500 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', '_', 0,
  /* 8509 */ 'B', 'L', '8', '_', 'T', 'L', 'S', '_', 0,
  /* 8518 */ 'L', 'D', 't', 'o', 'c', 0,
  /* 8524 */ 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 8531 */ 'B', 'C', 'T', 'R', 'L', '8', '_', 'L', 'D', 'i', 'n', 't', 'o', '_', 't', 'o', 'c', 0,
  /* 8549 */ 'X', 'X', 'L', 'O', 'R', 'f', 0,
  /* 8556 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', 0,
  /* 8567 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', 0,
  /* 8578 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', 0,
  /* 8589 */ 'B', 'D', 'Z', 'L', 'A', 'm', 0,
  /* 8596 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'm', 0,
  /* 8604 */ 'B', 'D', 'Z', 'A', 'm', 0,
  /* 8610 */ 'B', 'D', 'N', 'Z', 'A', 'm', 0,
  /* 8617 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 8625 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 8634 */ 'B', 'D', 'Z', 'L', 'm', 0,
  /* 8640 */ 'B', 'D', 'N', 'Z', 'L', 'm', 0,
  /* 8647 */ 'B', 'D', 'Z', 'L', 'R', 'm', 0,
  /* 8654 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'm', 0,
  /* 8662 */ 'B', 'D', 'Z', 'm', 0,
  /* 8667 */ 'B', 'D', 'N', 'Z', 'm', 0,
  /* 8673 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 'n', 0,
  /* 8682 */ 'B', 'C', 'C', 'T', 'R', '8', 'n', 0,
  /* 8690 */ 'B', 'C', 'n', 0,
  /* 8694 */ 'B', 'C', 'L', 'n', 0,
  /* 8699 */ 'B', 'C', 'L', 'R', 'L', 'n', 0,
  /* 8706 */ 'B', 'C', 'C', 'T', 'R', 'L', 'n', 0,
  /* 8714 */ 'B', 'C', 'L', 'R', 'n', 0,
  /* 8720 */ 'B', 'C', 'C', 'T', 'R', 'n', 0,
  /* 8727 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 'o', 0,
  /* 8740 */ 'A', 'D', 'D', '4', 'o', 0,
  /* 8746 */ 'E', 'X', 'T', 'S', 'B', '8', 'o', 0,
  /* 8754 */ 'A', 'D', 'D', 'C', '8', 'o', 0,
  /* 8761 */ 'A', 'N', 'D', 'C', '8', 'o', 0,
  /* 8768 */ 'S', 'U', 'B', 'F', 'C', '8', 'o', 0,
  /* 8776 */ 'O', 'R', 'C', '8', 'o', 0,
  /* 8782 */ 'A', 'D', 'D', '8', 'o', 0,
  /* 8788 */ 'N', 'A', 'N', 'D', '8', 'o', 0,
  /* 8795 */ 'A', 'D', 'D', 'E', '8', 'o', 0,
  /* 8802 */ 'S', 'U', 'B', 'F', 'E', '8', 'o', 0,
  /* 8810 */ 'A', 'D', 'D', 'M', 'E', '8', 'o', 0,
  /* 8818 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 'o', 0,
  /* 8827 */ 'A', 'D', 'D', 'Z', 'E', '8', 'o', 0,
  /* 8835 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 'o', 0,
  /* 8844 */ 'S', 'U', 'B', 'F', '8', 'o', 0,
  /* 8851 */ 'N', 'E', 'G', '8', 'o', 0,
  /* 8857 */ 'E', 'X', 'T', 'S', 'H', '8', 'o', 0,
  /* 8865 */ 'R', 'L', 'W', 'I', 'M', 'I', '8', 'o', 0,
  /* 8874 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 'o', 0,
  /* 8883 */ 'R', 'L', 'W', 'N', 'M', '8', 'o', 0,
  /* 8891 */ 'N', 'O', 'R', '8', 'o', 0,
  /* 8897 */ 'X', 'O', 'R', '8', 'o', 0,
  /* 8903 */ 'E', 'Q', 'V', '8', 'o', 0,
  /* 8909 */ 'S', 'L', 'W', '8', 'o', 0,
  /* 8915 */ 'S', 'R', 'W', '8', 'o', 0,
  /* 8921 */ 'C', 'N', 'T', 'L', 'Z', 'W', '8', 'o', 0,
  /* 8930 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 'o', 0,
  /* 8940 */ 'E', 'X', 'T', 'S', 'B', 'o', 0,
  /* 8947 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 'o', 0,
  /* 8957 */ 'F', 'S', 'U', 'B', 'o', 0,
  /* 8963 */ 'F', 'M', 'S', 'U', 'B', 'o', 0,
  /* 8970 */ 'F', 'N', 'M', 'S', 'U', 'B', 'o', 0,
  /* 8978 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 'o', 0,
  /* 8988 */ 'A', 'D', 'D', 'C', 'o', 0,
  /* 8994 */ 'A', 'N', 'D', 'C', 'o', 0,
  /* 9000 */ 'S', 'U', 'B', 'F', 'C', 'o', 0,
  /* 9007 */ 'S', 'U', 'B', 'I', 'C', 'o', 0,
  /* 9014 */ 'A', 'D', 'D', 'I', 'C', 'o', 0,
  /* 9021 */ 'R', 'L', 'D', 'I', 'C', 'o', 0,
  /* 9028 */ 'O', 'R', 'C', 'o', 0,
  /* 9033 */ 'S', 'R', 'A', 'D', 'o', 0,
  /* 9039 */ 'F', 'A', 'D', 'D', 'o', 0,
  /* 9045 */ 'F', 'M', 'A', 'D', 'D', 'o', 0,
  /* 9052 */ 'F', 'N', 'M', 'A', 'D', 'D', 'o', 0,
  /* 9060 */ 'F', 'N', 'E', 'G', 'D', 'o', 0,
  /* 9067 */ 'M', 'U', 'L', 'H', 'D', 'o', 0,
  /* 9074 */ 'F', 'C', 'F', 'I', 'D', 'o', 0,
  /* 9081 */ 'F', 'C', 'T', 'I', 'D', 'o', 0,
  /* 9088 */ 'F', 'S', 'E', 'L', 'D', 'o', 0,
  /* 9095 */ 'M', 'U', 'L', 'L', 'D', 'o', 0,
  /* 9102 */ 'S', 'L', 'D', 'o', 0,
  /* 9107 */ 'F', 'R', 'I', 'M', 'D', 'o', 0,
  /* 9114 */ 'N', 'A', 'N', 'D', 'o', 0,
  /* 9120 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 'o', 0,
  /* 9129 */ 'F', 'R', 'I', 'N', 'D', 'o', 0,
  /* 9136 */ 'F', 'R', 'I', 'P', 'D', 'o', 0,
  /* 9143 */ 'S', 'R', 'D', 'o', 0,
  /* 9148 */ 'F', 'A', 'B', 'S', 'D', 'o', 0,
  /* 9155 */ 'F', 'N', 'A', 'B', 'S', 'D', 'o', 0,
  /* 9163 */ 'D', 'I', 'V', 'D', 'o', 0,
  /* 9169 */ 'F', 'R', 'I', 'Z', 'D', 'o', 0,
  /* 9176 */ 'C', 'N', 'T', 'L', 'Z', 'D', 'o', 0,
  /* 9184 */ 'A', 'D', 'D', 'E', 'o', 0,
  /* 9190 */ 'S', 'U', 'B', 'F', 'E', 'o', 0,
  /* 9197 */ 'A', 'D', 'D', 'M', 'E', 'o', 0,
  /* 9204 */ 'S', 'U', 'B', 'F', 'M', 'E', 'o', 0,
  /* 9212 */ 'F', 'R', 'E', 'o', 0,
  /* 9217 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'o', 0,
  /* 9226 */ 'A', 'D', 'D', 'Z', 'E', 'o', 0,
  /* 9233 */ 'S', 'U', 'B', 'F', 'Z', 'E', 'o', 0,
  /* 9241 */ 'S', 'U', 'B', 'F', 'o', 0,
  /* 9247 */ 'N', 'E', 'G', 'o', 0,
  /* 9252 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 'o', 0,
  /* 9262 */ 'E', 'X', 'T', 'S', 'H', 'o', 0,
  /* 9269 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 'o', 0,
  /* 9279 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 'o', 0,
  /* 9289 */ 'S', 'R', 'A', 'D', 'I', 'o', 0,
  /* 9296 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 'o', 0,
  /* 9306 */ 'E', 'X', 'T', 'L', 'D', 'I', 'o', 0,
  /* 9314 */ 'A', 'N', 'D', 'I', 'o', 0,
  /* 9320 */ 'C', 'L', 'R', 'R', 'D', 'I', 'o', 0,
  /* 9328 */ 'I', 'N', 'S', 'R', 'D', 'I', 'o', 0,
  /* 9336 */ 'R', 'O', 'T', 'R', 'D', 'I', 'o', 0,
  /* 9344 */ 'E', 'X', 'T', 'R', 'D', 'I', 'o', 0,
  /* 9352 */ 'R', 'L', 'D', 'I', 'M', 'I', 'o', 0,
  /* 9360 */ 'R', 'L', 'W', 'I', 'M', 'I', 'o', 0,
  /* 9368 */ 'S', 'R', 'A', 'W', 'I', 'o', 0,
  /* 9375 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 'o', 0,
  /* 9385 */ 'I', 'N', 'S', 'L', 'W', 'I', 'o', 0,
  /* 9393 */ 'E', 'X', 'T', 'L', 'W', 'I', 'o', 0,
  /* 9401 */ 'C', 'L', 'R', 'R', 'W', 'I', 'o', 0,
  /* 9409 */ 'I', 'N', 'S', 'R', 'W', 'I', 'o', 0,
  /* 9417 */ 'R', 'O', 'T', 'R', 'W', 'I', 'o', 0,
  /* 9425 */ 'E', 'X', 'T', 'R', 'W', 'I', 'o', 0,
  /* 9433 */ 'R', 'L', 'D', 'C', 'L', 'o', 0,
  /* 9440 */ 'R', 'L', 'D', 'I', 'C', 'L', 'o', 0,
  /* 9448 */ 'F', 'M', 'U', 'L', 'o', 0,
  /* 9454 */ 'R', 'L', 'W', 'I', 'N', 'M', 'o', 0,
  /* 9462 */ 'R', 'L', 'W', 'N', 'M', 'o', 0,
  /* 9469 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'D', 'P', 'o', 0,
  /* 9480 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'D', 'P', 'o', 0,
  /* 9491 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'D', 'P', 'o', 0,
  /* 9502 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 'o', 0,
  /* 9511 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 'o', 0,
  /* 9521 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 'o', 0,
  /* 9531 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 'o', 0,
  /* 9541 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'S', 'P', 'o', 0,
  /* 9552 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'S', 'P', 'o', 0,
  /* 9563 */ 'F', 'R', 'S', 'P', 'o', 0,
  /* 9569 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'P', 'o', 0,
  /* 9580 */ 'R', 'L', 'D', 'C', 'R', 'o', 0,
  /* 9587 */ 'R', 'L', 'D', 'I', 'C', 'R', 'o', 0,
  /* 9595 */ 'F', 'M', 'R', 'o', 0,
  /* 9600 */ 'N', 'O', 'R', 'o', 0,
  /* 9605 */ 'X', 'O', 'R', 'o', 0,
  /* 9610 */ 'F', 'S', 'U', 'B', 'S', 'o', 0,
  /* 9617 */ 'F', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 9625 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 9634 */ 'F', 'A', 'D', 'D', 'S', 'o', 0,
  /* 9641 */ 'F', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 9649 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 9658 */ 'F', 'C', 'F', 'I', 'D', 'S', 'o', 0,
  /* 9666 */ 'F', 'R', 'E', 'S', 'o', 0,
  /* 9672 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'o', 0,
  /* 9682 */ 'F', 'N', 'E', 'G', 'S', 'o', 0,
  /* 9689 */ 'A', 'N', 'D', 'I', 'S', 'o', 0,
  /* 9696 */ 'F', 'S', 'E', 'L', 'S', 'o', 0,
  /* 9703 */ 'F', 'M', 'U', 'L', 'S', 'o', 0,
  /* 9710 */ 'F', 'R', 'I', 'M', 'S', 'o', 0,
  /* 9717 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 'o', 0,
  /* 9726 */ 'F', 'R', 'I', 'N', 'S', 'o', 0,
  /* 9733 */ 'F', 'R', 'I', 'P', 'S', 'o', 0,
  /* 9740 */ 'F', 'A', 'B', 'S', 'S', 'o', 0,
  /* 9747 */ 'F', 'N', 'A', 'B', 'S', 'S', 'o', 0,
  /* 9755 */ 'F', 'S', 'Q', 'R', 'T', 'S', 'o', 0,
  /* 9763 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 'o', 0,
  /* 9772 */ 'F', 'D', 'I', 'V', 'S', 'o', 0,
  /* 9779 */ 'F', 'R', 'I', 'Z', 'S', 'o', 0,
  /* 9786 */ 'F', 'S', 'Q', 'R', 'T', 'o', 0,
  /* 9793 */ 'M', 'U', 'L', 'H', 'D', 'U', 'o', 0,
  /* 9801 */ 'F', 'C', 'F', 'I', 'D', 'U', 'o', 0,
  /* 9809 */ 'D', 'I', 'V', 'D', 'U', 'o', 0,
  /* 9816 */ 'M', 'U', 'L', 'H', 'W', 'U', 'o', 0,
  /* 9824 */ 'D', 'I', 'V', 'W', 'U', 'o', 0,
  /* 9831 */ 'F', 'D', 'I', 'V', 'o', 0,
  /* 9837 */ 'E', 'Q', 'V', 'o', 0,
  /* 9842 */ 'S', 'R', 'A', 'W', 'o', 0,
  /* 9848 */ 'M', 'U', 'L', 'H', 'W', 'o', 0,
  /* 9855 */ 'F', 'C', 'T', 'I', 'W', 'o', 0,
  /* 9862 */ 'M', 'U', 'L', 'L', 'W', 'o', 0,
  /* 9869 */ 'S', 'L', 'W', 'o', 0,
  /* 9874 */ 'S', 'R', 'W', 'o', 0,
  /* 9879 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 'o', 0,
  /* 9889 */ 'E', 'X', 'T', 'S', 'W', 'o', 0,
  /* 9896 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 'o', 0,
  /* 9906 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 'o', 0,
  /* 9916 */ 'D', 'I', 'V', 'W', 'o', 0,
  /* 9922 */ 'C', 'N', 'T', 'L', 'Z', 'W', 'o', 0,
  /* 9930 */ 'F', 'C', 'T', 'I', 'D', 'Z', 'o', 0,
  /* 9938 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 'o', 0,
  /* 9947 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 'o', 0,
  /* 9956 */ 'F', 'C', 'T', 'I', 'W', 'Z', 'o', 0,
  /* 9964 */ 'B', 'D', 'Z', 'L', 'A', 'p', 0,
  /* 9971 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'p', 0,
  /* 9979 */ 'B', 'D', 'Z', 'A', 'p', 0,
  /* 9985 */ 'B', 'D', 'N', 'Z', 'A', 'p', 0,
  /* 9992 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 10000 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 10009 */ 'B', 'D', 'Z', 'L', 'p', 0,
  /* 10015 */ 'B', 'D', 'N', 'Z', 'L', 'p', 0,
  /* 10022 */ 'B', 'D', 'Z', 'L', 'R', 'p', 0,
  /* 10029 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'p', 0,
  /* 10037 */ 'B', 'D', 'Z', 'p', 0,
  /* 10042 */ 'B', 'D', 'N', 'Z', 'p', 0,
  /* 10048 */ 'M', 'T', 'C', 'T', 'R', '8', 'l', 'o', 'o', 'p', 0,
  /* 10059 */ 'M', 'T', 'C', 'T', 'R', 'l', 'o', 'o', 'p', 0,
  /* 10069 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 0,
  /* 10083 */ 'B', 'C', 'L', 'a', 'l', 'w', 'a', 'y', 's', 0,
  /* 10093 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 10103 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 10113 */ 'L', 'A', 'x', 0,
  /* 10117 */ 'F', 'A', 'D', 'D', 'r', 't', 'z', 0,
};

extern const unsigned PPCInstrNameIndices[] = {
    3667U, 4296U, 4470U, 3969U, 3960U, 4008U, 3242U, 3257U, 
    3122U, 3271U, 6313U, 3015U, 2905U, 8409U, 2970U, 6804U, 
    2793U, 4568U, 6763U, 2831U, 6752U, 2534U, 624U, 6230U, 
    8740U, 953U, 6238U, 8500U, 8782U, 2417U, 904U, 8754U, 
    8988U, 2918U, 964U, 8795U, 9184U, 3544U, 1076U, 2456U, 
    923U, 9014U, 6200U, 1422U, 2002U, 55U, 1986U, 1960U, 
    1973U, 1949U, 4157U, 267U, 4123U, 227U, 4134U, 240U, 
    4114U, 2977U, 977U, 8810U, 9197U, 3099U, 992U, 8827U, 
    9226U, 4491U, 5600U, 2763U, 959U, 8789U, 2425U, 910U, 
    8761U, 8994U, 9689U, 1717U, 9314U, 1710U, 6722U, 1441U, 
    6737U, 1457U, 9115U, 772U, 168U, 449U, 1208U, 695U, 
    91U, 372U, 1135U, 736U, 132U, 413U, 1174U, 715U, 
    111U, 392U, 1154U, 812U, 208U, 489U, 1246U, 675U, 
    71U, 352U, 1103U, 792U, 188U, 469U, 1227U, 756U, 
    152U, 433U, 1193U, 4486U, 2172U, 1839U, 2410U, 2413U, 
    1862U, 5877U, 1400U, 4061U, 1299U, 3942U, 2126U, 5712U, 
    4025U, 5871U, 1393U, 8682U, 4054U, 1291U, 8673U, 8706U, 
    8720U, 3938U, 5707U, 4019U, 8699U, 8714U, 10083U, 8694U, 
    5865U, 1387U, 4047U, 1284U, 8531U, 8690U, 8468U, 1663U, 
    2160U, 8610U, 9985U, 4101U, 2138U, 8596U, 9971U, 5734U, 
    1353U, 4039U, 8625U, 10000U, 8654U, 10029U, 8640U, 10015U, 
    8667U, 10042U, 8423U, 1653U, 2155U, 8604U, 9979U, 4096U, 
    2132U, 8589U, 9964U, 5728U, 1346U, 4032U, 8617U, 9992U, 
    8647U, 10022U, 8634U, 10009U, 8662U, 10037U, 3934U, 1274U, 
    5286U, 6261U, 6246U, 8509U, 2116U, 868U, 5277U, 5702U, 
    1329U, 4013U, 6254U, 2499U, 3561U, 9296U, 3855U, 9375U, 
    3592U, 9320U, 3891U, 9401U, 2210U, 880U, 2826U, 3586U, 
    2744U, 3554U, 7417U, 3841U, 7636U, 3885U, 2898U, 9176U, 
    7789U, 1535U, 8921U, 9922U, 6661U, 6668U, 2781U, 2430U, 
    7007U, 2767U, 5781U, 5793U, 2575U, 6685U, 6677U, 5810U, 
    1837U, 3112U, 3500U, 6825U, 6651U, 6835U, 8414U, 4090U, 
    3515U, 2887U, 6904U, 9809U, 9163U, 7782U, 6981U, 9824U, 
    9916U, 6343U, 4001U, 6831U, 508U, 6842U, 514U, 6853U, 
    529U, 6848U, 522U, 2525U, 938U, 296U, 589U, 314U, 
    607U, 10069U, 7009U, 1515U, 8903U, 9837U, 5896U, 7382U, 
    7067U, 7189U, 7128U, 7250U, 7317U, 2787U, 2437U, 5615U, 
    6363U, 6942U, 6372U, 6951U, 7662U, 7787U, 6497U, 6979U, 
    7013U, 2298U, 3419U, 2675U, 7881U, 3299U, 7955U, 7324U, 
    8347U, 6591U, 8173U, 6614U, 8198U, 6627U, 8212U, 2943U, 
    7929U, 6299U, 8164U, 6923U, 8292U, 6603U, 8186U, 6640U, 
    8226U, 3645U, 4538U, 4528U, 3655U, 1725U, 4338U, 1769U, 
    4382U, 1803U, 4416U, 3135U, 1867U, 7019U, 7444U, 3697U, 
    2028U, 7079U, 7492U, 3201U, 1906U, 7043U, 7468U, 7201U, 
    7564U, 3732U, 2067U, 7140U, 7528U, 7262U, 7600U, 1737U, 
    4350U, 1781U, 4394U, 1815U, 4428U, 3153U, 1887U, 7031U, 
    7456U, 3715U, 2048U, 7116U, 7516U, 3219U, 1926U, 7055U, 
    7480U, 7238U, 7588U, 3759U, 2097U, 7177U, 7552U, 7299U, 
    7624U, 2145U, 3144U, 1877U, 3706U, 2038U, 3210U, 1916U, 
    3741U, 2077U, 7104U, 7504U, 7226U, 7576U, 3750U, 2087U, 
    7165U, 7540U, 7287U, 7612U, 3162U, 1897U, 1749U, 4362U, 
    3724U, 2058U, 1793U, 4406U, 3228U, 1936U, 1759U, 4372U, 
    3768U, 2107U, 1827U, 4440U, 2774U, 3236U, 5787U, 5798U, 
    2581U, 7423U, 3848U, 7330U, 7429U, 3871U, 3635U, 3809U, 
    6216U, 6915U, 6441U, 6967U, 2681U, 7888U, 3305U, 7962U, 
    7337U, 8354U, 2950U, 7937U, 4508U, 8043U, 3091U, 7946U, 
    4560U, 8052U, 7091U, 7213U, 7152U, 7274U, 7344U, 7352U, 
    5816U, 3570U, 9306U, 3878U, 9393U, 3613U, 9344U, 3912U, 
    9425U, 2300U, 886U, 538U, 8746U, 8940U, 3421U, 1064U, 
    551U, 8857U, 9262U, 7687U, 577U, 8727U, 9889U, 4516U, 
    2855U, 9148U, 6330U, 9740U, 2657U, 5973U, 9634U, 9039U, 
    10117U, 2709U, 5994U, 9658U, 6888U, 6388U, 9763U, 9801U, 
    9074U, 2880U, 6412U, 2806U, 9120U, 6285U, 9717U, 2720U, 
    8473U, 9938U, 8427U, 9930U, 9081U, 7390U, 8481U, 9947U, 
    8489U, 9956U, 9855U, 7002U, 6435U, 9772U, 9831U, 2662U, 
    5979U, 9641U, 9045U, 5764U, 9595U, 2380U, 5958U, 9617U, 
    8963U, 4074U, 6273U, 9703U, 9448U, 2861U, 9155U, 6336U, 
    9747U, 2697U, 9060U, 6108U, 9682U, 2668U, 5986U, 9649U, 
    9052U, 2386U, 5965U, 9625U, 8970U, 2996U, 6080U, 9666U, 
    9212U, 2754U, 9107U, 6279U, 9710U, 2814U, 9129U, 6293U, 
    9726U, 2820U, 9136U, 6307U, 9733U, 2892U, 9169U, 6585U, 
    9779U, 5504U, 9563U, 3007U, 6085U, 9672U, 9217U, 2732U, 
    9088U, 6224U, 9696U, 6819U, 6381U, 9755U, 9786U, 2375U, 
    5952U, 9610U, 8957U, 3505U, 6656U, 3521U, 3864U, 9385U, 
    3599U, 9328U, 3898U, 9409U, 3985U, 1278U, 2513U, 2117U, 
    10113U, 8419U, 1648U, 8022U, 6987U, 1497U, 8320U, 1603U, 
    8387U, 1630U, 2729U, 8083U, 8095U, 7995U, 6895U, 8269U, 
    7907U, 4145U, 253U, 8538U, 8518U, 1849U, 6795U, 3818U, 
    4107U, 2688U, 6870U, 8256U, 7896U, 7839U, 8397U, 6099U, 
    6931U, 8301U, 8153U, 1945U, 863U, 6860U, 1473U, 8238U, 
    1575U, 7826U, 1543U, 8108U, 1561U, 8434U, 1658U, 8029U, 
    6992U, 1503U, 8326U, 1610U, 8392U, 1636U, 3674U, 1085U, 
    6206U, 1429U, 7435U, 3919U, 7851U, 7970U, 8362U, 4069U, 
    5856U, 8338U, 4079U, 2151U, 8089U, 8244U, 7846U, 288U, 
    281U, 8121U, 1568U, 8496U, 1669U, 8036U, 6997U, 1509U, 
    8332U, 1617U, 8404U, 1642U, 8524U, 7911U, 7796U, 8140U, 
    7811U, 5623U, 3170U, 5656U, 1323U, 5884U, 1408U, 5638U, 
    6094U, 5718U, 1334U, 5839U, 3175U, 1013U, 5822U, 5834U, 
    4456U, 2313U, 893U, 3025U, 10093U, 5668U, 2519U, 3189U, 
    1029U, 5890U, 1415U, 10048U, 10059U, 5650U, 0U, 48U, 
    3195U, 5723U, 1340U, 5845U, 2848U, 3182U, 1021U, 5828U, 
    5851U, 4463U, 3034U, 10103U, 5675U, 2703U, 6881U, 9793U, 
    9067U, 7376U, 6960U, 9816U, 9848U, 2738U, 9095U, 3677U, 
    1082U, 7411U, 9862U, 5752U, 5741U, 1361U, 2769U, 958U, 
    8788U, 9114U, 3238U, 1059U, 8851U, 9247U, 5282U, 831U, 
    843U, 5777U, 1373U, 8891U, 9600U, 5771U, 1374U, 8892U, 
    2577U, 948U, 8776U, 9028U, 3805U, 1098U, 6211U, 1435U, 
    9601U, 2868U, 7715U, 6774U, 6783U, 5682U, 6696U, 3043U, 
    3527U, 3549U, 3631U, 2715U, 3532U, 3947U, 9433U, 5644U, 
    9580U, 2462U, 3953U, 564U, 9440U, 5661U, 9587U, 9021U, 
    3683U, 9352U, 3690U, 1089U, 8865U, 9360U, 4277U, 1308U, 
    8874U, 9454U, 4284U, 1316U, 8883U, 9462U, 3606U, 9336U, 
    3905U, 9417U, 2329U, 2641U, 629U, 1036U, 652U, 1122U, 
    2587U, 2546U, 2614U, 642U, 1049U, 665U, 1264U, 2602U, 
    2562U, 2629U, 2016U, 2958U, 2923U, 3000U, 2750U, 3565U, 
    9300U, 9102U, 7431U, 1520U, 8909U, 3859U, 9379U, 9869U, 
    5693U, 6710U, 3072U, 2652U, 3538U, 9289U, 9033U, 7312U, 
    3827U, 9368U, 9842U, 2851U, 3601U, 9330U, 9143U, 7642U, 
    1525U, 8915U, 3900U, 9411U, 9874U, 2325U, 899U, 7988U, 
    6865U, 1479U, 8250U, 1582U, 7864U, 1549U, 2876U, 8101U, 
    8001U, 7869U, 6899U, 8274U, 7924U, 2692U, 6875U, 8262U, 
    7901U, 8375U, 6103U, 6936U, 8307U, 8158U, 3441U, 1071U, 
    8114U, 8008U, 6910U, 1485U, 8286U, 1589U, 7983U, 1555U, 
    7439U, 3924U, 7857U, 7976U, 8368U, 8342U, 4084U, 7723U, 
    1530U, 8127U, 8015U, 7875U, 6974U, 1491U, 8314U, 1596U, 
    8382U, 1624U, 7917U, 7803U, 7818U, 3117U, 1007U, 8844U, 
    2444U, 916U, 8768U, 9000U, 2937U, 970U, 8802U, 9190U, 
    2468U, 930U, 2983U, 984U, 8818U, 9204U, 3105U, 999U, 
    8835U, 9233U, 9241U, 3510U, 2450U, 9007U, 6194U, 2508U, 
    2194U, 873U, 1842U, 855U, 5861U, 1383U, 8556U, 1674U, 
    8567U, 1686U, 8578U, 1698U, 2873U, 3620U, 2022U, 2964U, 
    3978U, 7831U, 2726U, 3671U, 2990U, 331U, 8134U, 345U, 
    2644U, 2505U, 3085U, 338U, 4577U, 7704U, 3930U, 3058U, 
    5628U, 7735U, 5166U, 5919U, 6152U, 6465U, 4186U, 5944U, 
    4230U, 6177U, 4330U, 6489U, 2788U, 2438U, 2242U, 3363U, 
    7646U, 2344U, 3453U, 7743U, 8147U, 32U, 8280U, 40U, 
    5134U, 9502U, 5222U, 9521U, 2366U, 8947U, 3475U, 9269U, 
    7757U, 9896U, 5181U, 9511U, 5231U, 9531U, 2289U, 8930U, 
    3410U, 9252U, 7678U, 9879U, 2393U, 8978U, 3484U, 9279U, 
    7766U, 9906U, 6571U, 14U, 6578U, 23U, 5196U, 5173U, 
    5158U, 5240U, 2306U, 3427U, 7693U, 2402U, 3493U, 7775U, 
    6131U, 6141U, 5215U, 2274U, 3395U, 7671U, 2351U, 3460U, 
    7750U, 4220U, 2180U, 3312U, 7361U, 2187U, 3319U, 7396U, 
    4169U, 4203U, 6160U, 4194U, 4238U, 6185U, 2220U, 3341U, 
    2336U, 3445U, 2281U, 3402U, 2358U, 3467U, 5142U, 5788U, 
    5799U, 4290U, 8069U, 6347U, 6396U, 6355U, 6419U, 4306U, 
    6404U, 4314U, 6427U, 5190U, 4247U, 4450U, 5247U, 8438U, 
    2200U, 3326U, 7424U, 5205U, 3990U, 4070U, 2205U, 3776U, 
    3331U, 4550U, 7430U, 2318U, 3434U, 2257U, 3378U, 7653U, 
    7700U, 5857U, 2174U, 3293U, 7311U, 2215U, 3336U, 4555U, 
    7641U, 7727U, 5151U, 5911U, 6123U, 6457U, 4178U, 5936U, 
    4212U, 6169U, 4322U, 6481U, 6448U, 5902U, 6114U, 5927U, 
    6473U, 8061U, 2249U, 3370U, 8075U, 2266U, 3387U, 5817U, 
    7U, 2166U, 3285U, 6067U, 2228U, 3349U, 6691U, 2931U, 
    3624U, 5806U, 1378U, 8897U, 3804U, 1097U, 6210U, 1434U, 
    9605U, 4991U, 4682U, 4936U, 5055U, 4900U, 5476U, 6001U, 
    6505U, 6034U, 6538U, 4945U, 4698U, 4718U, 5064U, 4646U, 
    4880U, 5118U, 4920U, 4604U, 4838U, 4800U, 4973U, 4784U, 
    4624U, 4858U, 4582U, 4816U, 3783U, 2475U, 4253U, 5253U, 
    8444U, 4748U, 4762U, 5017U, 4666U, 5072U, 5026U, 4999U, 
    5518U, 4690U, 5344U, 4963U, 9480U, 5494U, 9552U, 4738U, 
    9469U, 5372U, 9541U, 5007U, 9491U, 5526U, 9569U, 4910U, 
    5458U, 5485U, 6012U, 6516U, 6045U, 6549U, 4954U, 6023U, 
    6527U, 6056U, 6560U, 4708U, 5352U, 5098U, 5572U, 4728U, 
    5362U, 5108U, 5582U, 5090U, 5564U, 4656U, 5326U, 4890U, 
    5448U, 5126U, 5592U, 4928U, 5468U, 4614U, 5305U, 4848U, 
    5427U, 4808U, 5408U, 4982U, 5509U, 4792U, 5400U, 4635U, 
    5315U, 4869U, 5437U, 4593U, 5294U, 4827U, 5416U, 3790U, 
    2483U, 4261U, 5261U, 8452U, 4755U, 5382U, 3797U, 2491U, 
    4269U, 5269U, 8460U, 4773U, 5389U, 5046U, 5546U, 4674U, 
    5336U, 5081U, 5555U, 5036U, 5536U, 2760U, 2422U, 5774U, 
    5768U, 8549U, 5803U, 7368U, 7403U, 3577U, 3995U, 3833U, 
    7707U, 2409U, 1857U, 5870U, 4053U, 3937U, 2120U, 5706U, 
    4018U, 
};

static inline void InitPPCMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 1297);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct PPCGenInstrInfo : public TargetInstrInfo {
  explicit PPCGenInstrInfo(int SO = -1, int DO = -1);
  virtual ~PPCGenInstrInfo();
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR_DTOR
#undef GET_INSTRINFO_CTOR_DTOR
namespace llvm {
extern const MCInstrDesc PPCInsts[];
extern const unsigned PPCInstrNameIndices[];
extern const char PPCInstrNameData[];
PPCGenInstrInfo::PPCGenInstrInfo(int SO, int DO)
  : TargetInstrInfo(SO, DO) {
  InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 1297);
}
PPCGenInstrInfo::~PPCGenInstrInfo() {}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR_DTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {namespace PPC {
namespace OpName { 
enum {
OPERAND_LAST
};
} // End namespace OpName
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM
#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {namespace PPC {
LLVM_READONLY
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS

#ifdef GET_INSTRINFO_OPERAND_TYPES_ENUM
#undef GET_INSTRINFO_OPERAND_TYPES_ENUM
namespace llvm {namespace PPC {
namespace OpTypes { 
enum OperandType {
  abscalltarget = 0,
  abscondbrtarget = 1,
  absdirectbrtarget = 2,
  calltarget = 3,
  condbrtarget = 4,
  crbitm = 5,
  directbrtarget = 6,
  dispRI = 7,
  dispRIX = 8,
  dispSPE2 = 9,
  dispSPE4 = 10,
  dispSPE8 = 11,
  f32imm = 12,
  f64imm = 13,
  i16imm = 14,
  i1imm = 15,
  i32imm = 16,
  i64imm = 17,
  i8imm = 18,
  imm32SExt16 = 19,
  imm64SExt16 = 20,
  imm64ZExt32 = 21,
  memr = 22,
  memri = 23,
  memrix = 24,
  memrr = 25,
  pred = 26,
  ptr_rc_idx = 27,
  ptr_rc_nor0 = 28,
  s16imm = 29,
  s16imm64 = 30,
  s17imm = 31,
  s17imm64 = 32,
  s5imm = 33,
  spe2dis = 34,
  spe4dis = 35,
  spe8dis = 36,
  tlscall = 37,
  tlscall32 = 38,
  tlsgd = 39,
  tlsgd32 = 40,
  tlsreg = 41,
  tlsreg32 = 42,
  tocentry = 43,
  tocentry32 = 44,
  u16imm = 45,
  u16imm64 = 46,
  u2imm = 47,
  u4imm = 48,
  u5imm = 49,
  u6imm = 50,
  OPERAND_TYPE_LIST_END
};
} // End namespace OpTypes
} // End namespace PPC
} // End namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPES_ENUM
#ifdef GET_INSTRMAP_INFO
#undef GET_INSTRMAP_INFO
namespace llvm {

namespace PPC {

enum IsVSXFMAAlt {
	IsVSXFMAAlt_1
};

enum RC {
	RC_0,
	RC_1
};

// getAltVSXFMAOpcode
int getAltVSXFMAOpcode(uint16_t Opcode) {
static const uint16_t getAltVSXFMAOpcodeTable[][2] = {
  { PPC::XSMADDADP, PPC::XSMADDMDP },
  { PPC::XSMSUBADP, PPC::XSMSUBMDP },
  { PPC::XSNMADDADP, PPC::XSNMADDMDP },
  { PPC::XSNMSUBADP, PPC::XSNMSUBMDP },
  { PPC::XVMADDADP, PPC::XVMADDMDP },
  { PPC::XVMADDASP, PPC::XVMADDMSP },
  { PPC::XVMSUBADP, PPC::XVMSUBMDP },
  { PPC::XVMSUBASP, PPC::XVMSUBMSP },
  { PPC::XVNMADDADP, PPC::XVNMADDMDP },
  { PPC::XVNMADDASP, PPC::XVNMADDMSP },
  { PPC::XVNMSUBADP, PPC::XVNMSUBMDP },
  { PPC::XVNMSUBASP, PPC::XVNMSUBMSP },
}; // End of getAltVSXFMAOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 12;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getAltVSXFMAOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getAltVSXFMAOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getAltVSXFMAOpcodeTable[mid][1];
}

// getNonRecordFormOpcode
int getNonRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getNonRecordFormOpcodeTable[][2] = {
  { PPC::ADD4o, PPC::ADD4 },
  { PPC::ADD8o, PPC::ADD8 },
  { PPC::ADDC8o, PPC::ADDC8 },
  { PPC::ADDCo, PPC::ADDC },
  { PPC::ADDE8o, PPC::ADDE8 },
  { PPC::ADDEo, PPC::ADDE },
  { PPC::ADDICo, PPC::ADDIC },
  { PPC::ADDME8o, PPC::ADDME8 },
  { PPC::ADDMEo, PPC::ADDME },
  { PPC::ADDZE8o, PPC::ADDZE8 },
  { PPC::ADDZEo, PPC::ADDZE },
  { PPC::AND8o, PPC::AND8 },
  { PPC::ANDC8o, PPC::ANDC8 },
  { PPC::ANDCo, PPC::ANDC },
  { PPC::ANDo, PPC::AND },
  { PPC::CNTLZDo, PPC::CNTLZD },
  { PPC::CNTLZW8o, PPC::CNTLZW8 },
  { PPC::CNTLZWo, PPC::CNTLZW },
  { PPC::DIVDUo, PPC::DIVDU },
  { PPC::DIVDo, PPC::DIVD },
  { PPC::DIVWUo, PPC::DIVWU },
  { PPC::DIVWo, PPC::DIVW },
  { PPC::EQV8o, PPC::EQV8 },
  { PPC::EQVo, PPC::EQV },
  { PPC::EXTSB8o, PPC::EXTSB8 },
  { PPC::EXTSBo, PPC::EXTSB },
  { PPC::EXTSH8o, PPC::EXTSH8 },
  { PPC::EXTSHo, PPC::EXTSH },
  { PPC::EXTSW_32_64o, PPC::EXTSW_32_64 },
  { PPC::EXTSWo, PPC::EXTSW },
  { PPC::FABSDo, PPC::FABSD },
  { PPC::FABSSo, PPC::FABSS },
  { PPC::FADDSo, PPC::FADDS },
  { PPC::FADDo, PPC::FADD },
  { PPC::FCFIDSo, PPC::FCFIDS },
  { PPC::FCFIDUSo, PPC::FCFIDUS },
  { PPC::FCFIDUo, PPC::FCFIDU },
  { PPC::FCFIDo, PPC::FCFID },
  { PPC::FCPSGNDo, PPC::FCPSGND },
  { PPC::FCPSGNSo, PPC::FCPSGNS },
  { PPC::FCTIDUZo, PPC::FCTIDUZ },
  { PPC::FCTIDZo, PPC::FCTIDZ },
  { PPC::FCTIDo, PPC::FCTID },
  { PPC::FCTIWUZo, PPC::FCTIWUZ },
  { PPC::FCTIWZo, PPC::FCTIWZ },
  { PPC::FCTIWo, PPC::FCTIW },
  { PPC::FDIVSo, PPC::FDIVS },
  { PPC::FDIVo, PPC::FDIV },
  { PPC::FMADDSo, PPC::FMADDS },
  { PPC::FMADDo, PPC::FMADD },
  { PPC::FMRo, PPC::FMR },
  { PPC::FMSUBSo, PPC::FMSUBS },
  { PPC::FMSUBo, PPC::FMSUB },
  { PPC::FMULSo, PPC::FMULS },
  { PPC::FMULo, PPC::FMUL },
  { PPC::FNABSDo, PPC::FNABSD },
  { PPC::FNABSSo, PPC::FNABSS },
  { PPC::FNEGDo, PPC::FNEGD },
  { PPC::FNEGSo, PPC::FNEGS },
  { PPC::FNMADDSo, PPC::FNMADDS },
  { PPC::FNMADDo, PPC::FNMADD },
  { PPC::FNMSUBSo, PPC::FNMSUBS },
  { PPC::FNMSUBo, PPC::FNMSUB },
  { PPC::FRESo, PPC::FRES },
  { PPC::FREo, PPC::FRE },
  { PPC::FRIMDo, PPC::FRIMD },
  { PPC::FRIMSo, PPC::FRIMS },
  { PPC::FRINDo, PPC::FRIND },
  { PPC::FRINSo, PPC::FRINS },
  { PPC::FRIPDo, PPC::FRIPD },
  { PPC::FRIPSo, PPC::FRIPS },
  { PPC::FRIZDo, PPC::FRIZD },
  { PPC::FRIZSo, PPC::FRIZS },
  { PPC::FRSPo, PPC::FRSP },
  { PPC::FRSQRTESo, PPC::FRSQRTES },
  { PPC::FRSQRTEo, PPC::FRSQRTE },
  { PPC::FSELDo, PPC::FSELD },
  { PPC::FSELSo, PPC::FSELS },
  { PPC::FSQRTSo, PPC::FSQRTS },
  { PPC::FSQRTo, PPC::FSQRT },
  { PPC::FSUBSo, PPC::FSUBS },
  { PPC::FSUBo, PPC::FSUB },
  { PPC::MULHDUo, PPC::MULHDU },
  { PPC::MULHDo, PPC::MULHD },
  { PPC::MULHWUo, PPC::MULHWU },
  { PPC::MULHWo, PPC::MULHW },
  { PPC::MULLDo, PPC::MULLD },
  { PPC::MULLWo, PPC::MULLW },
  { PPC::NAND8o, PPC::NAND8 },
  { PPC::NANDo, PPC::NAND },
  { PPC::NEG8o, PPC::NEG8 },
  { PPC::NEGo, PPC::NEG },
  { PPC::NOR8o, PPC::NOR8 },
  { PPC::NORo, PPC::NOR },
  { PPC::OR8o, PPC::OR8 },
  { PPC::ORC8o, PPC::ORC8 },
  { PPC::ORCo, PPC::ORC },
  { PPC::ORo, PPC::OR },
  { PPC::RLDCLo, PPC::RLDCL },
  { PPC::RLDCRo, PPC::RLDCR },
  { PPC::RLDICLo, PPC::RLDICL },
  { PPC::RLDICRo, PPC::RLDICR },
  { PPC::RLDICo, PPC::RLDIC },
  { PPC::RLDIMIo, PPC::RLDIMI },
  { PPC::RLWIMI8o, PPC::RLWIMI8 },
  { PPC::RLWIMIo, PPC::RLWIMI },
  { PPC::RLWINM8o, PPC::RLWINM8 },
  { PPC::RLWINMo, PPC::RLWINM },
  { PPC::RLWNM8o, PPC::RLWNM8 },
  { PPC::RLWNMo, PPC::RLWNM },
  { PPC::SLDo, PPC::SLD },
  { PPC::SLW8o, PPC::SLW8 },
  { PPC::SLWo, PPC::SLW },
  { PPC::SRADIo, PPC::SRADI },
  { PPC::SRADo, PPC::SRAD },
  { PPC::SRAWIo, PPC::SRAWI },
  { PPC::SRAWo, PPC::SRAW },
  { PPC::SRDo, PPC::SRD },
  { PPC::SRW8o, PPC::SRW8 },
  { PPC::SRWo, PPC::SRW },
  { PPC::SUBF8o, PPC::SUBF8 },
  { PPC::SUBFC8o, PPC::SUBFC8 },
  { PPC::SUBFCo, PPC::SUBFC },
  { PPC::SUBFE8o, PPC::SUBFE8 },
  { PPC::SUBFEo, PPC::SUBFE },
  { PPC::SUBFME8o, PPC::SUBFME8 },
  { PPC::SUBFMEo, PPC::SUBFME },
  { PPC::SUBFZE8o, PPC::SUBFZE8 },
  { PPC::SUBFZEo, PPC::SUBFZE },
  { PPC::SUBFo, PPC::SUBF },
  { PPC::XOR8o, PPC::XOR8 },
  { PPC::XORo, PPC::XOR },
}; // End of getNonRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 132;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getNonRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getNonRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getNonRecordFormOpcodeTable[mid][1];
}

// getRecordFormOpcode
int getRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getRecordFormOpcodeTable[][2] = {
  { PPC::ADD4, PPC::ADD4o },
  { PPC::ADD8, PPC::ADD8o },
  { PPC::ADDC, PPC::ADDCo },
  { PPC::ADDC8, PPC::ADDC8o },
  { PPC::ADDE, PPC::ADDEo },
  { PPC::ADDE8, PPC::ADDE8o },
  { PPC::ADDIC, PPC::ADDICo },
  { PPC::ADDME, PPC::ADDMEo },
  { PPC::ADDME8, PPC::ADDME8o },
  { PPC::ADDZE, PPC::ADDZEo },
  { PPC::ADDZE8, PPC::ADDZE8o },
  { PPC::AND, PPC::ANDo },
  { PPC::AND8, PPC::AND8o },
  { PPC::ANDC, PPC::ANDCo },
  { PPC::ANDC8, PPC::ANDC8o },
  { PPC::CNTLZD, PPC::CNTLZDo },
  { PPC::CNTLZW, PPC::CNTLZWo },
  { PPC::CNTLZW8, PPC::CNTLZW8o },
  { PPC::DIVD, PPC::DIVDo },
  { PPC::DIVDU, PPC::DIVDUo },
  { PPC::DIVW, PPC::DIVWo },
  { PPC::DIVWU, PPC::DIVWUo },
  { PPC::EQV, PPC::EQVo },
  { PPC::EQV8, PPC::EQV8o },
  { PPC::EXTSB, PPC::EXTSBo },
  { PPC::EXTSB8, PPC::EXTSB8o },
  { PPC::EXTSH, PPC::EXTSHo },
  { PPC::EXTSH8, PPC::EXTSH8o },
  { PPC::EXTSW, PPC::EXTSWo },
  { PPC::EXTSW_32_64, PPC::EXTSW_32_64o },
  { PPC::FABSD, PPC::FABSDo },
  { PPC::FABSS, PPC::FABSSo },
  { PPC::FADD, PPC::FADDo },
  { PPC::FADDS, PPC::FADDSo },
  { PPC::FCFID, PPC::FCFIDo },
  { PPC::FCFIDS, PPC::FCFIDSo },
  { PPC::FCFIDU, PPC::FCFIDUo },
  { PPC::FCFIDUS, PPC::FCFIDUSo },
  { PPC::FCPSGND, PPC::FCPSGNDo },
  { PPC::FCPSGNS, PPC::FCPSGNSo },
  { PPC::FCTID, PPC::FCTIDo },
  { PPC::FCTIDUZ, PPC::FCTIDUZo },
  { PPC::FCTIDZ, PPC::FCTIDZo },
  { PPC::FCTIW, PPC::FCTIWo },
  { PPC::FCTIWUZ, PPC::FCTIWUZo },
  { PPC::FCTIWZ, PPC::FCTIWZo },
  { PPC::FDIV, PPC::FDIVo },
  { PPC::FDIVS, PPC::FDIVSo },
  { PPC::FMADD, PPC::FMADDo },
  { PPC::FMADDS, PPC::FMADDSo },
  { PPC::FMR, PPC::FMRo },
  { PPC::FMSUB, PPC::FMSUBo },
  { PPC::FMSUBS, PPC::FMSUBSo },
  { PPC::FMUL, PPC::FMULo },
  { PPC::FMULS, PPC::FMULSo },
  { PPC::FNABSD, PPC::FNABSDo },
  { PPC::FNABSS, PPC::FNABSSo },
  { PPC::FNEGD, PPC::FNEGDo },
  { PPC::FNEGS, PPC::FNEGSo },
  { PPC::FNMADD, PPC::FNMADDo },
  { PPC::FNMADDS, PPC::FNMADDSo },
  { PPC::FNMSUB, PPC::FNMSUBo },
  { PPC::FNMSUBS, PPC::FNMSUBSo },
  { PPC::FRE, PPC::FREo },
  { PPC::FRES, PPC::FRESo },
  { PPC::FRIMD, PPC::FRIMDo },
  { PPC::FRIMS, PPC::FRIMSo },
  { PPC::FRIND, PPC::FRINDo },
  { PPC::FRINS, PPC::FRINSo },
  { PPC::FRIPD, PPC::FRIPDo },
  { PPC::FRIPS, PPC::FRIPSo },
  { PPC::FRIZD, PPC::FRIZDo },
  { PPC::FRIZS, PPC::FRIZSo },
  { PPC::FRSP, PPC::FRSPo },
  { PPC::FRSQRTE, PPC::FRSQRTEo },
  { PPC::FRSQRTES, PPC::FRSQRTESo },
  { PPC::FSELD, PPC::FSELDo },
  { PPC::FSELS, PPC::FSELSo },
  { PPC::FSQRT, PPC::FSQRTo },
  { PPC::FSQRTS, PPC::FSQRTSo },
  { PPC::FSUB, PPC::FSUBo },
  { PPC::FSUBS, PPC::FSUBSo },
  { PPC::MULHD, PPC::MULHDo },
  { PPC::MULHDU, PPC::MULHDUo },
  { PPC::MULHW, PPC::MULHWo },
  { PPC::MULHWU, PPC::MULHWUo },
  { PPC::MULLD, PPC::MULLDo },
  { PPC::MULLW, PPC::MULLWo },
  { PPC::NAND, PPC::NANDo },
  { PPC::NAND8, PPC::NAND8o },
  { PPC::NEG, PPC::NEGo },
  { PPC::NEG8, PPC::NEG8o },
  { PPC::NOR, PPC::NORo },
  { PPC::NOR8, PPC::NOR8o },
  { PPC::OR, PPC::ORo },
  { PPC::OR8, PPC::OR8o },
  { PPC::ORC, PPC::ORCo },
  { PPC::ORC8, PPC::ORC8o },
  { PPC::RLDCL, PPC::RLDCLo },
  { PPC::RLDCR, PPC::RLDCRo },
  { PPC::RLDIC, PPC::RLDICo },
  { PPC::RLDICL, PPC::RLDICLo },
  { PPC::RLDICR, PPC::RLDICRo },
  { PPC::RLDIMI, PPC::RLDIMIo },
  { PPC::RLWIMI, PPC::RLWIMIo },
  { PPC::RLWIMI8, PPC::RLWIMI8o },
  { PPC::RLWINM, PPC::RLWINMo },
  { PPC::RLWINM8, PPC::RLWINM8o },
  { PPC::RLWNM, PPC::RLWNMo },
  { PPC::RLWNM8, PPC::RLWNM8o },
  { PPC::SLD, PPC::SLDo },
  { PPC::SLW, PPC::SLWo },
  { PPC::SLW8, PPC::SLW8o },
  { PPC::SRAD, PPC::SRADo },
  { PPC::SRADI, PPC::SRADIo },
  { PPC::SRAW, PPC::SRAWo },
  { PPC::SRAWI, PPC::SRAWIo },
  { PPC::SRD, PPC::SRDo },
  { PPC::SRW, PPC::SRWo },
  { PPC::SRW8, PPC::SRW8o },
  { PPC::SUBF, PPC::SUBFo },
  { PPC::SUBF8, PPC::SUBF8o },
  { PPC::SUBFC, PPC::SUBFCo },
  { PPC::SUBFC8, PPC::SUBFC8o },
  { PPC::SUBFE, PPC::SUBFEo },
  { PPC::SUBFE8, PPC::SUBFE8o },
  { PPC::SUBFME, PPC::SUBFMEo },
  { PPC::SUBFME8, PPC::SUBFME8o },
  { PPC::SUBFZE, PPC::SUBFZEo },
  { PPC::SUBFZE8, PPC::SUBFZE8o },
  { PPC::XOR, PPC::XORo },
  { PPC::XOR8, PPC::XOR8o },
}; // End of getRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 132;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getRecordFormOpcodeTable[mid][1];
}

} // End PPC namespace
} // End llvm namespace
#endif // GET_INSTRMAP_INFO

